[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brohandev"
        },
        "content": "\u003d HealthHub"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brohandev"
        },
        "content": "https://travis-ci.com/CS2103-AY1819S2-W09-2/main[image:https://travis-ci.com/CS2103-AY1819S2-W09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W09-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W09-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/59b2e00f57cf432eab91667b827851b9[link\u003d\"https://app.codacy.com/app/CS2103-AY1819S2-W09-2/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S2-W09-2/main\u0026utm_campaign\u003dBadge_Grade_Dashboard\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brohandev"
        },
        "content": "\u003d\u003d Why HealthHub?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "“Based on trends, if we project into 2050, even with immigration, the population pyramid will be inverted ..."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "We are going to be growing old faster than any society in the world.”"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            -Lee Hsien Loong, Prime Minister of Singapore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "With the number of elderly slated to reach 900,000 by 2030, it is no surprise that the resources to meet the healthcare"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "demands of the nation are being stretched thin. Even today, it is getting harder and harder to have healthcare professionals"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "come down to our homes to tend to the elderly, on top of their already burgeoning workload in their workplaces."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brohandev"
        },
        "content": "Luckily, we now have HealthHub"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brohandev"
        },
        "content": "HealthHub is the first centralized healthcare platform on the market which allows for healthcare professionals (in the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "form of doctors and nurses) and qualified individuals from the community to tend to the needs of elderly at their own"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brohandev"
        },
        "content": "homes. With a dedicated core administrative team, HealthHub intends to match skilled individuals to their respective"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "jobs efficiently and effectively."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Target Group"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brohandev"
        },
        "content": "HealthHub is looking at 2 large groups of target users."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* The 1st group comprises qualified individuals with necessary skills, be it basic healthcare skills like administering"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "IV drip, to higher-level skills like handling dialysis machinery."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* The 2nd group comprises"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** The elderly needing help at home and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Guardians of the elderly requiring additional healthcare at home"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://github.com/CS2103-AY1819S2-W09-2/main/blob/master/docs/UserGuide.adoc[User Guide]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* https://github.com/CS2103-AY1819S2-W09-2/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* http://github.com/CS2103-AY1819S2-W09-2/main/blob/master/docs/AboutUs.adoc[About Us]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* https://github.com/CS2103-AY1819S2-W09-2/main/blob/master/docs/ContactUs.adoc[Contact Us]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* Original Source Code created by SE-EDU initiative: https://github.com/se-edu/addressbook-level4[addressbook-level4]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "brohandev": 7,
      "-": 49,
      "huichun66": 1
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    archiveName \u003d \u0027healthhub.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "apply plugin: \u0027java\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 236,
      "huichun66": 1,
      "Lookuz": 1
    }
  },
  {
    "path": "config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"logLevel\" : \"INFO\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"userPrefsFilePath\" : \"preferences.json\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 4
    }
  },
  {
    "path": "data/healthworkerbook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"healthWorkers\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Paniel Meier\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"87652133\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8412942G\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Ella Meyer\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"94824524\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S9112942G\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Fione Kunz\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"94822371\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S7812942G\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"94824422\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8812942G\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 25,
      "huichun66": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "HealthHub is developed with love and compassion by the https://github.com/CS2103-AY1819S2-W09-2[W9-02] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d Rohan Dev"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "image::brohandev.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "{empty}[https://github.com/brohandev[github]] [\u003c\u003cbrohandev#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Responsibilities: Modifying the commands (Add/Edit/Delete/Find) for the Patient class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d Choong Wey Yeh"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "image::lookuz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "{empty}[http://github.com/Lookuz[github]] [\u003c\u003clookuz#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Responsibilities: Modifying the commands (Add/Edit/Delete/Find) for the HealthWorker Class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d David Livingston"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "image::daviddl9.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "{empty}[https://github.com/daviddl9[github]] [\u003c\u003cdaviddl9#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Responsibilities: Modifying the commands (Add/Edit/Delete/Find) for the different type of requests."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d Jin Jing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "image::jing1324.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "{empty}[https://github.com/jing1324[github]] [\u003c\u003cjing1324#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Responsibilities: Managing the storage related classes and its associated dependencies."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d Tay Hui Chun"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "image::huichun66.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "{empty}[http://github.com/huichun66[github]] [\u003c\u003chuichun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Role: User Interface Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Responsibilities: Responsible for the UI of the main app and its different interactions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "huichun66": 27
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* *Bug Reports, Suggestions* : Post in our http://github.com/CS2103-AY1819S2-W09-2/main/issues[issue tracker] if you noticed any bugs or"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "have suggestions on how the app can be improved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "huichun66": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Health Hub - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": ":icons: font"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W09-2/main/tree/master"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "By: `Team W9-02 (HealthHub)`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": ". Open a console and run the command `gradlew processResources`. For Mac/Linux environments, run the command `./gradlew processResources` instead. It should finish with the [green]`BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// tag::ui-header[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huichun66"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui[UI Package]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `RequestListPanel`, `InfoPanel`, `HealthWorkerListPanel`, `StatusBarFooter`, etc."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huichun66"
        },
        "content": "All of these, including the `MainWindow`, inherit from the `UiPart` class, which is an abstract class containing methods for handling the loading of `FXML` files."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The `UI` component uses the JavaFX UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data dynamically."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// end::ui-header[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::modelUmlDiagram.jpg[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Request Book data."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* stores the Health Worker Book data."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* stores the Statistics Book data"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cT\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huichun66"
        },
        "content": "As a more OOP model, we store a list of `Request` objects in `Request Book`, which stores the details of every request, including the patient\u0027s details, request date and status."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huichun66"
        },
        "content": "In addition, each `Request` also stores a `Set` of `Conditions` of the patient. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* can save the Address, Request, HealthWorker Book data in json format and read it back."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Add/Edit/Delete feature"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The `add`, `edit` and `delete` command have been tweaked to include addition of and `Request` and `HealthWorker`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`CommandMode` Enum class was introduced in v1.1 to allow for `add`, `edit`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "and `delete` different types of objects respective to the different"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`CommandMode` Enums. The various `CommandMode` enums are:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `CommandMode.HEALTHWORKER`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `CommandMode.REQUEST`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `CommandMode.INVALID`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Each `CommandMode` enum is matched by it\u0027s own corresponding set of keywords,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " which are string equivalents of the enum counterparts that the user can"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " input to specify the type of object he/she wishes to add. For example:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* The command string `add healthworker n/Dog Terr` that is entered by the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "user contains the keyword `healthworker` after the `add` command word, which"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "is mapped to it\u0027s `CommandMode` equivalent in `AddCommandParser`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `CommandMode` to keyword mappings are as follows:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `CommandMode.HEALTHWORKER` : \u0027healthworker\u0027, \u0027h\u0027, \u00271\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `CommandMode.REQUEST` : \u0027request\u0027, \u0027r\u0027, \u00272\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "These `CommandModes` provide flexbility and functionality to switch between"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " parsing of different `HealthWorker` and `Request` objects."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Each of the `add`, `edit` and `delete` command is eventually parsed through"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " the `AddCommandParser`, `EditCommandParser` and `DeleteCommandParser`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " classes respectively, which returns an `AddCommand`, `EditCommand` and"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `DeleteCommand` object respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Add feature"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `add` command allows for users to register new `HealthWorker` and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Request` objects into HealtHub."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The format for the `add` command is as follows:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`add \u003ckeyword\u003e \u003cparameters\u003e...` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "When the user inputs an `add` command, the `add` command is eventually passed"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " into an `AddCommandParser` object that handles the argument fields after the"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "  `add` keyword in the command."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `AddCommandParser` first checks the first keyword in the string for a valid"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`CommandMode` string equivalent. if the keyword does not contains a valid"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "string representation of any `CommandMode` enum, then a `ParseException` is"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "thrown by the `AddCommandParser`. This initial sequence of steps is also"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "repeated in the following `EditCommandParser` and `DeleteCommandParser` objects."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "After checking for valid keyword, the `AddCommandParser` object checks for"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the following compulsory information, along with regular expressions checking"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " for validity of each field:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a `HealthWorker`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `add healthworker/h/1 \u003cparameters\u003e...` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `name` field prepended by the `n/` prefix. Valid inputs of `name` field"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "will be represented and stored as a `Name` class object."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `name` field can only contain alphanumeric characters, and cannot be an"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "empty string."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `phone` field prepended by the `p/` prefix. Valid inputs of `phone` field"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "will be represented and stored as a `phone` class object."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `phone` contains only 8 numeric digits, of which the first must start with"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " a 6,8 or 9."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `nric` field prepended by the `i/` prefix. Valid inputs of `nric` field will"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "be represented and stored as a `Nric` class object."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `nric` field must contains a 9 character string, starting with either a S"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "or T, followed by 7 numeric digits and a alphabet letter. All letters used"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "must be capitalized"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `organization` field prepended by the `o/` prefix. Valid inputs of"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`organization` field will be represented and stored as a `Organization` class"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "object."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** The `organization` field must contain only alpha numeric characters, and"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "contain at least 2 characters."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `specialisation` field prepended by the `s/` prefix. All valid"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`specialisation` fields will be parsed into it\u0027s respective `Specialisation`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "enum equivalent, collected and stored as a `Set\u003cSpecialisation\u003e` in the"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Skills` class object."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** The values in  the `specialisation` field will be only be accepted if"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "they correspond to specific mappings to an existing `Specialisation` enum that"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "are registered in HealthHub. For information on the valid Specialisation"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "mappings, visit \u003cappendix for Specialisation num\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`AddCommandParser` first checks for the presence of the prefixes for each of"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the compulsory fields mentioned above. If any of them are missing, or if any"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "invalid fields as per the conditions mentioned above, then the"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "command is invalid and a `ParseException` is thrown."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If the keyword denoted maps to `CommandMode.HEALTHWORKER`, then"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`AddCommandParser` constructs a `HealthWorker` object representing the health worker that is"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "just added with the respective `Name`, `Phone`, `Nric`, `Organization` and"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Skills` objects parsed from the user input, and returns an `AddCommand`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "contain the constructed person to be added."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If multiple fields of the same prefix are added, the last value of the last"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "field will be the one accepted for all fields except the `specialisation` field."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon a successful `add` command, the new `HealthWorker` or `Request`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "constructed from the user entered fields will be added to the end of the `UniqueHealthWorkerList`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Valid Specialisations"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The valid `Specialisation` values that can be entered by the user are as"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "mentioned below:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* GENERAL_PRACTICE"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* CARDIOLOGY"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* ENDOCRINOLOGY"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* NEUROLOGY"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* ORTHOPAEDIC"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* PAEDIATRIC"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* GYNAECOLOGY"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* UROLOGY"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* PATHOLOGY"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* HAEMATOLOGY"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* PHYSIOTHERAPY"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* OCCUPATIONAL_THERAPY"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* ANAESTHESIOLOGY"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Edit feature"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `edit` command allows users to modify details of existing `HealthWorker`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "or `Request` objects should the information need to be updated."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The format for the `edit` command is as follows:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`edit \u003ckeyword\u003e \u003cindex\u003e \u003cparameter\u003e [\u003cparameter\u003e]...` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Similar to the `add` command, the `edit` command arguments are first checked"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "passed into the `EditCommandParser` class instance, where it evaluates for a"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "valid first keyword and argument prefixes and values. Additionally, the"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`\u003cindex\u003e` field is also checked against the existing list of `HealthWorker`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "or `Request` to ensure that the provided `\u003cindex\u003e` is a valid `\u003cindex\u003e` in"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the list."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The argument field after the first keyword denoting the specified"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`CommandMode` must not be empty, and must contain at least one valid prefix"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "and a valid value for the respective field to be edited. The prefixes and"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "validity follows the same conditions as stated in the `add` command."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Similar to the `add` command, only the last value will be accepted for fields"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " with the same prefixes."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If any `specialisation` fields are entered, the current `Skills` object of"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the `HealthWorker` object being edited will be entirely replaced by a new"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Set` of `Specialisation` that corresponds to valid `specialisation` fields"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "enteed by the user."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Editing `HealthWorker`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon parsing the argument string into `EditCommandParser`, it first checks"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "that the `\u003cindex\u003e` field provided is non-negative, and not greater than the"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "size of the `UniqueHealthWorkerList`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "After checking for a valid `CommandMode.HEALTHWORKER` keyword after the"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`edit` command word, `EditCommandParser` then tokenizes the argument string"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "after the keyword into a `ArgumentMultiMap` object that stores the prefix to"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "values mapping for each field specified. If no prefixes, or invalid prefixes"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "are specified, or if invalid values for any prefix is input, then"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`EditCommandParser` throws a `ParseException`, and displays an error message"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "to the terminal."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If all values specified are valid and at least one field to specify is"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "provided, the `EditCommandParser` parses the `ArgumentMultiMap` containing"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the values to be updated and it\u0027s respective prefixes into an"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`EditHealthWorkerDescriptor` object. `EditCommandParser` then passes the"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`EditHealthWorkerDescriptor` and the `HealthWorker` object fetched from the"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`HealthWorkerBook` using the specified valid `\u003cindex\u003e` into a"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`EditHealthWorkerCommand` object and returned."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "In the `EditHealthWorkerCommand`, each `HealthWorker` related field prefix is"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "checked for it\u0027s value in `EditHealthWorkerDescriptor`, and if a value"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "exists, it replaces the current value of the corresponding field in the"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`HealthWorker` object. Else, the field in `HealthWorker` is unchanged."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon a successful `edit` command, the `HealthWorker` or `Request` object that"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " has had it\u0027s fields edited will immediately reflect the changes in details on"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "  the GUI."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Delete feature"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Using the `delete` command, the user can remove `HealthWorker` and `Request`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "objects from the system."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The format for the `delete` command is as follows:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`delete \u003ckeyword\u003e \u003cindex\u003e` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `delete` command takes in only two arguments after the `delete` command"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "word: the `\u003ckeyword\u003e` corresponding to the respective `CommandMode` enum, as"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "well as the `\u003cindex\u003e` of the `HealthWorker` or `Request` object to be"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "deleted, as indicated in the `UniqueHealthWorkerList` or `UniqueRequestList`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "displayed in the GUI."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `\u003cindex\u003e` entered by the user is one-based, while it is converted to it\u0027s"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " zero-based format in HealthHub during the deletion process. This ensures"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " that non-technical people who use HealthHub do not need to adjust to"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " zero-based indexing, and can continue using one-based indexing which they"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " are more familiar with."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If the user enters an invalid `\u003cindex\u003e` field, such as a negative index or an"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " index that is greater than the size of the `UniqueHealthWorkerList` or"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `UniqueRequestList`, then a `ParseException` will be thrown, and an error"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " message will be displayed to the user."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon successful `delete` of a valid `HealthWorker` or `Request`, the removed"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "entity will be immediately reflected on the GUI, and be removed from view."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add Request feature"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "The `add request` command allows the `LogicManager` to create a new request and add it to the list of requests. Adding a new request requires the"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "patient\u0027s name, patient\u0027s phone number, patient\u0027s address, patient\u0027s NRIC number and the patient\u0027s conditions. The format of the add request command is"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "add request n/NAME p/PHONE i/NRIC a/ADDRESS dt/DATETIME c/CONDITION."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence shows the sequence when the add command is execute by the LogicManager:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "image::addrequest.png[width\u003d800]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "Figure 3.2.1.1 Sequence Diagram for `add request` command"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram above:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ".  `LogicManager`\u0027s execute is called when the administrator keys in `add request` and it calls upon `parseCommand` of `HealthHubParser` to parse the command"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ".  `HealthHubParser` will initialize `AddCommandParser` and invoke the method `parse` to further parse `request` command"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ".  `parse` will be invoked and passed the parameters of the add command."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ".  If all the arguments of the `add` commands are valid, `AddRequestCommand` will be returned to the `LogicManager`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ".  `LogicManger` will then calls the method `execute` method of `AddRequestCommand`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ".  `AddRequestCommand` will call `addRequest` passing `Request` as an argument to `Model` and after calls `commitRequestBook` method from `Model`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ".  A `CommandResult` will be returned at the end."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure for the list of Requests"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current Approach):** Using a `UniqueRequestList`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: The comparison is not as rigid. You can create requests with similar names/phones as long as it passes a less stringent criteria."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: You need additional overhead. You need to create an extra class and function to check."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Using a `Set`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Do not need an extra function. You can use use `equals` for comparison"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: It is a strict check and as a result you will not be allowed to create requests with same phone/same name etc."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure of `Request`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current Approach):** All parameters in `Request` are abstracted out to have a class of its own (with the exception of the HealthWorker)."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: It adheres to the Single Responsibility Principles (SRP) and the Separation of Concerns (SoC) as each parameter checks whether it is valid"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Many different classes are created which increases the complexity of the code"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Store all parameters of `Request` as `String`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Violates SRP as one single class will need to check if the arguments are valid."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "The `RequestStatus` class within the `Request` object utilises the Java `Enum` to ensure type safety in user inputs."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "The implementation of the `RequestStatus` class is as follows:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    private enum Status {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        PENDING,"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        ONGOING,"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        COMPLETED"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     public RequestStatus(String status) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "         this.requestState \u003d Status.valueOf(status);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "     public RequestStatus() {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "         this(Status.PENDING.name());"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Through this, any user String that is passed in as an argument for the `RequestStatus` field is automatically type checked,"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "ensuring that there are no invalid request statuses entered."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::assignrequest[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assign Request feature"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "The assign request feature allows an administrator to assign a request to a particular healthworker."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows the sequence flow from the `LogicManager` to the `ModelManager` when a user enters a `assign request` command:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "image::assignrequest.png[width\u003d800]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "Figure 3.3.1.1 Sequence diagram to illustrate `Logic` component interactions for `assign request` command."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "image::assignrequest1.png[width\u003d800]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "Figure 3.3.1.2 Sequence diagram to illustrate `Logic` and `Model` component interactions for [blue]`AssignRequestCommand`."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "1. When `LogicManager` receives the `execute` command, it calls the `parseCommand` method in `HealthHubParser`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "2. `HealthHubParser` will receive `assign` as the command and instantiate `AssignRequestCommandParser` to further parse the command."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "3. If the arguments specified in the `assign` command are invalid, a `AssignCommand` will be created and returned back to the `LogicManager`."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "4. `LogicManager` will proceed to call the `execute` command of `AssignCommand`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "5. `AssignRequestCommand` will proceed to call the `getFilteredRequestList` method of `Model`."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "6. Iterate through the `requestIds`, if valid, add the `request` corresponding to that `index` to the set of `Request`."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "7. Writes the updated request to the `RequestBook` in `ModelManager`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `AssignRequestCommand` feature"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* Alternative 1 (current choice): Index-based assigning, where the user assigns a request based on the index number of that list item they see in the UI."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Effecient - since the storage of `HealthWorker` and `Request` are in lists, index-based assigning optimises effeciency, by reducing runtime to O(1) time."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Simple to implement, `Request` and `HealthWorker` details can easily be retrieved from the `filteredRequestList` and `filteredHealthWorkerList` in `ModelManager`."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May not be very user friendly as index-based assigning may not be intuitive. (This has been circumvented by using 1-based indexing, instead of the traditional 0-based indexing)."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* Alternative 2: Assign by making a query using another unique identifier, like the name or NRIC of the patient and healthworker."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Perhaps more user friendly, as the commands are more straightforward to pick up."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Not effecient, as each query would run in O(n + m) time, where n is the number of requests and m is the number of healthworkers."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Although this can be further optimised by using other data structures like a Balanced Binary Search Tree (Java `TreeSet`)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": " (to add while maintaining some ordering), the cost of eventually filtering it to display to the user would still run in O(n + m) time."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Relationship between `Request` and `Healthworker`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* Alternative 1 (current choice): The `Request` holds only some of the details of the healthworker (e.g name) assigned to it."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Simplification of implementation."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Cleaner implementation, low level of dependencies on other modules. This also makes it easier to test, and easier to maintain."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Makes it difficult to obtain all details of a `HealthWorker` from a `Request` object."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* Alternative 2: The `Request` holds a `HealthWorker` object and the `HealthWorker` keeps track of a list of `Request`s."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Can quickly access details of a `HealthWorker` from a `Request`, and can quickly access the `Requests` assigned to a `HealthWorker` from the `Request`."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Increases coupling by adding additional dependencies to the code. This makes the code base more difficult to maintain."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "// end::assignrequest[]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d List Feature"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `list` command allows the user to be able to display all `HealthWorker`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "or `Request` objects stored in the current application."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Listing `HealthWorker` objects"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Format: `list healthworker/h/1`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Displays all `HealthWorker` objects already stored in the current"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "application, and the following details:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `name` - Name of the `HealthWorker`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `nric` - NRIC of the `HealthWorker`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `organization` - Organization of the `HealthWorker`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `skills` - Skills and Specialisations that the `HealthWorker` object"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "possesses"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Listing `Request` objects"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Format: `list request/r/2`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Displays all `Request` objects already stored in the current"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "application, and the following details:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `name` - Name of the patient that made the request in `Request` object."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `address` - Address of the patient"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** `condition` - Condition of the patient that made the request."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Filter Feature"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "With the filter command, users can provide specific parameters that act as"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "conditions for HealthHub to filter the `UniqueHealthWorkerList` and"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`UniqueRequestList` by. Using these parameters, HealthHub displays only the"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`HealthWorker` or `Request` whose fields contains the specified parameters."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Command Format: `filter \u003ckeyword\u003e \u003cprefix\u003e/\u003cparameter\u003e [\u003cprefix\u003e/\u003cparameter\u003e]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "...`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `\u003cprefix\u003e` and `\u003cparameters\u003e` specified in the command descriptions"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "below follow the same valid prefix and parameter formats as the `add`, `edit`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " and `delete` commands"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering `HealthWorker`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The command format for filtering `HealthWorker` is:"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`filter healthworker/h/1 \u003cprefix\u003e/\u003cparameter\u003e [\u003cprefix\u003e/\u003cparameter\u003e]...`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The fields in `HealthWorker` that the user can filter by are:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `name` prepended by `n/` prefix"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `organisation` prepended by the `o/` prefix"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `specialisation` prepend by the `s/` prefix"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If multiple `specialisation` fields are provided, HealthHub will filter the"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`UniqueHealthWorkerList` by displaying `HealthWorker` that contains both"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "specified `specialisations"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "HealthHub filters the respective list of `HealthWorker` and `Request` by"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "checking if the corresponding field contains the specified parameter as a"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "substring. +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "For example entering the command `filter h n/John` displays a list of"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`HealthWorker` whose name equals to John, or contains John as a substring(E.g"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " Johnny, Johnson)."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// tag::filterHealthWorker[]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering `HealthWorker`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `filter` command allows users to display only `HealthWorker` or `Request`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " whose fields matches the `\u003cparameter\u003e` specified in the filter command."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `filter healthworker/h/1 \u003cprefix\u003e/\u003cparameter\u003e [\u003cprefix/\u003cparameter\u003e]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "...`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* The `filter` command checks for `HealthWorker` whose field specific to the"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`\u003cspecific\u003e` contains or matches the `\u003cparameter\u003e` provided."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Example: `filter h n/John` changes the UI to display only `HealthWorker`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "whose name is John, or contains John (Johnny, Johnson, ...)"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon entering the `filter` command, the `filter` command word is stripped from the"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " input and the argument fields are passed into the `FilterCommandParser` class."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The regular expressions for checking the fields for `name`, `organisation`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "and `skills` follows the same format as mentioned in `add` command. If"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "invalid parameters are specified by the user, or if an invalid `keyword` was"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "specified that does not correspond to any `CommandMode` enum, then"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`FilterCommandParser` throws a `ParseException` and displays an error message"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " to the user."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If valid inputs are provided, `FilterCommandParser` tokenizes the argument"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "string without the `keyword` using `ArgumentTokenizer` object, mapping each"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "parameter to it\u0027s respective prefix in an `ArgumentMultiMap` object."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`FilterCommandParser` then creates a `Predicate` object using the parameter"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "values in `ArgumentMultiMap` for each filter condition, and composes them"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "into a single `Predicate` using the `and` function in `Predicate` in"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "conjuction with `stream` and `reduce` methods from Java\u0027s `Function` library."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " The `Predicate` object composed is then passed into"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `FilterHealthWorkerCommand`, which sets the predicate for the `HealthWorker`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "  list in the GUI to display only `HealthWorker` whose fields matches the"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "  `Predicate` set."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "During the implementation of the `filter` command, we decide between two"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "alternative implementations of managing the `Predicates` created from"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "multiple criteria input by the user."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The following table states the considerations for performance as well as"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "future implementations and enhancements to HealthHub that were taken into"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "account:"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// tag::filterHealthWorkerTable[]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"1, 5, 5\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Design | Using a `List` of `Predicate` | Composed `Predicate` using"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `and` method"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "| How it works | Each user input condition will be parsed into `Predicate`,"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "which are stored in an `List`."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Pros*: Easier to manage each single `Predicate` as they are kept separate"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Cons*: Need to rework existing GUI implementation for `filter` as it only"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "uses a single `Predicate` Object |"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Each user input will be parsed into a `Predicate` object, and all the"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Predicate` formed will be composed into a single `Predicate` object."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Pros*: Ease of existing and future implementations as functionality only"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "depends on `Predicate`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Cons*: Unable to specify actions for each `Predicate` |"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Implementation| User inputs are first parsed into `Predicate` equivalents,"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "and then added to an `ArrayList`. `FilterCommandParser` then takes the"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "existing `UniqueHealthWorkerList`, checks for `HealthWorker` whose fields"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "matches the list of `Predicate` using `allMatch` method from the `Predicate`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "library, and then returns an `ObservableList` containing those `HealthWorker`. |"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "User inputs are parsed into `Predicate` equivalents, which are then composed"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "into a single `Predicate` containing the logic of all the composed"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Predicates` using the `and` method from `Predicate` library. The composed"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Predicate` is then set as the filter condition into the existing"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`ObservableList` of `HealthWorker` in the UI component."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// end::filterHealthWorkerTable[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Ultimately, the decision was made to implement the `filter` command by"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "composing the `Predicate` that were formed from the user inputs into a single"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `Predicate` using a combination of Java\u0027s `Function` library methods"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `stream` and `reduce`, as well as the `and` method used in Java\u0027s"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `Predicate` library. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "This is because maintain a `List` of `Predicate` in HealthHub requires an"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "unnecessary rework of many existing components in HealthHub in order to fit"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the new implementation of using a `List`, such as replacing `Predicate` in"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "methods involved with `List\u003cPredicate\u003e`."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "In addition, by returning a single `Predicate` object, ease of implementation"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " of methods in `filter` command, as well as any future or existing"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " enhancements to `filter` reduces the complexity of code as the function"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " needs only to depend on `Predicate` and not `List`, hence observing the Law"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " of Demeter."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// end::filterHealthWorker[]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jing1324"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedBook`."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jing1324"
        },
        "content": "There are two implementations of it. One extending `HealthWorkerBook` and the other extending `RequestBook`."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jing1324"
        },
        "content": "Both contain an undo/redo history, stored internally as an `healthWorkerBookStateList`/`requestBookStateList`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jing1324"
        },
        "content": " and `currentStatePointer`."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* `VersionedBook#commit()` -- Saves the current request/healthworker book state in its history."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* `VersionedBook#undo()` -- Restores the previous request/healthworker book state from its history."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* `VersionedBook#redo()` -- Restores a previously undone request/healthworker book state from its history."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jing1324"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jing1324"
        },
        "content": "and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jing1324"
        },
        "content": "The feature also makes use `ModifyCommandManager` to keep track of the commands that modified the books. It contains"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "jing1324"
        },
        "content": "`currentStatePointer` and a list of `CommandType` enums to differenciate the type of command to undo or redo."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "jing1324"
        },
        "content": "Similar to `CommandMode`, the various `CommandType` enums are:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** `CommandType.HEALTHWORKER_COMMAND`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** `CommandType.REQUEST_COMMAND`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{to be updated}"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// tag::setreminder[]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d Set Reminder Feature"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The `setreminder` command gives the user an option to set a reminder with a customised message."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The reminder is in the form of an `AlertDialog` and is scheduled to show on the UI by a `TimerTask` at time"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "huichun66"
        },
        "content": "`t + current time`. +"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The alert only pop ups when the application is running in the background."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// end::setreminder[]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Get Statistics Feature"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "The `statistics` command gives the user the ability to view the health conditions and their respective number of"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "occurrences shown in the display panel in descending order, as shown in the picture below."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "image::statistics_command_desc.png[]"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "The statistics are stored in a TreeMap data structure, ensuring consistently efficient run time when computing"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "statistics for each individual health condition."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "Since the statistics are only derived from existing requests, if there are no requests for homecare added on HealthHub,"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "an error message will be shown: `Conditions and their related occurrences are not available`, as shown below"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "image::empty_statistics.PNG[]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// tag::autocomplete[]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d Autocomplete Feature for CommandBox"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The UI component, `CommandBox`, comes with a `TextField` component in AB4. For Health Hub, the `TextField` is replaced"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "huichun66"
        },
        "content": "with an `AutoCompleteTextField` class that extends from the parent class, `TextField`."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "huichun66"
        },
        "content": "In the `AutoCompleteTextField` class, it adds an additional listener to the `textProperty()` of `TextField` class, to register for when"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "huichun66"
        },
        "content": "a text input is being sensed and generates the suggestion box in the form of a `ContextMenu` to the user."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The searching of which commands to display to the user as suggestions is by iterating the `suggestions` data structure, which is a `TreeSet`, then checking"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "huichun66"
        },
        "content": "against the user\u0027s input if any of the suggestions starts with the user\u0027s text."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Data structure to store the list of commands"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003cinsert text\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Algorithm to search for commands that fit user\u0027s input"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003cinsert text\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "huichun66"
        },
        "content": "A detailed interaction diagram for the autocomplete behaviour is created previously under \u003cinsert section\u003e."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// end::autocomplete[]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\u003d\u003d\u003d Generation of test files"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jing1324"
        },
        "content": "We use classes located in the `seedu.address.jsonfilegenerator` folder to generate JSON"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jing1324"
        },
        "content": "test files. +"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jing1324"
        },
        "content": "Developers are free to modify the code within the classes to generate healthworker/request"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jing1324"
        },
        "content": "book containing the respective data they need for tests by using the `HealthWorkerBuilder`"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jing1324"
        },
        "content": " and `RequestBuilder` classes +"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jing1324"
        },
        "content": "All test file generator classes contains a main function and hence can be ran independently by compiling the file."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* * *` |user |Check the details of new or unassigned requests|See what requests have yet to be assigned a health worker and what type of request it is"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* * *` |user |Assign a health worker to an existing request|Accept a pending request by assigning a new health worker who has the skillset to fufill the request at the time of the request"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* * *` |user |Complete a request that is currently ongoing|Label the request as completed once the health worker completes his/her task"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* * *` |user |Register a new health worker|"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* * *` |user |delete a healthworker |remove healthworkers that are no longer in our hospital database"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* * *` |user |find a healthworker by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* * *` |user |Check the professional details of existing health workers|Identify which health worker has the appropriate skillsets and certificates to fufill the corresponding requests"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* * *` |user |Register a new request |Key in a new request from a patient with the specific request and patient details"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* *` |user handling many requests at once|Identify the number of requests and their proportion|Immediately see which type of requests have the most demand"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* *` |user |filter requests by type|Perform assignment of staff of tasks of a specific type"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "|`* *` |user |Delete a request|Remove a request that is no longer valid or cancelled"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "(For all use cases below, the *System* is the `HealthHub` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\u003d\u003d\u003d Use case: Add health worker"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "1. User wants to register a new health worker."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** 1.a. User enters the relevant health worker details into the system."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** 2. Application registers the new health worker"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "+"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* Use case ends."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** 3a. The same health worker already exists inside the Application."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "+"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "jing1324"
        },
        "content": "*** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "+"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\u003d\u003d\u003d Use case: Delete health worker"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "1.  User requests to list health workers"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "2.  Application shows a list of health workers"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "jing1324"
        },
        "content": "3.  User requests to delete a specific health worker in the list"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "4.  Application deletes the person"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\u003d\u003d\u003d Use case: Add request"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "1. User wants to register a new request."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** 1.a. User enters the relevant request details into the system."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** 2. Application registers the new request"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "jing1324"
        },
        "content": "+"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jing1324"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** 3a. The same request already exists inside the Application."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "*** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jing1324"
        },
        "content": "+"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "jing1324"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\u003d\u003d\u003d Use case: Assign requests to worker"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "1. User wants to view the list of open requests."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* 1.a. User does not know command for listing requests:"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* 1.a1. User enters the help command to look up the command for listing all requests."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "2. Application displays list of open requests."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "3. User wants to assign a health worker to a request."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* 3.a. No free health worker during the specified time slot for assignment:"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "** 3.a1 Request is left open."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* Use case ends."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* 3.b.No health worker with the necessary skillsets/certifications:"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* 3.b1. Request is left open."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jing1324"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "4. Free health worker that has the necessary certifications and with the closest"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "proximity to the patient address will be assigned to the request."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\u003d\u003d\u003d Use case: Delete requests"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "jing1324"
        },
        "content": "1. User wants to delete a request that is expired or invalid."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* 1.a. Specified request is not in Application"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* Use case ends."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "jing1324"
        },
        "content": "2. Application deletes the specified request."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "jing1324"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* Use case ends."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "-": 758,
      "jing1324": 121,
      "huichun66": 47,
      "Lookuz": 377
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d Health Hub - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": ":icons: font"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W09-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "By: `Team W9-02 (Health Hub)`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Health Hub connects home care patients to qualified health care professionals seamlessly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Health Hub is a desktop application which allows health administrative staff to add, manage and close requests from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "patients. These patients are people who do not require 24-hour round\u0027 the clock medical attention but perhaps some"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "other health care services such as the changing of tubing. +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Health Hub provides a *Graphical User Interface* for administrative staff of health organizations and hospitals to manage requests"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "from all potential home stay patients, and is also *optimized for those who prefer to work with a Command Line Interface* (CLI). +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Want to jump right into using Health Hub? Head over to \u003c\u003cQuick Start\u003e\u003e to"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "install and configure the application, and you\u0027re good to go!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d Notation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Words that are highlighted with a grey background in monospaced font"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "represent a `parameter` or `command` that is present or are to be used in the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* All numbers mentioned with commands begins with the number 1, representing the first item in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Words that are highlighted in white represent a kbd:[keyboard] button that"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "can be pressed to invoke a described function."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Documentation displayed under the this section may be additional useful"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "information regarding HealthHub."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Information under this section denotes shortcuts and alternative commands to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the format of certain functions in HealthHub."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Information under this section highlights potential risks that may happen in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "using a specific feature."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "New to Health Hub? Follow our quick and easy steps below to get started on"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Health Hub in no time!"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Before you start, ensure you have Java version `9` or later installed in your computer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If you do not have Java 9 installed, you may download the latest version of"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the Java Runtime Environment at this link: https://www.oracle.com/technetwork/java/javase/downloads/index.html"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Upon installing the application, click on the `healthhub.jar` file to open up"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " Health Hub. You should be greeted by the following interface:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "image::Ui_home.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* *`list`* : lists all requests"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* **`add`** `3 i/3 n/John Doe p/98765432 a/John street, block 123, #01-01` :"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "adds a patient named `John Doe` to the application."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* **`delete`** `4 n/4` : deletes the 4th request shown by the list command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* *`exit`* : exits the application, saving any changes made to the parameters"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " in the application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for a detailed explanation of each command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d Change Log"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Returning user but not sure what has changed since you left?"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Listed below are the enhancements made to HealthHub, their version"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " releases and the respective improvement made:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d v1.1 Release Notes"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "In this patch, the functionality to register new health workers into the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "application has been implemented. Users may now also add new requests from"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "patients into Health Hub for future assignment using the `assign` command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add healthworker` command: Adds a health worker to the application, for"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "future assignment to open requests in HealtHub. For details on the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add request` command: Registers a new open request into the application."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The open request can then be assigned by the user using the `assign` command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "For more explicit information on the `add` command, visit \u003c\u003cFeatures\u003e\u003e,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "under Adding a Health Worker/Request."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `assign` command: Assigns an open request to an available health worker"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "that is already registered in the system"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d v1.2 Release Notes"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Version 1.2 provides more utility to the application through the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huichun66"
        },
        "content": "implementation of the `edit` and `delete` commands that allow the user to"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "modify and remove requests and health workers from the application."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit healthworker/h/1`: Modifies the details of an existing health staff"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "registered in Health Hub."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit request/r/2`: Modifies the details of existing request records in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " application."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "For more explicit information on the `edit` command, visit \u003c\u003cFeatures\u003e\u003e,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "under Editing a Health Worker/Request."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d v1.3 Release Notes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "With the release of version 1.3, we have set out to improve the already"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "simple and easy to use Health Hub with command shortcuts, as well as `filter`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "command to easily search for staff with the skillset you are looking for."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts*:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add healthworker/h/1`: Adds a health worker to the application."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add request/r/2`: Registers a new request for the hospital management to attend to."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Filtering requests and health workers*:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter healthworker/h/1`: Filters a healthworker by the individual\u0027s name, phone, organisation or"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huichun66"
        },
        "content": "specialisation."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter request/r/2`: Filters a request by the patient\u0027s name, address, or the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "date and time of the request and the status of the request"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Other enhancements made to Health Hub include:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `setreminder` command: Allows the user to set and register reminders in the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " application."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* `undo/redo` command: Undo a previous action or redo everything."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "For more explicit information on the `filter`,`setreminder` and `undo/redo`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "command, visit \u003c\u003cFeatures\u003e\u003e, under Filtering Health Workers/Requests."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d v1.4 Release Notes"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "v1.4 to be released"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// tag::releasenotes-2.0[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d v2.0 Release Notes"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huichun66"
        },
        "content": "After the release of v1.4, the team have planned for future enhancements to Health Hub to improve its existing functionalities,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huichun66"
        },
        "content": "by also considering different aspects such as the ethical part of handling sensititve patient information within and outside of the app."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huichun66"
        },
        "content": "For data management, it will be upgraded to an even higher level of encryption by professional standards to ensure that sensitive"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huichun66"
        },
        "content": "information is handled cautiously to prevent data leaks."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huichun66"
        },
        "content": "For account management, hospital administrative staff will have to start logging in to their accounts (accounts which are given to them when they"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huichun66"
        },
        "content": "first joined the department) in order to use the app. These accounts are created and managed by a higher authority personnel, to add a"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huichun66"
        },
        "content": "second layer of security."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huichun66"
        },
        "content": "So far, with the releases of v1.2 to v1.4, the focus is on registering the requests into the system and assigning them. In v2.0, there will be additional details"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huichun66"
        },
        "content": "added to health workers such as their availability to visit the home care patients, that will add value to when the user is assigning an open request."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Last but not least, it is important that we gather our users\u0027 feedback from time to time to understand their frustrations and needs with the app. As such,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huichun66"
        },
        "content": "there will be a \"Feedback\" option in v2.0 for users to submit their feedback to the developers of Health Hub."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// end::releasenotes-2.0[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The following description of the features and commands are prototypes and specific details and implementation may vary over the course of the project."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*General Command Format*:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `\u003cconditions\u003e` are the parameters to be supplied by the user e.g. in `add n/\u003cname\u003e`, `\u003cname\u003e` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Items in square brackets are optional e.g `n/\u003cname\u003e [c/\u003ccondition\u003e]`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "can be used as `n/John Doe c/Claustrophobia` or as `n/John Doe`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `s/\u003cspecialisation\u003e...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/\u003cname\u003e p/\u003cphone_number\u003e`, `p/\u003cphonenumber\u003e n/\u003cname\u003e` is also acceptable."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Viewing Help : `help`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon first starting the application as a new user, or perhaps a returning"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "user, you may open up the help menu using the `help` command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon entering the `help` command, the help menu renders separately from the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Health Hub main application. Therefore, you do not have to worry about losing"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "any existing work on Health Hub when you are viewing the help menu!"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The help menu displays a list of available commands for Health Hub, their"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "parameters and their functions. Should you ever forget the commands for"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Health Hub, feel free to enter the `help` command to revisit this guide."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// tag::listHealthWorker[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Showing all requests/health workers : `list`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `list` command is a simple and basic command that on entering, displays"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "all health workers/requests in the Health Hub GUI."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `list \u003ctype\u003e`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Showing all health workers"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `list healthworker/h/1`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon entering the command to list health workers, all currently registered"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "health workers in the Health Hub system will be displayed on the list on the"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "right side of the GUI."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// end::listHealthWorker[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d Showing all requests"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `list request/r/2`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "After entering the command to list requests, you should see the list on the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "left side of the GUI being populated with all requests that are added to"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "HealthHub."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "This command may be useful for users to identify existing personnel,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "patients or requests in the system before assigning and closing existing"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "requests for specific health services."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `list healthworker` lists all health workers stored in the system,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "their personal particulars, and their skills in the healthcare field."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `list request` lists all requests stored in the system, as well as the"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "details of the request such as the patient to tend to, the date and time of"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the request and the type of service requested."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// tag::addHealthWorker[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Adding requests/health workers: `add`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Before you can jump right intWo the core feature of our application and"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "streamline the process of adding requests from patients and to assign"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "requests to experts in the medical field, it is essential to first ensure"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "that the respective health staff and patients are registered in the system"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "with all the key information."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Add a request, health worker or patient to the application based on the"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`\u003ctype\u003e` parameter accepted, using the `add` command, to register new health"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "staff, patients and requests. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `add \u003ctype\u003e \u003cadditional_parameters\u003e...` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d *Adding a health worker*"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add healthworker n/\u003cworker_name\u003e i/\u003cNRIC\u003e n/\u003cphone_number\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "o/\u003corganisation\u003e s/\u003cspecialisation\u003e...`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts:*"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add h n/\u003cworker_name\u003e i/\u003cNRIC\u003e n/\u003cphone_number\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "o/\u003corganisation\u003e s/\u003cspecialisation\u003e...` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add 1 n/\u003cworker_name\u003e i/\u003cNRIC\u003e n/\u003cphone_number\u003e o/\u003corganisation\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "s/\u003cspecialisation\u003e...`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Command that registers a new Health Worker person to the current roster."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Health Workers comprises of personnel who are authorized to work in sectors in the"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "healthcare industry in accordance to their `specialisation`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Health Workers authorized for medical practice specific to their"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`specialisation` include doctors, nurses and community health workers that"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "are officially certified by certain medical practices."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Each of the following fields entered by the user following"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "each prefix are compulsory, and must adhere to the following format:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `\u003cworker_name\u003e`: Name must only contain alphanumeric characters and spaces"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ", and cannot be empty. E.g Dog Terr"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `\u003cNRIC\u003e`: NRIC must start with S, T, G or F capitalized, followed by 7"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "numeric characters and a capitalized alphabetical character. E.g S1234567A"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `\u003cphone_number\u003e`: Phone number must only contain 8 numeric characters, and"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " start with a 6, 8 or 9."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `\u003corganisation\u003e`: Organisation that the health worker belongs to."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Organisation name must have at least 2 characters, and only contain"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "alphanumeric characters."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `\u003cspecialisation\u003e`: Specialisation in the medical field that the health"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "worker possesses. The list of valid specialisations are as follows:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** GENERAL_PRACTICE"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** CARDIOLOGY"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** ENDOCRINOLOGY"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** NEUROLOGY"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** ORTHOPAEDIC"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** PAEDIATRIC"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** GYNAECOLOGY"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** UROLOGY"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** PATHOLOGY"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** HAEMATOLOGY"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** PHYSIOTHERAPY"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** OCCUPATIONAL_THERAPY"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** ANAESTHESIOLOGY"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// end::addHealthWorker[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d *Adding a request*"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add request n/\u003cpatient_name\u003e c/\u003ccondition\u003e d/\u003cdate\u003e t/time`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts:*"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add r n/\u003cpatient_name\u003e c/\u003ccondition\u003e d/\u003cdate\u003e t/time`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add 2 n/\u003cpatient_name\u003e c/\u003ccondition\u003e d/\u003cdate\u003e t/time`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Registers a new open request from `patient` of `\u003cpatient_name\u003e` into the"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "application."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Each request also states the `\u003ccondition\u003e` that the patient is"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "experiencing. Administrative staff can then inspect the conditions that are"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "stated by the `patient` and assign the appropriate health worker to handle"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "these requests in the `assign` command."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Format for the time is `HH:mm:ss`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Format for the date is `dd-MM-yyyy`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add 1 n/Dog Terr p/92837710 i/S98817471Z o/NUH s/GENERAL_PRACTICE"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "s/ORTHOPAEDIC`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add request n/Pay Shun c/Heart Attack t/14:00:00 d/05:05:2019`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Editing requests/health workers : `edit`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Sometimes, information on a request of health staff may be keyed in wrongly"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "into the application, or you may need to update existing outdated information."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "To do this, you can replace the current information"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "with the new one using the `edit` command to modify existing personnel"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "records or request descriptions in Health Hub."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The `edit` may come in handy when there is a need update to a request\u0027s"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "status, patient\u0027s condition or a health worker\u0027s skills, based on the"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`\u003ctype\u003e` parameter accepted. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The prefixes and valid values for the `edit` command for both health worker"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "and request modes follow the same format as in the `add` command."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d *Editing a health worker*"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit healthworker \u003cindex\u003e \u003cadditional_parameters\u003e...`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts:*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit h \u003cindex\u003e \u003cadditional_parameters\u003e...`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit 1 \u003cindex\u003e \u003cadditional_parameters\u003e...`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Edits the details of an existing health worker registered in Health Hub, at"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the `\u003cindex\u003e` specified in the health worker list upon entering the `edit"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "healthworker` command with valid inputs."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d *Editing a request*"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit request \u003cindex\u003e \u003cadditional_parameters\u003e...`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts:*"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit r \u003cindex\u003e \u003cadditional_parameters\u003e...`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit 2 \u003cindex\u003e \u003cadditional_parameters\u003e...`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Edits the details of a request registered in Health Hub, at"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the `\u003cindex\u003e` specified in the request list upon entering the `edit"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "request/r/2` command with valid inputs."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon entering the `edit` command with all the necessary and valid paramters,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the corresponding request/health worker at the specified `\u003cindex\u003e`. The index refers to the"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "index number shown in the displayed person list."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Existing values of the health worker or request will be updated to the valid"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "input values based on the prefix specified."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Any changes made to existing fields in requests and healthworkers are"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "immediately reflected in the list shown on the HealthHub GUI."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Notes*:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jing1324"
        },
        "content": "and not greater than the number of requests/health workers/patients in the current list."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Apart from `specialisations` in health workers and `condition` in"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "patients, each field can only have a single value and multiple edit values"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "for other fields will only cause the last one to be accepted."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "When editing specialisations for health workers, the existing specialisations"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " of the person will be removed i.e adding of specialisation is not cumulative."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Each health worker must have at least one specialisation. Entering an empty"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "value for `s/` prefix would result in the original health worker\u0027s `skills`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "being kept."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit healthworker 1 p/91234567 n/John Doe` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Edits the phone number and name of the 1st health worker shown in the health"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "worker list to be `91234567` and `John Doe` respectively. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `edit request 2 n/Betsy Crower` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Edits the patient name of the 2nd request in the request list to be `Betsy"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Crower`. +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// tag::filterHealthWorker[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Filtering health workers/requests: `filter`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "When identifying health workers to assign to an open request, or"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "to look for a particular patient details in certain requests, it may be useful"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " to only display items in a list that match a particular constraint."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Using the `filter` command, you can set the GUI to display health workers and"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "requests whose fields match the `keywords`that are specified in the `filter`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "command, allowing you to find the doctors who are experts in cardiology much quicker. +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `filter \u003ctype\u003e \u003ckeyword\u003e [\u003cmore_keywords\u003e]...` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d *Filter health workers*:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter healthworker \u003ckeyword\u003e [\u003cmore_keywords\u003e]`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts:*"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter h \u003ckeyword\u003e [\u003cmore_keywords\u003e]`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter 1 \u003ckeyword\u003e [\u003cmore_keywords\u003e]`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon entering the command with valid inputs, HealthHub searches the entire list"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " of health"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "workers in Health Hub, and only displays the health workers whose fields"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "contains the parameters specified in the"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`filter` command as a substring."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "For specialisation fields, parameter values need not follow the exact format as"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the valid specialisation values provided under the `add` command section."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Valid parameters may include case insensitive substrings (E.g \u0027physio\u0027 will"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "match to \u0027PHYSIOTHERAPY\u0027."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// end::filterHealthWorker[]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d *Filter requests*:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter request \u003ckeyword\u003e [\u003cmore_keywords\u003e]`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts:*"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter r \u003ckeyword\u003e [\u003cmore_keywords\u003e]`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter 2 \u003ckeyword\u003e [\u003cmore_keywords\u003e]`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "After entering the command with valid inputs, searches the entire list of"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "requests in Health Hub, and only displays the requests whose fields matches"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " the parameters specified in the"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`filter` command."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "where `\u003cmore_keywords\u003e` represents the fields and parameters that can be used to"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "identify requests or personnel, using the same prefixes as in `add`, `edit` and"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`delete` commands. Some examples of keywords are shown below."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Notes*:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* The search is *case insensitive* for all fields (e.g"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`hans` will match `Hans`), and the *order of the keywords* does not matter(e.g"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Hans Bo` will match `Bo Hans`)."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Search using partial words will return all results with fields containing"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "that substring. (e.g `filter 1 n/Tan` may return people with the surnames Tan or"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Tang)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// tag::filterExample[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Multiple conditions for filtering health workers and requests can be added"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "simultaneously for more expressive search. Note that if multiple parameters"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "are specified, HealthHub displays healthworkers or requests that match *all*"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the criteria mentioned."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`filter r n/\u003cname\u003e p/\u003cphone\u003e`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "filters the request list for requests whose patient\u0027s name contains the"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "specified name substring *and* the specified phone number."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "To revert the view back to the original health worker/request list, enter the"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`list healthworker` or `list request` command respectively."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter h s/GENERAL_PRACTICE s/GYNAECOLOGY` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Returns all health workers whose field of expertise include general practice"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*and* gynaecology."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// end::filterExample[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter request n/alice` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all patients whose name contains \"alice\"."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter r p/9177` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all requests with contacts numbers that have \"9177\" in it\u0027s field."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter 2 dt/30-01-2019 10:00:00` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all requests scheduled on 30th Jan 2019, at 10 am sharp."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// tag::delHealthWorker[]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Deleting requests/health workers : `delete`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Should there be any invalid or expired request, health worker or patient in"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the application, you may also remove them to prevent cluttering of"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "unnecessary data by using the `delete` command to remove them from the"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "application based on the`\u003ctype\u003e` parameter accepted, according to the"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "index of the respective `type`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "shown using the `list` command, or the index displayed on the GUI. +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `delete \u003ctype\u003e \u003cindex\u003e` +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete a health worker*:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `delete healthworker \u003cindex\u003e`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts:*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `delete h \u003cindex\u003e`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `delete 1 \u003cindex\u003e`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Deletes the health worker at the `\u003cindex\u003e` position in shown in the health"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "worker list."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// end::delHealthWorker[]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete a request*:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `delete request \u003cindex\u003e`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Shortcuts:*"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `delete r \u003cindex\u003e`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `delete 2 \u003cindex\u003e`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Deletes the request at the `\u003cindex\u003e` position in shown in the list of requests."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Notes*:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Deletes the corresponding request/health worker/patient at the specified `\u003cindex\u003e`."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* The index refers to the index number shown in the displayed request/health"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "worker/patient list using the `list` command, or displayed through the GUI."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ... and not greater"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jing1324"
        },
        "content": "than the number of requests/health workers/patients in the current list."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `delete healthworker 2` +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Deletes the 2nd health worker registered in the list of healthworkers in"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Health Hub."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `delete request 1` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Deletes the 1st request as shown in the list of requests on the GUI of the"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "application"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Accidentally deleted the wrong health worker or request? Don\u0027t worry, the"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "deletion can be undone using the `undo` command as long as the application is"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " still running."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "To undo the most recent `delete` command entered by entering the `undo`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "command immediately after the previous `delete` command to undo the deletion."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Assigning health workers to an open request : `assign`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "After registering a new request using the `add request/r/2` command, you may"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "proceed to assign an existing health worker in the system to handle the request,"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " allocating medical resources to it and closing the request using the simple"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `assign` command +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `assign \u003crequest_index\u003e \u003chealth_worker_index\u003e`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Where the `\u003crequest_index\u003e` and `\u003chealth_worker_index\u003e` are as shown in the"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "respective health worker and requests lists in the Health Hub GUI."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Notes*:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jing1324"
        },
        "content": "* The `request_index` and `health_worker_index` fields *must be a positive integer* 1, 2, 3, ... and not greater"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jing1324"
        },
        "content": "than the number of requests/health workers in the current list."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Health worker that is assigned must be available at the current time stated by the request."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Health worker must have the necessary skillset and certifications that allow him to be able to take up the corresponding request."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `assign 1 2` +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Assigns the health worker at the second index to the first request in the"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "request list."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "You cannot assign a healthworker to a completed request. To assign a healthworker to a request that is already completed,"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "use `edit` to change the status of the request to pending first."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing Requests : `clr`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "After closing all existing requests, you also have the option of clearing all"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " requests from the request list, regardless of the state of the request, upon"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "  entering the `clr` command."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clr`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Clearing requests would delete all records of completed requests."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "If you would like to delete just one particular request, consider using the"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`delete` command instead."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Closing Requests : `complete`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "After an assigned task has been completed by the assigned health staff, who"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "has administered the necessary medical treatment, you can mark the request as"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " closed, using the `complete` command."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `complete \u003crequest_index\u003e`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Upon entering the `complete` command, you should notice the status of the"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "request at position `\u003crequest_index\u003e` changed to `COMPLETED`, marking the"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "request closed."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Notes*:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "* The `request_index` *must be a positive integer* 1, 2, 3, ... and not greater"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "than the number of requests in the current list."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* `complete 1` +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Marks the first request in the list as completed."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Listing previous commands : `history`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "In the case where you have been using the application for a while now, and"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "wish to track and see the past commands that you have entered into the"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "application, or where you have taken over the application from another"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "person, you can do so using the `history` command. +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Using the `history` command, you can view the previous commands entered in"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the application in chronological order, allowing you to identify the order in"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " which commands are keyed in previously."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Format: `history` +"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Viewing a request : `sr`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "With the flexibility in managing and adding, editing and deleting requests,"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "existing functionality for the user to view the details of requests in"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Health Hub has also been implemented to improve the user experience."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Format: `sr \u003crequest_index\u003e`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Entering the `sr` command allows the application to select the request at the"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " specified `\u003crequest_index\u003e`, and displays the full details of the selected"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " request on the GUI."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Users also have the option of clicking on a request in the request list on"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the GUI, which automatically selects the clicked request as the displayed"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "request."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// tag::setreminder[]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Setting Reminder Alerts: `setreminder`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Sometimes, it can be difficult to keep track of multiple tasks and specific"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "details for different requests. In addition to the already expressive"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "function of keying in the description of a request upon registering, the"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`setreminder` command now also allows you to set customised reminder alerts"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "to aid you so that you do not have to cram a large amount of details in memory."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Format: `setreminder t/\u003chh:mm:ss\u003e m/\u003ccustomised_message\u003e` +"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Using the `setreminder` command, you can set a reminder alert to notify you at a certain time"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "huichun66"
        },
        "content": "of the day, with your own message that you can customise to remind youself. The alert only shows"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "huichun66"
        },
        "content": "for when Health Hub is running in the background process."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "huichun66"
        },
        "content": "In the example below, a reminder has been set to notify the user at 1.30PM with"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the customised message to \"to call patient John Doe for his appointment\"."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "huichun66"
        },
        "content": "image::reminder_command.png[]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// end::setreminder[]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting health condition statistics: `statistics`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "It is imperative for you to know which health conditions have been seeing an increasing trend, as well as take note of"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "those which have been experiencing a decline. The `statistics` command allows you to view all health conditions that"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "have been registered on HealthHub, and also their respective numbers of occurrences."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `statistics`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "The following image is what you will see when you type in the statistics command."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "image::statistics_command.png[]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see, based on the requests already registered in the request panel on the left, the statistics command shows"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "that the health condition Physiotherapy has showed up twice, whereas both Diabetes and AIDS have showed up once each."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "Upon collating such data, you can feedback and make suggestions to the hospital to increase or decrease training in"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "certain departments. Furthermore, you can even use this data as a basis for the health sector to ramp up efforts in its"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Work Skills Qualification certification for certain healthcare skills to be taught to new aspiring healthcare"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "professionals."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Once you are done using the application, you can exit the application by"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "entering the `exit` command, hereby saving any information at the current"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "point in time before shutting down. +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "All application data are saved in the hard disk automatically after exiting"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "the application, removing the need to save manually. +"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Changes to the data in the application are also saved that any command that"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "modifies application parameters, making sure that minimal data is lost should"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "any unforeseen circumstances happen."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "huichun66"
        },
        "content": "*A*: Install the app in another computer, and transfer the data files `healthworkerbook.json` and `requestbook.json`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "huichun66"
        },
        "content": "to the `\\data` folder of the app directory."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "huichun66"
        },
        "content": "[%header, cols\u003d2*]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|Command"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`help`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|opens the user guide"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`list`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|lists all the requests or health workers"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`add healthworker/h/1`"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|registers a health worker into the system"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`add request/r/2`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|registers a request into the system"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`edit`"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|edits the details of a request or a health worker"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`filter`"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|filters the list of requests or health workers by a condition"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`delete`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|deletes a request or a health worker"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`assign`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|assigns a health worker to a request"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`clr`"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|clears all requests from the list"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`complete`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|closes a pending or ongoing request after it has been done"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`history`"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|lists the previous commands entered"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`sr`"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|selects a request and view its details on the UI"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`setreminder`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|sets a reminder alert to notify the user at a certain time"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`statistics`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|shows the occurences of the different requests by conditions"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`undo`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|undos the previous action"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|`redo`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|redos everything"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "huichun66"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "huichun66"
        },
        "content": "// end::summary[]"
      }
    ],
    "authorContributionMap": {
      "-": 173,
      "jing1324": 7,
      "Lookuz": 549,
      "huichun66": 91
    }
  },
  {
    "path": "docs/team/brohandev.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d Rohan Dev - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d Project: Health Hub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brohandev"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brohandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brohandev"
        },
        "content": "Hello there! I am Rohan Dev, a Year 2 Computer Science undergraduate from the National University of Singapore (NUS). This portfolio documents the contributions I have made to Project HealthHub over the course of 1 semester. HealthHub has exposed me and my team to making contributions to a pre-existing code base and morphing it into a desktop application of our choice. I have picked up many relevant skills and software engineering principles en route to completing this project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brohandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Health Hub is a desktop application designed for hospital administrative staff. With many people requiring Intermediate and Long-Term Care (ILTC) services, there is a growing need"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "for health care professionals to tend to these people. Yet, the current messy system requires a lot of manual work from the admin\u0027s perspective. Health Hub aims to eradicate all of these."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brohandev"
        },
        "content": "* *Major enhancement*: Adding the *ability to view the most common health conditions* amongst patients registered on HealthHub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brohandev"
        },
        "content": "** What it does: allows the administrative staff to call for the frequencies of all health conditions registered on HealthHub. It can also call the frequency of a specific health condition."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brohandev"
        },
        "content": "** Justification: It is imperative for the health administrators to know which health conditions have been seeing an increasing trend, as well as take note of those which have been experiencing a decline. Upon collating such data, the administrative staff can feedback and make suggestions to the hospital to increase or decrease training in certain departments. The staff can even suggest to the government to ramp up efforts in its Work Skills Qualification certification for certain healthcare skills to be taught to new aspiring healthcare professionals."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brohandev"
        },
        "content": "** Highlights: The statistics feature needs to be able to ensure that the administrative staff can extract relevant information as fast as possible. Therefore, the TreeMap data structure was used to contain all occurrences of health conditions on HealthHub for the best overall performance for speed. Calling the statistics command will display a formatted list of all health conditions registered and its related frequencies in descending order. Calling the statistics command specific to a particular condition will likewise display the number of occurrences of that health condition."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brohandev"
        },
        "content": "* *Minor enhancement*: Incorporated a patient’s set of health conditions into requests for home care."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brohandev"
        },
        "content": "** What it does: When adding a request for home care in HealthHub, instead of merely typing in 1 health condition per request, the administrative staff can now add in a set of all health conditions the particular patient may suffer from."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brohandev"
        },
        "content": "** Justification: Health practitioners, before attempting treatment on any patient, would want to know all health conditions the particular patient might be suffering from. There have been plenty of cases in the past where the administered treatment by the health care professional on a patient had triggered other health conditions in the patient, which the healthcare professionals were completely unaware of. Therefore, instead of just adding a request for a particular treatment, administrators can add a request with multiple health conditions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brohandev"
        },
        "content": "** Highlights: When the administrator adds a request for home care on the HealthHub platform, it takes in all the patient’s particulars (name, NRIC, phone number, home address) and a set of health conditions the patient suffers from. I made use of the hashset data structure to contain the set of health conditions inside it for each patient. The set of conditions guarantees no duplicate health condition being found inside and it can also speedily access any specific health condition the administrative staff may be looking for or may be interested in for further investigation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brohandev"
        },
        "content": "*** Setup codacy and coveralls badges for the team on GitHub:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brohandev"
        },
        "content": "*** Wrote Conditions class based off Tag class from Address Book 4, and incorporated additional functionality for it to accept more than just 1 string input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brohandev"
        },
        "content": "*** Wrote tests for Condition class and condition-related features in Request class, including various test utility classes to assist other team members in their testing (Pull requests #105, #110)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "brohandev": 15,
      "-": 55,
      "huichun66": 9
    }
  },
  {
    "path": "docs/team/daviddl9.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d David Livingston - Project Portfolio for HealthHub"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "I am a software developer and second year computer science student at the National University of Singapore. I am really passionate about developing technology that can make the world a better place. This portfolio page documents my contributions to one of the most meaningful projects I\u0027ve worked for - HealthHub."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d Project: Health Hub"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d About the project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "image::Healthhub.png[width\u003d800]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "HealthHub is a https://en.wikipedia.org/wiki/Command-line_interface[command-line] desktop application built by my team and I, for our Software Engineering project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose to morph it to a home-care patient management system, because of our passion in the health care industry. This enhanced application allows Hospital Administrators and senior management to create, assign and organise patient records seamlessly. HealhHub also organises staff information and manages statistics to assist in the Hospital\u0027s planning and allocation of resources."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "My role was to design and implement the [blue]`Request` related commands and features. This included designing the relevant encapsulation within a [blue]`Request` created by the user and creating the following commands from scratch: `add`, `edit`, `list`, `delete`, `clear`, `assign`, `complete` and `filter`. The following sections illustrate these enhancements in more detail, as well as the relevant sections that I have added to the user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`add` A grey highlight (called a mark-up) indicates that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "[blue]`Request` Blue text with a grey highlight indicates a component, class or object in the architecture of the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: Created `add`, `edit`, `delete`, `list`, `clear` commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: Lays the foundation to any `Request` based functionality. Allows the user to organise the requests made by the patients seamlessly."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: These enhancements provide necessary features to the admin so that the admin can create, edit or delete requests at any point of time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects the existing existing classes, like the [blue]`Healthworker` class. It required an in-depth analysis of design alternatives. The implementation was also challenging as it required changes to existing commands and classes, during the integration-testing phase."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: Utilised the JACKSon library that serializes a [blue]`Request` object into JSON format for storage. This allows the user\u0027s state to be saved at all times."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: Created `assign` and `complete` request commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: Allows the admin to assign Healthworkers to requests, and complete any ongoing requests."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: These features are necessary for the product, and allows the administrator manage all patient requests by assigning the relevant healthworker with the appropriate skill sets."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: Creation of these features required thorough understanding of how the existing details of the [blue]`Logic` and [blue]`Model` components,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "as knowledge of how information is cached in the application\u0027s memory was essential to allow for rapid assigning. Implemented index-based assigning, which improved effeciency"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " by 30% (each `assign` request command runs in O(1) time)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a filter command that allows the user to navigate through all requests stored by filtering by a specific value."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*** Added reposense compatibility"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*** Added coveralls compatibility to project README"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d *Filter requests*:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `filter request/r/2 \u003ckeyword\u003e [\u003cmore_keywords\u003e]`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After entering the command with valid inputs, searches the entire list of"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "requests in Health Hub, and only displays the requests whose fields matches"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": " the parameters specified in the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "`filter` command. To filter requests, the user can specify any of the following filtering criteria:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "`dt/DATE`, `n/NAME`, `p/PHONE`, `st/STATUS`, `i/NRIC`, `c/CONDITION`. Note that you can chain multiple criteria together to get a more specific"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "filter result."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "For example, let\u0027s say you want to filter all the requests made by the patient with `NRIC` S9123456G that have been *completed*. You"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "can simply enter the command: `filter request i/S9123456A st/COMPLETED`, and the request list panel to the left of the screen would update to"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "show you all the requests you are looking for."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Before:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "image::Healthhub.png[width\u003d800]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Figure 5.5.2.1 shows the application prior to executing the `filter request` command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "After:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image::filterResult.png[width\u003d800]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Figure 5.5.2.2 shows the application after executing `filter request i/S9123456A st/COMPLETED`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The request list panel on the left would filter to show just the requests queried by the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "If there are no such requests that match the user\u0027s query, an empty list would be show on the left panel."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "where `\u003cmore_keywords\u003e` represents the fields and parameters that can be used to"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "identify requests or personnel, using the same prefixes as in `add`, `edit` and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "`delete` commands. Some examples of keywords are shown below."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "*Notes*:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is *case insensitive* for all fields apart from specialisation(e.g"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "`hans` will match `Hans`), and the *order of the keywords* does not matter(e.g"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "`Hans Bo` will match `Bo Hans`)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* Search using partial words will return all results with fields containing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "that subword. (e.g `filter 1 n/Tan` may return people with the surnames Tan or"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Tang)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Note that you can query all requests between a specific range, by specifying the the date range"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "which you want to query. For example, to filter all requests between 1st Jan 2019 and 1st June 2019 (exclusive), you can run the following command:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "`filter request dt/01-01-2019 00:00:00 dt/02-06-2019 00:00:00`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Multiple conditions for filtering health workers and requests can be added"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "simultaneously for more expressive search."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "`filter r n/\u003cname\u003e p/\u003cphone\u003e`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "filters the request list for requests whose patient\u0027s name contains the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "specified name substring *and* the specified phone number."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "To revert the view back to the original health worker/request list, enter the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "`list healthworker` or `list request` command respectively."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* `filter h s/GENERAL_PRACTICE s/GYNAECOLOGY` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all health workers whose field of expertise include general practice"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "or gynaecology."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `filter request n/alice` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all patients whose name contains \"alice\"."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* `filter r p/9177` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all requests with contacts numbers that have \"9177\" in it\u0027s field."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `filter 2 dt/30-01-2019 10:00:00` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all requests scheduled on 30th Jan 2019, at 10 am sharp."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assign Request feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The assign request feature allows an administrator to assign a request to a particular healthworker."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows the sequence flow from the `LogicManager` to the `ModelManager` when a user enters a `assign request` command:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::assignrequest.png[width\u003d800]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Figure 3.3.1.1 Sequence diagram to illustrate `Logic` component interactions for `assign request` command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image::assignrequest1.png[width\u003d800]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Figure 3.3.1.2 Sequence diagram to illustrate `Logic` and `Model` component interactions for [blue]`AssignRequestCommand`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. When `LogicManager` receives the `execute` command, it calls the `parseCommand` method in `RequestBookParser`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "2. `RequestBookParser` will receive `assign` as the command and instantiate `AssignRequestCommandParser` to further parse the command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "3. If the arguments specified in the `assign` command are invalid, a `AssignCommand` will be created and returned back to the `LogicManager`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "4. `LogicManager` will proceed to call the `execute` command of `AssignCommand`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "5. `AssignRequestCommand` will proceed to call the `getFilteredRequestList` method of `Model`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "6. Iterate through the `requestIds`, if valid, add the `request` corresponding to that `index` to the set of `Request`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "7. Writes the updated request to the `RequestBook` in `ModelManager`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Relationship between `Request` and `Healthworker`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Alternative 1 (current choice): The `Request` holds only some of the details of the healthworker (e.g name) assigned to it."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Simplification of implementation."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Cleaner implementation, low level of dependencies on other modules. This also makes it easier to test, and easier to maintain."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Makes it difficult to obtain all details of a healthworker from a `Request` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Alternative 2: The `Request` holds a `HealthWorker` object and the `HealthWorker` keeps track of a list of `Request`s."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Can quickly access details of a `HealthWorker` from a `Request`, and can quickly access the `Requests` assigned to a `HealthWorker` from the `Request`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Increases complexity of code base, adding additional dependencies to the code. This makes the code base more verbose and less maintainable"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add Request feature"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The `add request` command allows the `LogicManager` to create a new request and add it to the list of requests. Adding a new request requires the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "patient\u0027s name, patient\u0027s phone number, patient\u0027s address, patient\u0027s NRIC number and the patient\u0027s conditions. The format of the add request command is"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "add request n/NAME p/PHONE i/NRIC a/ADDRESS dt/DATETIME c/CONDITION."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence shows the sequence when the add command is execute by the LogicManager:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::addrequest.png[width\u003d800]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Figure 3.2.1.1 Sequence Diagram for `add request` command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram above:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".  `LogicManager`\u0027s execute is called when the administrator keys in `add request` and it calls upon `parseCommand` of `HealthHubParser` to parse the command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".  `HealthHubParser` will initialize `AddCommandParser` and invoke the method `parse` to further parse `request` command"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".  `parse` will be invoked and passed the parameters of the add command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".  If all the arguments of the `add` commands are valid, `AddRequestCommand` will be returned to the `LogicManager`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".  `LogicManger` will then calls the method `execute` method of `AddRequestCommand`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".  `AddRequestCommand` will call `addRequest` passing `Request` as an argument to `Model` and after calls `commitRequestBook` method from `Model`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".  A `CommandResult` will be returned at the end."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure for the list of Requests"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current Approach):** Using a `UniqueRequestList`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: The comparison is not as rigid. You can create requests with similar names/phones as long as it passes a less stringent criteria."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: You need additional overhead. You need to create an extra class and function to check."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Using a `Set`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Do not need an extra function. You can use use `equals` for comparison"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: It is a strict check and as a result you will not be allowed to create requests with same phone/same name etc."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure of `Request`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current Approach):** All parameters in `Request` are abstracted out to have a class of its own (with the exception of the HealthWorker)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: It adheres to the Single Responsibility Principles (SRP) and the Separation of Concerns (SoC) as each parameter checks whether it is valid"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Many different classes are created which increases the complexity of the code"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Store all parameters of `Request` as `String`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Violates SRP as one single class will need to check if the arguments are valid."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `RequestStatus` class within the `Request` object utilises the Java `Enum` to ensure type safety in user inputs."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The implementation of the `RequestStatus` class is as follows:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private enum Status {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        PENDING,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        ONGOING,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        COMPLETED"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     public RequestStatus(String status) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         this.requestState \u003d Status.valueOf(status);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     public RequestStatus() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "         this(Status.PENDING.name());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Through this, any user String that is passed in as an argument for the `RequestStatus` field is automatically type checked,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "ensuring that there are no invalid request statuses entered."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dassignrequest]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 257,
      "huichun66": 2
    }
  },
  {
    "path": "docs/team/huichun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d Tay Hui Chun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d Project: Health Hub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "My team and I were tasked with enhancing a basic command line interface addressbook application for one of our modules CS2103"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "- Software Engineering. We have decided to morph it into an application that handles request-patient tasks such as the registering"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "of new requests, patients and health workers. The primary purpose of this app is for the hospital administrative staff to register"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "new requests on the system, and assign suitable health workers to the patients under the requests. As such, details such as the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "patient\u0027s conditions are also recorded within the system, and vice versa for the skillset of the qualified health workers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "My role in the team was to handle the User Interface (UI) programming and render the desired display to the user who will be using the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "app. My role involves a little bit of User Experience (UX) when writing code to structure the design of the different UI components"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "that are interacting with one another. Other than writing code, I also wrote tests in the form of component, integration and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "system tests that will test for different user behaviors when they are using the app. In addition, I extended the text input from the app"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "to introduce an autocomplete feature for the users to easily select from the list of suggested commands, as well the `setreminder`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "feature that will also relieve some of the work that the user has to do (such as remembering to contact the patients)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* Restructured most of the `.fxml` files associated with the UI components"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* Wrote code to render the model data into the different UI components"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* Wrote my own version of stylesheet to use for the app"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* Handle logic for displaying a request\u0027s details in the `InfoPanel`, which is the center panel of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* Extended the normal textfield to an additional autocomplete functionality."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* Added a `setreminder` command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* *Major Enhancement 1*: restructured the original AB4 UI code into different code that will suit the context of our app (Health Hub) ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "** What it does: Shows the lists of requests and health workers in two different panels. The app has a center panel to render the selection display of a request."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "** Justification: This is important as it is the interface that the user will be interacting with. Important details such as a patient\u0027s name and NRIC are displayed differently"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "compared to the other details such as address. Special noteworthy details such as the conditions of a patient or the skills of a health worker are also displayed differently."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "** Highlights: In addition to rendering the model data, the details of a request is displayed in the center panel of the app, accompanied with a map that will show the location of the patient\u0027s home."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "** Credits: Myself, but integrated a UI library called `font-awesome` in the app itself to render the display of icons related to request details. The static map is from `gothere.sg`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* *Major Enhancement 2*: added the ability for the user to select from a list of suggested commands, which is also known as an autocomplete feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "** What it does: Shows a list of suggestions based on the character that the user has typed in the text input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "** Justification: This is important as new users might be lost as to what type of commands they can use. By having an autocomplete feature, they spend shorter time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "rewriting the same commands (e.g. adding 10 requests)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "** Highlights: The autocomplete feature, although useful, has caused some non-deterministic type behavior for the user. E.g. sometimes the text box does not register a key `DOWN` event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "** Credits: Myself, but had read some tutorials online on how to do it."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* *Minor Enhancement*: added a `setreminder` command to further enhance the app\u0027s capability, by reminding the user of a task he or she needs to do within the day."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* *Code Contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "* *Other Contributions*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreleasenotes-2.0]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsetreminder]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsummary]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dui-header]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsetreminder]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dautocomplete]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d Project: PowerPointLabs"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "huichun66": 47
    }
  },
  {
    "path": "docs/team/jing1324.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d Jin Jing - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d Project: Health Hub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "Health Hub is a desktop application designed for hospital administrative staff. With many people requiring Intermediate and Long-Term Care (ILTC) services, there is a growing need"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "for health care professionals to tend to these people. Yet, the current messy system requires a lot of manual work from the admin\u0027s perspective. Health Hub aims to eradicate all of these."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "huichun66": 9
    }
  },
  {
    "path": "docs/team/lookuz.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d Choong Wey Yeh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003d\u003d Project: Health Hub"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "In light of the overwhelming workload of hospital administration teams due"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "to rising need for more and better healthcare services, we at"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "team W09-2 have designed and developed a desktop application that aims to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "improve the hectic workload of hospital administrative staff by providing a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "simple and efficient solution for managing requests for healthcare services"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "from home-stay patients: *HealthHub*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "HealthHub is a desktop application built in Java and JavaFX that supports"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "both a Command Line Interface(CLI) and a Graphical User Interface(GUI),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "providing the user with the flexbility to choose the mode of use that he or"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "she prefers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "As a member of the team tasked with the development of HealthHub, my role was"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "to design the command logic structure for parsing commands and inputs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "entered by the user, as well as implementing the logic for commands"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "involving `HealthWorker` which represents the details of medical experts"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "register in HealthHub."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d Notation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Words used that are highlighted in grey represents an existing `Class` or"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`Object` that is implemented in HealthHub. E.g `HealthWorker` denotes the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "object used to describe the details representing a registered medical expert."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Documentation under this section denotes any additional information used to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "supplement existing description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d Contributions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Over the course of the development phase, I was tasked with the development"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "of `HealthWorker` related features in HealthHub, such as the basic Create,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Read, Update and Delete(CRUD) functionality. The enhancements and features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "that I have contributed to HealthHub are:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Creation of the `HealthWorker` representation model for describing a"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "people working in the medical profession, in HealthHub."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `add`, `edit` and `delete` commands for registering `HealthWorker` into"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "HealthHub."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Designing and implementing the architecture for `CommandParser` to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "provide flexibility for the development of other commands, as well as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "streamline the performance of user input parsing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* `filter` command for `HealthWorker` objects, utilizing a combination of"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "optimized data structures and methods from Java\u0027s `Predicate` and `Function`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "library."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Major Enhancements"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* I reworked the `CommandParser` classes in HealthHub to facilitate the parsing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " of inputs for commands involving both `HealthWorker` and `Request` objects."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** The original implementation of `CommandParser` class in AddressBook4 only"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "facilitated the adding of a `Person` class object into the system. As"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "HealthHub stored multiple different types of objects such as `HealthWorker`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "and `Request`, I had to rework the existing implementation of `CommandParser`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " in AddressBook4 to cater to the needs of our application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** I created the `CommandMode` class for use in the new release for"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`CommandParser` class, and overhauled the implementation to use `CommandMode`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " to identify the specific type of object being handled, as well as to place"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " restrictions on unvalidated user inputs during commands. My contribution to"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " HealthHub via the `CommandParser` class paved the way for other teammates to"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " use the new revised `CommandParser` class for the development of their features"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "  as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Added the functionality to filter `HealthWorker` objects in the HealthHub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "system using various fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** In some of the user stories prior to the development of HealthHub, many"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "potential users greatly favored the capability to be able to search for"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "specific types of requests or medical workers, thus speeding up their search."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** To facilitate the ease of finding and assigning `HealthWorker` in HealthHub,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "I implemented the ability to filter the existing list of"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "`HealthWorker`. As a result, Users are able to reduce their search for the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "most appropriate health staff for assignment to requests to a shorter list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "based on filter conditions they input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "** A significant difficulty that was faced when implementing this feature, is"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " the ability to combine multiple conditions of user inputs. The following"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " considerations and possible solutions for this problem are as follows:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfilterHealthWorkerTable]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Weighing both the pros and cons of both design considerations, I decided to"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " go with composing multiple `Predicates` into a single `Predicate` by using"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " the functional programming paradigm through Java\u0027s `Predicate` and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " `Function` libraries. This is because doing so increases the ease of"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " implementation for future enhancements to HealthHub with the increased"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " flexibility, and also future implementations are less tightly coupled as"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " they only need to depend on `Predicate` and not `List`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003d\u003d\u003d Other Contributions"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Minor Enhancements*:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Adjusted the implementation for `FilterCommandParser`, `ListCommandParser`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "and `DeleteCommandParser` implemented by my teammates to for a more seamless"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " integration of the `filter`, `list` and `delete` commands into HealthHub."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Wrote incremental integration tests for existing features in HealthHub, as"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "well as features implemented by my teammates to ensure that the logic and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "model components in HealthHub are integrated together smoothly without hiccups."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Design*:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Proposed the layout and structure of the implementation of the current"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "Graphical User Interface(GUI) of HealthHub."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Project Management*:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Proposed the architecture design of the current implementation for the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "command logic side of HealthHub."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Delegated features and roles to various team members for their"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "contributions to HealthHub."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Documentation*:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Created the base skeleton and layout for the HealthHub User Guide"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "documentation."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Contributed to the descriptions of each feature by reviewing the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "explanation of features in the User Guide, and overhauling it to be more"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "informative and audience-focused."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Provided the notation and structure for my team to follow when documenting"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "our changes and contributions made to HealthHub in the User Guide."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Provided easy navigation through the User Guide by adding links to various"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "sections both at the start and at the summary."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Community*:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Reviewed PRs of fellow teammates, and gave suggestions on certain code"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "snippets"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*Tools*:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "* Set up the continuous integration plugins TravisCI for the team repository"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "for HealthHub."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "*  Set up auto-publishing of documentation for HealthHub for the team"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "repository."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "As my team and I morphed the original implementation of AddressBook4 to"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "HealthHub, we have also extensively updated the User Guide to allow for users"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " to better understand what HealthHub aims to achieve, and how it does so."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "The following sections details my contribution to the User Guide up til"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "HealthHub version release v1.4."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddHealthWorker]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfilterHealthWorker]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "huichun66": 3,
      "Lookuz": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.storage.HealthWorkerBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.storage.JsonHealthWorkerBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.storage.JsonRequestBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.storage.RequestBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Health Hub ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        RequestBookStorage requestBookStorage \u003d new JsonRequestBookStorage(userPrefs.getRequestBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorkerBookStorage healthWorkerBookStorage \u003d new JsonHealthWorkerBookStorage("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                userPrefs.getHealthWorkerBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage, requestBookStorage,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                healthWorkerBookStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * The data from the sample address book will be used instead if"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * {@code storage}\u0027s address book is not found, or an empty address book will be"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Optional\u003cReadOnlyHealthWorkerBook\u003e healthWorkerBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Optional\u003cReadOnlyRequestBook\u003e requestBookOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        ReadOnlyHealthWorkerBook initialHealthWorkerBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        ReadOnlyRequestBook initialRequestBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            healthWorkerBookOptional \u003d storage.readHealthWorkerBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            requestBookOptional \u003d storage.readRequestBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!requestBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                logger.info(\"RequestBook file not found. Will be starting with sample RequestBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            if (!healthWorkerBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                logger.info(\"HealthWorkerBook file not found. Will be starting with a sample HealthWorkerBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            initialRequestBook \u003d requestBookOptional.orElseGet(SampleDataUtil::getSampleRequestBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            initialHealthWorkerBook \u003d healthWorkerBookOptional.orElseGet(SampleDataUtil::getSampleHealthWorkerBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with empty books\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            initialHealthWorkerBook \u003d new HealthWorkerBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            initialRequestBook \u003d new RequestBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with empty books\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            initialHealthWorkerBook \u003d new HealthWorkerBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initialRequestBook \u003d new RequestBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return new ModelManager(initialHealthWorkerBook, initialRequestBook, userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // Update config file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * file path, or a new {@code UserPrefs} with default configuration if errors"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * occur when reading from the file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty books\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        logger.info(\"Starting Health Hub \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Health Hub ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 163,
      "jing1324": 41,
      "Lookuz": 8,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Commands.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Container for all commonly used commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class Commands {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String ADD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String ADD_HEALTH_WORKER \u003d \"add healthworker n/Judy Hopps i/S8974421C p/98765432 \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            + \"o/SGH s/GENERAL_PRACTICE s/ORTHOPAEDIC\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String ADD_HEALTH_WORKER_MODE \u003d \"add 1 n/Judy Hopps i/S8974421C p/98765432 \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            + \"o/SGH s/GENERAL_PRACTICE s/ORTHOPAEDIC\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String ADD_REQUEST \u003d \"add request n/John Doe i/S8974421C p/98765432 \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            + \"a/123 Brick Road, #01-01 dt/01-01-2019 14:50:00 c/Diabetic c/Physiotherapy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String ADD_REQUEST_MODE \u003d \"add 2 n/John Doe i/S8974421C p/98765432 \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            + \"a/123 Brick Road, #01-01 dt/01-01-2019 14:50:00 c/Diabetic c/Physiotherapy\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String EDIT_HEALTH_WORKER \u003d \"edit healthworker n/Judy Hopps\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String EDIT_HEALTH_WORKER_MODE \u003d \"edit 1 n/Judy Hopps\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String EDIT_REQUEST \u003d \"edit request n/John Doe\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String EDIT_REQUEST_MODE \u003d \"edit 2 n/John Doe\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String LIST_ALL_HEALTHWORKER \u003d \"list healthworker\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String LIST_ALL_HEALTHWORKER_MODE \u003d \"list 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String LIST_ALL_REQUEST \u003d \"list request\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String LIST_ALL_REQUEST_MODE \u003d \"list 2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String ASSIGN \u003d \"assign\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String ASSIGN_REQUEST \u003d \"assign hw/1 r/2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String COMPLETE \u003d \"complete\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String FILTER \u003d \"filter\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String FIND_REQUEST \u003d \"frequest\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String SELECT \u003d \"select\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String CLEAR \u003d \"clr\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String HISTORY \u003d \"history\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String STATISTICS \u003d \"statistics\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String SET_REMINDER \u003d \"setreminder\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String SET_REMINDER_FULL \u003d \"setreminder t/05:00 m/call patient John Doe for his appointment\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String REDO \u003d \"redo\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static List\u003cString\u003e getAllCommands() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return Arrays.asList(ADD, ADD_HEALTH_WORKER, ADD_HEALTH_WORKER_MODE, ADD_REQUEST, ADD_REQUEST_MODE, EDIT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                EDIT_HEALTH_WORKER, EDIT_HEALTH_WORKER_MODE, EDIT_REQUEST, EDIT_REQUEST_MODE, LIST,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                LIST_ALL_HEALTHWORKER, LIST_ALL_HEALTHWORKER_MODE, LIST_ALL_REQUEST, LIST_ALL_REQUEST_MODE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                ASSIGN, ASSIGN_REQUEST, COMPLETE, FILTER, FIND_REQUEST, SELECT, DELETE, CLEAR, HISTORY, STATISTICS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                SET_REMINDER, SET_REMINDER_FULL, UNDO, REDO, HELP, EXIT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n\\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_HEALTHWORKER_LISTED_OVERVIEW \u003d \"%1$d health workers listed\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX \u003d \"The request index \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_HEALTHWORKER_DISPLAYED_INDEX \u003d \"The healthworker \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"index provided is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_REQUESTS_LISTED_OVERVIEW \u003d \"%1$d requests listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_REQUEST_COMMAND_FORMAT \u003d \"Invalid request command \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"format! \\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_REQUEST_ONGOING_CANNOT_CLEAR \u003d \"There is at least one \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"ongoing request in the list, request list cannot be cleared.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_REQUEST_COMPLETED_CANNOT_ASSIGN \u003d \"Completed request \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"cannot be assigned. To make changes to a completed request, use edit instead.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "huichun66": 1,
      "Lookuz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "Lookuz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @see seedu.address.model.Model#getRequestBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    ReadOnlyRequestBook getRequestBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @see seedu.address.model.Model#getHealthWorkerBook()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    ReadOnlyHealthWorkerBook getHealthWorkerBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of health workers */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    ObservableList\u003cHealthWorker\u003e getFilteredHealthWorkerList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of requests */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    ObservableList\u003cRequest\u003e getFilteredRequestList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns the user prefs\u0027request book file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    Path getRequestBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns the user prefs\u0027 health worker book file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    Path getHealthWorkerBookFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Selected health worker in the filtered health worker list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * null if no health worker is selected."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    ReadOnlyProperty\u003cHealthWorker\u003e selectedHealthWorkerProperty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Selected request in the filtered request list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * null if no request is selected."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    ReadOnlyProperty\u003cRequest\u003e selectedRequestProperty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Sets the selected health worker in the filtered health worker list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    void setSelectedHealthWorker(HealthWorker worker);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Sets the selected request in the filtered request list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    void setSelectedRequest(Request request);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "huichun66": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.HealthHubParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final HealthHubParser healthHubParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean requestBookModified;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean healthWorkerBookModified;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthHubParser \u003d new HealthHubParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getRequestBook().addListener(observable -\u003e requestBookModified \u003d true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getHealthWorkerBook().addListener(observable -\u003e healthWorkerBookModified \u003d true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        logger.info(\"-----------------[USER COMMAND][\" + commandText + \"]-------------------\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        requestBookModified \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        healthWorkerBookModified \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d healthHubParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (requestBookModified) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Request book modified, saving to file.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveRequestBook(model.getRequestBook());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (healthWorkerBookModified) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Health worker book modified, saving to file.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveHealthWorkerBook(model.getHealthWorkerBook());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public ReadOnlyRequestBook getRequestBook() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return model.getRequestBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public ReadOnlyHealthWorkerBook getHealthWorkerBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return model.getHealthWorkerBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public ObservableList\u003cRequest\u003e getFilteredRequestList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return model.getFilteredRequestList(); }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public ObservableList\u003cHealthWorker\u003e getFilteredHealthWorkerList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return model.getFilteredHealthWorkerList(); }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public Path getRequestBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return model.getRequestBookFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public Path getHealthWorkerBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return model.getHealthWorkerBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public ReadOnlyProperty\u003cRequest\u003e selectedRequestProperty() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return model.selectedRequestProperty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public ReadOnlyProperty\u003cHealthWorker\u003e selectedHealthWorkerProperty() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return model.selectedHealthWorkerProperty(); }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void setSelectedRequest(Request request) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        model.setSelectedRequest(request);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void setSelectedHealthWorker(HealthWorker worker) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        model.setSelectedHealthWorker(worker);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "jing1324": 6,
      "huichun66": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Abstract class representing a command to add objects to the addressbook."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"The different modes for registering a new item are as follows:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public abstract void add(Model model, Object toAdd); // method for adding the respective object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Lookuz": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddHealthWorkerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Adds a HealthWorker to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class AddHealthWorkerCommand extends AddCommand implements HealthWorkerCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_OPTION"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \": Add a health worker to the address book. Parameters:\" + ADD_COMMAND_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + ADD_COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New health worker added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final HealthWorker toAdd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public AddHealthWorkerCommand(HealthWorker toAdd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (model.hasHealthWorker(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new CommandException(DUPLICATE_HEALTH_WORKER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        add(model, toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void add(Model model, Object toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.addHealthWorker((HealthWorker) toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //model.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        commitHealthWorkerBook(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return (other \u003d\u003d this) || (other instanceof AddHealthWorkerCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 (this.toAdd.equals(((AddHealthWorkerCommand) other).toAdd)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 2,
      "Lookuz": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        model.commitAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Abstract class representing command to delete objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public DeleteCommand(Index index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method to delete object from Model."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param model Model to remove the object from."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param toDelete Object to be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public abstract void delete(Model model, Object toDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "Lookuz": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteHealthWorkerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Deletes a HealthWorker from the addressbook based on the index specified."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class DeleteHealthWorkerCommand extends DeleteCommand implements HealthWorkerCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \": Deletes the health worker identified by the index number used in the displayed health worker list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_DELETE_HEALTHWORKER_SUCCESS \u003d \"Deleted Health Worker: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public DeleteHealthWorkerCommand(Index index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void delete(Model model, Object toDelete) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.deleteHealthWorker((HealthWorker) toDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        commitHealthWorkerBook(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //model.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cHealthWorker\u003e lastShownList \u003d model.getFilteredHealthWorkerList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker toDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        delete(model, toDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_HEALTHWORKER_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!(other instanceof DeleteHealthWorkerCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.index.equals(((DeleteHealthWorkerCommand) other).index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 2,
      "Lookuz": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Abstract class that represents to edit objects in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"The different modes for editing an existing item are as follows:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected EditCommand(Index index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // abstract method to edit an object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public abstract void edit(Model model, Object toEdit, Object edited);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Lookuz": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditHealthWorkerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Edits the details of an existing HealthWorker object in the addressbook."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class EditHealthWorkerCommand extends EditCommand implements HealthWorkerCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_EDIT_HEALTHWORKER_SUCCESS \u003d \"Edited Health Worker: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d EditCommand.COMMAND_WORD + \" \" + COMMAND_OPTION + \": \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Edits the details health worker at the specified index number used in the displayed HealthWorker list \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \" + EDIT_COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Example: \" + EditCommand.COMMAND_WORD + \": \" + EDIT_COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final EditHealthWorkerDescriptor editHealthWorkerDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerCommand(Index index, EditHealthWorkerDescriptor editHealthWorkerDescriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(editHealthWorkerDescriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.editHealthWorkerDescriptor \u003d new EditHealthWorkerDescriptor(editHealthWorkerDescriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void edit(Model model, Object toEdit, Object edited) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.setHealthWorker((HealthWorker) toEdit, (HealthWorker) edited);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.updateFilteredHealthWorkerList(Model.PREDICATE_SHOW_ALL_HEALTHWORKERS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //model.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        commitHealthWorkerBook(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cHealthWorker\u003e lastShownList \u003d model.getFilteredHealthWorkerList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker toEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker edited \u003d createEditedHealthWorker(toEdit, editHealthWorkerDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!toEdit.isSameHealthWorker(edited) \u0026\u0026 model.hasHealthWorker(edited)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new CommandException(DUPLICATE_HEALTH_WORKER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        edit(model, toEdit, edited);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_HEALTHWORKER_SUCCESS, edited));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Creates and returns a {@code HealthWorker} with the details of {@code toEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * edited with {@code editHealthWorkerDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static HealthWorker createEditedHealthWorker(HealthWorker toEdit,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                                                         EditHealthWorkerDescriptor editHealthWorkerDescriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assert toEdit !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Name updatedName \u003d editHealthWorkerDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Nric updatedNric \u003d editHealthWorkerDescriptor.getNric().orElse(toEdit.getNric());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Phone updatedPhone \u003d editHealthWorkerDescriptor.getPhone().orElse(toEdit.getPhone());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Organization updatedOrganization \u003d editHealthWorkerDescriptor.getOrganization()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .orElse(toEdit.getOrganization());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills updatedSkills \u003d editHealthWorkerDescriptor.getSkills().orElse(toEdit.getSkills());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new HealthWorker(updatedName, updatedNric, updatedPhone, updatedOrganization, updatedSkills);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!(other instanceof EditHealthWorkerCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand e \u003d (EditHealthWorkerCommand) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editHealthWorkerDescriptor.equals(e.editHealthWorkerDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Stores the details to edit the HealthWorker with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * corresponding field value of the HealthWorker."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static class EditHealthWorkerDescriptor {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        protected Name name;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        protected Nric nric;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        protected Phone phone;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        private Organization organization;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        private Skills skills;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public EditHealthWorkerDescriptor() {}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public EditHealthWorkerDescriptor(EditHealthWorkerDescriptor toCopy) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            this.organization \u003d toCopy.organization;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            this.skills \u003d toCopy.skills;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, nric, phone, organization, skills);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setOrganization(Organization organization) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            this.organization \u003d organization;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public Optional\u003cOrganization\u003e getOrganization() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return Optional.ofNullable(this.organization);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setSkills(Skills skills) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            this.skills \u003d skills;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public Optional\u003cSkills\u003e getSkills() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return Optional.ofNullable(this.skills);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            if (!(other instanceof EditHealthWorkerDescriptor)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            EditHealthWorkerDescriptor e \u003d (EditHealthWorkerDescriptor) other;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    \u0026\u0026 getOrganization().equals(e.getOrganization())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    \u0026\u0026 getSkills().equals(e.getSkills());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 39,
      "Lookuz": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Abstract class that represents a class with functionality to filter by a given predicate."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public abstract class FilterCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_MESSAGE_FORMAT \u003d \"Filter command must contain at least 1 parameter.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method that filters a given list using the given predicate p."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected abstract void filter(Model model, Collection\u003cPredicate\u003e predicates);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterHealthWorkerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class FilterHealthWorkerCommand extends FilterCommand implements HealthWorkerCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_OPTION + \": \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Parameters used to filter the current list of health workers by.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Parameters: PARAMETER [MORE_PARAMETERS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_OPTION + \" n/John\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final List\u003cPredicate\u003e predicateList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public FilterHealthWorkerCommand(Collection\u003cPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.predicateList \u003d new ArrayList\u003c\u003e(predicates);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filter(model, predicateList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_HEALTHWORKER_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                model.getFilteredHealthWorkerList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                || (other instanceof FilterHealthWorkerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 predicateList.equals(((FilterHealthWorkerCommand) other).predicateList)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected void filter(Model model, Collection\u003cPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e predicate \u003d reducePredicates(predicates);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.updateFilteredHealthWorkerList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method that reduces a collection of predicates in to a single predicate that fulfils all the predicates."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static Predicate\u003cHealthWorker\u003e reducePredicates(Collection\u003cPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return predicates.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HealthWorkerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Interface that represents a Command object involving a HealthWorker"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * TODO: add abstract methods involving HealthWorkerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public interface HealthWorkerCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String COMMAND_OPTION \u003d \"healthworker/h/1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String ADD_COMMAND_PARAMETERS \u003d PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_ORGANIZATION + \"ORGANIZATION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_SKILLS + \"SPECIALISATION...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String ADD_COMMAND_EXAMPLE \u003d PREFIX_NAME + \"Dog Terr \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_NRIC + \"S1234567A\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_ORGANIZATION + \"NUH \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_SKILLS + Specialisation.PHYSIOTHERAPY + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + Specialisation.GENERAL_PRACTICE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String EDIT_COMMAND_PARAMETERS \u003d \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"[\" + PREFIX_ORGANIZATION + \"ORGANIZATION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"[\" + PREFIX_SKILLS + \"SPECIALISATION]...\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String EDIT_COMMAND_EXAMPLE \u003d PREFIX_NAME + \"Pay Shun \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_PHONE + \"88884444\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String DUPLICATE_HEALTH_WORKER \u003d \"This health worker \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    default void commitHealthWorkerBook(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.commit(CommandType.HEALTHWORKER_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 6,
      "Lookuz": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from oldest to recent):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.RequestCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Abstract class describing a command that involves listing objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"The different modes for the list command are as follows:\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + COMMAND_WORD + \" \" + RequestCommand.COMMAND_OPTION + \": \" + \"Lists all existing requests.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + COMMAND_WORD + \" \" + HealthWorkerCommand.COMMAND_OPTION + \": \" + \"Lists all existing health workers\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Lookuz": 5,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.ListRequestCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.parser.CommandMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Parses the different modes for the list command and returns the respective list command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public ListCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        CommandMode commandMode \u003d ArgumentTokenizer.checkMode(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (commandMode \u003d\u003d CommandMode.HEALTH_WORKER) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return new ListHealthWorkerCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        } else if (commandMode \u003d\u003d CommandMode.REQUEST) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return new ListRequestCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 26,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListHealthWorkerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_HEALTHWORKERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class ListHealthWorkerCommand extends ListCommand implements HealthWorkerCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all health workers\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.updateFilteredHealthWorkerList(PREDICATE_SHOW_ALL_HEALTHWORKERS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return obj \u003d\u003d this || obj instanceof ListHealthWorkerCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_HEALTHWORKERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REQUESTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!model.canRedo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.redo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.updateFilteredHealthWorkerList(PREDICATE_SHOW_ALL_HEALTHWORKERS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.updateFilteredRequestList(PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "jing1324": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Selects a request identified using it\u0027s displayed index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \": Selects the request identified by the index number used in the displayed requestA list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_SELECT_SUCCESS \u003d \"Selected Request: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cRequest\u003e filteredRequestList \u003d model.getFilteredRequestList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredRequestList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.setSelectedRequest(filteredRequestList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "Lookuz": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetReminderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.ui.InfoPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Sets a reminder to go off after adding hh:mm to current time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class SetReminderCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setreminder\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String INVALID_TIME_FORMAT \u003d \"Reminder should only be in t/\u003chh:mm\u003e m/\u003cmessage\u003e format, with \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            + \"time consisting of only digits.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            + \": Sets a reminder to go off after adding hh:mm to the current time. \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            + \"Reminder only goes off during this session state. It will disappear after exiting the app. \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" t/05:00 m/call patient Akshay for his request appointment.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String MESSAGE_REMINDER_SUCCESS \u003d \"Set reminder to alert at: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final SimpleDateFormat DISPLAY_FORMATTER \u003d new SimpleDateFormat(\"dd MMMM YYYY, hh:mm:ss a\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final SimpleDateFormat FORMATTER \u003d new SimpleDateFormat(\"hh:mm:ss\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Timer timer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public SetReminderCommand(String time, String message) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Date duration \u003d FORMATTER.parse(time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Calendar c1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Calendar c2 \u003d dateToCalendar(duration);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Calendar cTotal \u003d (Calendar) c1.clone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            cTotal.add(Calendar.HOUR_OF_DAY, c2.get(Calendar.HOUR_OF_DAY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            cTotal.add(Calendar.MINUTE, c2.get(Calendar.MINUTE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            cTotal.add(Calendar.SECOND, c2.get(Calendar.SECOND));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            //System.out.println(\"Action scheduled to perform at: \" + DISPLAY_FORMATTER.format(cTotal.getTime()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        Alert reminderAlert \u003d new Alert(Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        reminderAlert.setTitle(\"Reminder Alert\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        reminderAlert.setHeaderText(\"Health Hub Reminder Alert\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        reminderAlert.setContentText(\"This is an alert dialog to remind you to \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                            + message);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        DialogPane dialogPane \u003d reminderAlert.getDialogPane();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        dialogPane.getStylesheets().add(InfoPanel.STYLESHEET.toExternalForm());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        dialogPane.getStyleClass().add(\"alertDialog\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        Toolkit.getDefaultToolkit().beep();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        reminderAlert.showAndWait();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }, cTotal.getTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REMINDER_SUCCESS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    DISPLAY_FORMATTER.format(cTotal.getTime())));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } catch (ParseException parseException) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new CommandException(\"An unexpected error occurred!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Converts a {@code Date} object to a {@code Calendar} instance"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Reference: https://www.mkyong.com/java/java-convert-date-to-calendar-example/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @param date to be converted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @return a Calendar instance"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static Calendar dateToCalendar(Date date) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                || (other instanceof SetReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u0026\u0026 time.equals(((SetReminderCommand) other).time)); // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_HEALTHWORKERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REQUESTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!model.canUndo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.updateFilteredHealthWorkerList(PREDICATE_SHOW_ALL_HEALTHWORKERS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.updateFilteredRequestList(PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "jing1324": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/AddRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Statistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a new request to the request book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class AddRequestCommand extends AddCommand implements RequestCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        + \": Creates a new request in the request book.\\n\" + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        + ADD_COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_OPTION + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        + ADD_COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Created new request successfully: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Request newRequest;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddRequestCommand(Request newRequest) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newRequest);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newRequest \u003d newRequest;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasRequest(this.newRequest)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REQUEST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addRequest(newRequest);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //model.commitRequestBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        commitRequestBook(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Statistics.updateStatistics(newRequest.getConditions());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newRequest));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Model model, Object toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addRequest((Request) toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitRequestBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddRequestCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 newRequest.isSameRequest(((AddRequestCommand) other).newRequest));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "jing1324": 2,
      "Lookuz": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/AssignRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEALTHWORKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REQUEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Assigns multiple requests to a HealthWorker with two way association."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class AssignRequestCommand extends Command implements RequestCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Assigned request %1$s successfully to healthworker %2$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assign requests to healthworker. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_HEALTHWORKER + \"HEALTHWORKER_ID \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_REQUEST + \"REQUEST_ID \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_HEALTHWORKER + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_REQUEST + \"1 \" + PREFIX_REQUEST + \"3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index healthworkerId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cIndex\u003e requestIds;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an assign request command to assign requests to a {@code HealthWorker}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AssignRequestCommand(Index healthworkerId, Set\u003cIndex\u003e requestIds) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(healthworkerId, requestIds);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthworkerId \u003d healthworkerId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestIds \u003d requestIds;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cHealthWorker\u003e lastShownHealthworkerList \u003d model.getFilteredHealthWorkerList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRequest\u003e lastShownRequestList \u003d model.getFilteredRequestList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cRequest\u003e requestsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (healthworkerId.getZeroBased() \u003e\u003d lastShownHealthworkerList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_HEALTHWORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker healthWorkerToAssign \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            lastShownHealthworkerList.get(healthworkerId.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Index i : requestIds) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            if (i.getZeroBased() \u003e\u003d lastShownRequestList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Request request \u003d lastShownRequestList.get(i.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (request.isCompleted()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_REQUEST_COMPLETED_CANNOT_ASSIGN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            requestsToAdd.add(request);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker assignedHealthWorker \u003d new HealthWorker(healthWorkerToAssign);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Request request : requestsToAdd) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Request updatedRequest \u003d new Request(request);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            updatedRequest.setHealthWorker(assignedHealthWorker);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateRequest(request, updatedRequest);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRequestList(Model.PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //model.commitRequestBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        commitRequestBook(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\", \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Index i : requestIds) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            sj.add(Integer.toString(i.getOneBased()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sj.toString(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assignedHealthWorker));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AssignRequestCommand"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 healthworkerId.equals(((AssignRequestCommand) other).healthworkerId)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 requestIds.equals(((AssignRequestCommand) other).requestIds));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "jing1324": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/ClearRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class ClearRequestCommand extends Command implements RequestCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clr\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Request book has been cleared!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Request request : model.getRequestBook().getRequestList()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (request.isOngoingStatus()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_REQUEST_ONGOING_CANNOT_CLEAR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new RequestBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Statistics.clearStatistics();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //model.commitRequestBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        commitRequestBook(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "jing1324": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/CompleteRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Marks a request as COMPLETED."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class CompleteRequestCommand extends Command implements RequestCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"complete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \": Marks an request as COMPLETED \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_COMPLETED_REQUEST_SUCCESS \u003d \"Request %1$s have been completed.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ONGOING_REQUEST \u003d \"Only ONGOING status can be marked as completed.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CompleteRequestCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRequest\u003e lastShownList \u003d model.getFilteredRequestList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Request requestToBeCompleted \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!requestToBeCompleted.getRequestStatus().equals(new RequestStatus(\"ONGOING\"))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_ONGOING_REQUEST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requestToBeCompleted.complete();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateRequest(requestToBeCompleted, requestToBeCompleted);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRequestList(Model.PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitRequestBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COMPLETED_REQUEST_SUCCESS, requestToBeCompleted));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof CompleteRequestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((CompleteRequestCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "jing1324": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/DeleteRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a request identified using it\u0027s displayed index from the request book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class DeleteRequestCommand extends DeleteCommand implements RequestCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the request identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"by the index number used in the displayed request list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REQUEST_SUCCESS \u003d \"Deleted Request: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteRequestCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete(Model model, Object toDelete) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteRequest((Request) toDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //model.commitRequestBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        commitRequestBook(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRequest\u003e lastShownList \u003d model.getFilteredRequestList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Request requestToDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cCondition\u003e conditionSetToDelete \u003d requestToDelete.getConditions();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Statistics.deleteStatistics(conditionSetToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        delete(model, requestToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REQUEST_SUCCESS, requestToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this || (other instanceof DeleteRequestCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 index.equals(((DeleteRequestCommand) other).index));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "jing1324": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/EditRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits an order in the request book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class EditRequestCommand extends EditCommand implements RequestCommand {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_OPTION"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        + \": Edits the details of the order identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"by the index number used in the displayed request book. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        + EDIT_COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_OPTION"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        + EDIT_COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_REQUEST_SUCCESS \u003d \"Edited Request: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditRequestDescriptor editRequestDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the request in the filtered request list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editRequestDescriptor details to edit the request with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestCommand(Index index, EditRequestDescriptor editRequestDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(editRequestDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editRequestDescriptor \u003d new EditRequestDescriptor(editRequestDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Request} with the details of {@code requestToEdit}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editRequestDescriptor}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static Request createEditedRequest(Request requestToEdit, EditRequestDescriptor editRequestDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assert requestToEdit !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Name updatedName \u003d editRequestDescriptor.getName().orElse(requestToEdit.getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Phone updatedPhone \u003d editRequestDescriptor.getPhone().orElse(requestToEdit.getPhone());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Address updatedAddress \u003d editRequestDescriptor.getAddress().orElse(requestToEdit.getAddress());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        RequestDate updatedRequestDate \u003d editRequestDescriptor.getDate().orElse(requestToEdit.getRequestDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric updatedNric \u003d editRequestDescriptor.getNric().orElse(requestToEdit.getNric());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        RequestStatus updatedRequestStatus \u003d requestToEdit.getRequestStatus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cCondition\u003e updatedConditions \u003d editRequestDescriptor.getConditions().orElse(requestToEdit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .getConditions());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String updatedHealthWorker;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (requestToEdit.getHealthStaff() !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            updatedHealthWorker \u003d requestToEdit.getHealthStaff();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            updatedHealthWorker \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (updatedHealthWorker \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Request(updatedName, updatedNric, updatedPhone, updatedAddress,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                updatedRequestDate, updatedConditions, updatedRequestStatus);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Request(updatedName, updatedNric, updatedPhone, updatedAddress,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                updatedRequestDate, updatedConditions, updatedRequestStatus, updatedHealthWorker);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, history);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRequest\u003e lastShownList \u003d model.getFilteredRequestList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Request requestToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Request editedRequest \u003d createEditedRequest(requestToEdit, editRequestDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!requestToEdit.isSameRequest(editedRequest) \u0026\u0026 model.hasRequest(editedRequest)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REQUEST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        edit(model, requestToEdit, editedRequest);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_REQUEST_SUCCESS, editedRequest));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // List\u003cRequest\u003e lastShownList \u003d model.getF()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void edit(Model model, Object toEdit, Object edited) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.setRequest((Request) toEdit, (Request) edited);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.updateFilteredRequestList(Model.PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //model.commitRequestBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        commitRequestBook(model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditRequestCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditRequestCommand e \u003d (EditRequestCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editRequestDescriptor.equals(((EditRequestCommand) other)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            .editRequestDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the request with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the order."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditRequestDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private RequestDate requestDate;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cCondition\u003e conditions;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        private String healthWorker;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditRequestDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code request} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditRequestDescriptor(EditRequestDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setDate(toCopy.requestDate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setConditions(toCopy.conditions);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            setHealthWorker(toCopy.healthWorker);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, nric, phone, address, requestDate, conditions);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cRequestDate\u003e getDate() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(requestDate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDate(RequestDate requestDate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.requestDate \u003d requestDate;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public Optional\u003cString\u003e getHealthWorker() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return Optional.ofNullable(healthWorker);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setHealthWorker(String healthWorker) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            this.healthWorker \u003d healthWorker;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable condition set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code conditions} is null"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cCondition\u003e\u003e getConditions() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return (conditions !\u003d null) ? Optional.of(Collections.unmodifiableSet(conditions))"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code conditions} to this object\u0027s {@code conditions}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code conditions} is used internally."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setConditions(Set\u003cCondition\u003e conditions) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            this.conditions \u003d (conditions !\u003d null) ? new HashSet\u003c\u003e(conditions) : null;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditRequestDescriptor)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            EditRequestDescriptor editRequestDescriptor \u003d (EditRequestDescriptor) other;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(editRequestDescriptor.getName())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(editRequestDescriptor.getPhone())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getNric().equals(editRequestDescriptor.getNric())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(editRequestDescriptor.getAddress())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getDate().equals(editRequestDescriptor.getDate())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 getConditions().equals(editRequestDescriptor.getConditions())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 getHealthWorker().equals(editRequestDescriptor.getHealthWorker());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 225,
      "jing1324": 2,
      "Lookuz": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/FilterRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all requests in request book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class FilterRequestCommand extends FilterCommand implements RequestCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_OPTION + \": Finds all requests \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        + \"whose names contain any of the specified keywords (case-sensitive) and displays them as a \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"list with index numbers. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_OPTION + \" n/alice n/bob n/charlie\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Predicate\u003cRequest\u003e predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public FilterRequestCommand(Predicate\u003cRequest\u003e predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filter(model, Arrays.asList(predicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_REQUESTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            model.getFilteredRequestList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected void filter(Model model, Collection\u003cPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            || (other instanceof FilterRequestCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \u0026\u0026 predicate.equals(((FilterRequestCommand) other).predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "Lookuz": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/ListRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all requests in the request book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class ListRequestCommand extends ListCommand implements RequestCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all requests\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lr\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRequestList(Model.PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return obj \u003d\u003d this || obj instanceof ListRequestCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "Lookuz": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/request/RequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Interface that represents a command involving a request"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public interface RequestCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    String COMMAND_OPTION \u003d \"request\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String ADD_COMMAND_PARAMETERS \u003d PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_DATE + \"DATETIME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_CONDITION + \"CONDITION...\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String ADD_COMMAND_EXAMPLE \u003d PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_PHONE + \"81234567 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NRIC + \"S9123456A\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_ADDRESS + \"123, Sengkang Ave 3, #04-12, 214632 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_DATE + \"01-01-2019 08:00:00 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_CONDITION + \"Physiotherapy\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String EDIT_COMMAND_PARAMETERS \u003d \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"[\" + PREFIX_CONDITION + \"CONDITION]...\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String EDIT_COMMAND_EXAMPLE \u003d PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_CONDITION + \"Physiotherapy \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + PREFIX_CONDITION + \"Dialysis\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    String MESSAGE_DUPLICATE_REQUEST \u003d \"This request already exists in the \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"request book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    default void commitRequestBook(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.commit(CommandType.REQUEST_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "jing1324": 6,
      "Lookuz": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.AddHealthWorkerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.AddRequestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Parses input arguments and creates a new AddPersonCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_COMMAND_USAGE \u003d AddCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + AddHealthWorkerCommand.MESSAGE_USAGE + \"\\n\\n\" + AddRequestCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String PREAMBLE_WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * and returns an AddPersonCommand object for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        CommandMode commandMode \u003d ArgumentTokenizer.checkMode(args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (commandMode \u003d\u003d CommandMode.HEALTH_WORKER) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return parseAddHealthWorker(PREAMBLE_WHITESPACE + ArgumentTokenizer.trimMode(args));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        AddHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (commandMode \u003d\u003d CommandMode.REQUEST) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return parseAddRequest(PREAMBLE_WHITESPACE + ArgumentTokenizer.trimMode(args));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        AddRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, INVALID_COMMAND_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRequestCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddReqeustCommand object for execution."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddRequestCommand parseAddRequest(String args) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            PREFIX_NAME, PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_DATE, PREFIX_CONDITION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_DATE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            PREFIX_CONDITION)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                AddRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argumentMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argumentMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argumentMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argumentMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        RequestDate requestDate \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseRequestDate(argumentMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cCondition\u003e conditions \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                ParserUtil.parseConditions(argumentMultimap.getAllValues(PREFIX_CONDITION));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddRequestCommand(new Request(name, nric, phone, address, requestDate,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            conditions));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @author Lookaz"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Auxiliary method for parsing the adding of HealthWorker objects"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param args argument list for add command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return new AddHealthWorkerCommand for the adding of health worker"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * with the fields specified in args"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @throws ParseException if there are invalid/unfilled fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private AddHealthWorkerCommand parseAddHealthWorker(String args) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_NAME, PREFIX_PHONE, PREFIX_ORGANIZATION, PREFIX_NRIC, PREFIX_SKILLS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_ORGANIZATION,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_PHONE, PREFIX_SKILLS)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    AddHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Organization organization \u003d ParserUtil.parseOrganization(argMultimap"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .getValue(PREFIX_ORGANIZATION).get());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills skills \u003d ParserUtil.parseSpecialisations(argMultimap.getAllValues(PREFIX_SKILLS));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker healthWorker \u003d new HealthWorker(name, nric, phone, organization, skills);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new AddHealthWorkerCommand(healthWorker);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "Lookuz": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @author Lookaz"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Checks a given argument string and returns the corresponding"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * CommandMode enum"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param args argument string to check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return CommandMode enum type if available, else CommandMode.INVALID"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static CommandMode checkMode(String args) throws NullPointerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String commandMode \u003d args.trim().split(\"\\\\s\")[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return CommandMode.checkMode(commandMode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @author Lookaz"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Trims the argument string from it\u0027s command mode in the first two indices."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Precondition: First two indices of argument string must contain a command mode number followed by a space."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param args argument string to trim"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return trimmed argument string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static String trimMode(String args) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return args.trim().split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort(Comparator.comparingInt(PrefixPosition::getStartPosition));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "Lookuz": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_CONDITION \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_HEALTHWORKER \u003d new Prefix(\"hw/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_REQUEST \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Additional prefixes for HealthWorker"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Prefix PREFIX_ORGANIZATION \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Prefix PREFIX_SKILLS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /* Prefixes for Add/Edit/Delete Command modes */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Prefix PREFIX_ADD_HEALTHWORKER \u003d new Prefix(\"1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Prefix PREFIX_ADD_PATIENT \u003d new Prefix(\"3\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Prefix PREFIX_ADD_REQUEST \u003d new Prefix(\"2\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /* Prefixes for setting reminders */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final Prefix PREFIX_MESSAGE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "Lookuz": 7,
      "huichun66": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandMode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Represents the mode for AddPersonCommand, EditPersonCommand and DeletePersonCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public enum CommandMode {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    HEALTH_WORKER,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    PATIENT,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    REQUEST,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    OTHERS,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MODE_HEALTHWORKER \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MODE_PATIENT \u003d \"3\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MODE_REQUEST \u003d \"2\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MODE_OTHERS \u003d \"4\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MODE_INVALID \u003d \"5\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final Set\u003cString\u003e healthWorkerModes \u003d new HashSet\u003c\u003e(Arrays.asList(\"healthworker\", \"h\", \"1\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final Set\u003cString\u003e requestModes \u003d new HashSet\u003c\u003e(Arrays.asList(\"request\", \"r\", \"2\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method that checks for the corresponding CommandMode given a string input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns INVALID if input string does not match any of the given modes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static CommandMode checkMode(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (healthWorkerModes.contains(input)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return CommandMode.HEALTH_WORKER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        } else if (requestModes.contains(input)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return CommandMode.REQUEST;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return CommandMode.INVALID;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.DeleteHealthWorkerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.DeleteRequestCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Parses input arguments and creates a new DeletePersonCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_COMMAND_USAGE \u003d EditCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + DeleteHealthWorkerCommand.MESSAGE_USAGE + DeleteRequestCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePersonCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * and returns an DeletePersonCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        CommandMode commandMode \u003d ArgumentTokenizer.checkMode(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (commandMode \u003d\u003d CommandMode.HEALTH_WORKER) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                index \u003d ParserUtil.parseIndex(ArgumentTokenizer.trimMode(args));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return new DeleteHealthWorkerCommand(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        DeleteHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        } else if (commandMode \u003d\u003d CommandMode.REQUEST) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                index \u003d ParserUtil.parseIndex(ArgumentTokenizer.trimMode(args));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return new DeleteRequestCommand(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        DeleteRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                INVALID_COMMAND_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "Lookuz": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand.EditHealthWorkerDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.EditRequestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.EditRequestCommand.EditRequestDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_COMMAND_USAGE \u003d EditCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + EditHealthWorkerCommand.MESSAGE_USAGE + EditRequestCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPersonCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * and returns an EditPersonCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        CommandMode commandMode \u003d ArgumentTokenizer.checkMode(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (commandMode \u003d\u003d CommandMode.HEALTH_WORKER) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return parseEditHealthWorker(ArgumentTokenizer.trimMode(args));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        EditHealthWorkerCommand.MESSAGE_NOT_EDITED), e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        } else if (commandMode \u003d\u003d CommandMode.REQUEST) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return parseEditRequest(ArgumentTokenizer.trimMode(args));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        EditRequestCommand.MESSAGE_NOT_EDITED), e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, INVALID_COMMAND_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @author Lookaz"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses the arguments into respective fields for edit in EditHealthWorkerCommand."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private EditHealthWorkerCommand parseEditHealthWorker(String args) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_NRIC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_ORGANIZATION, PREFIX_SKILLS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    EditHealthWorkerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptor();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORGANIZATION).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setOrganization(ParserUtil.parseOrganization(argMultimap.getValue(PREFIX_ORGANIZATION).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SKILLS).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setSkills(ParserUtil.parseSpecialisations(argMultimap.getAllValues(PREFIX_SKILLS)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!descriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(EditHealthWorkerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new EditHealthWorkerCommand(index, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @author Lookaz"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method for parsing the arguments into respective fields for edit in EditRequestCommand."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * TODO: David - please review this method."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @throws ParseException if user does not confirm to command format"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private EditRequestCommand parseEditRequest(String args) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_NAME, PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_DATE, PREFIX_CONDITION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    EditRequestCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestDescriptor descriptor \u003d new EditRequestDescriptor();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setDate(ParserUtil.parseRequestDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONDITION).isPresent()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            descriptor.setConditions(ParserUtil.parseConditions(argMultimap.getAllValues(PREFIX_CONDITION)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!descriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(EditRequestCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new EditRequestCommand(index, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "Lookuz": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.FilterHealthWorkerCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.FilterRequestCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Parses input arguments and creates a new FilterHealthWorkerCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d FilterCommand.INVALID_MESSAGE_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + FilterHealthWorkerCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String PREAMBLE_WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * and returns an FilterHealthWorkerCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        CommandMode commandMode \u003d ArgumentTokenizer.checkMode(trimmedArgs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (commandMode \u003d\u003d CommandMode.HEALTH_WORKER) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return new FilterHealthWorkerCommand(parseHealthWorkerPredicates(PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ArgumentTokenizer.trimMode(args)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        FilterHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        } else if (commandMode \u003d\u003d CommandMode.REQUEST) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return new FilterRequestCommand(parseRequestPredicates(PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ArgumentTokenizer.trimMode(args)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        FilterRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method that parses a string of parameters into a list of predicates for filtering health workers in a list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static List\u003cPredicate\u003e parseHealthWorkerPredicates(String args) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_SKILLS, PREFIX_ORGANIZATION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!anyPrefixPresent(argumentMultimap, PREFIX_NAME,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_SKILLS, PREFIX_ORGANIZATION)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    FilterHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            predicateList.add(x -\u003e ((HealthWorker) x).getName().contains(argumentMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_ORGANIZATION).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            predicateList.add(x -\u003e ((HealthWorker) x).getOrganization().contains(argumentMultimap"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    .getValue(PREFIX_ORGANIZATION).get()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_SKILLS).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            Set\u003cSpecialisation\u003e otherSkills \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            for (String s : argumentMultimap.getAllValues(PREFIX_SKILLS)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Optional\u003cSpecialisation\u003e specialisation \u003d Specialisation.getSpecialisation(s);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                if (specialisation.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    otherSkills.add(specialisation.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    // Invalid specialisation entered, should not return any results"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    predicateList.add(x -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            predicateList.add(x -\u003e ((HealthWorker) x).getSkills().containsAll(otherSkills));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return predicateList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method that parses a string of prefix arguments into a predicates for filtering requests."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static Predicate\u003cRequest\u003e parseRequestPredicates(String args) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                PREFIX_DATE, PREFIX_CONDITION, PREFIX_STATUS, PREFIX_NRIC);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!anyPrefixPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_DATE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_CONDITION, PREFIX_STATUS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    FilterRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new RequestPredicateUtil().parsePredicate(argMultimap);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method to check if there are any existing prefixes in the ArgumentMultiMap."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static boolean anyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Lookuz": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HealthHubParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.ListCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.logic.commands.SetReminderCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.AssignRequestCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.ClearRequestCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.CompleteRequestCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.request.DeleteRequestCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.request.FindRequestCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.request.ListRequestCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.SelectRequestCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.request.AssignRequestCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.request.CompleteRequestParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class HealthHubParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case CompleteRequestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CompleteRequestParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearRequestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearRequestCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case AssignRequestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AssignRequestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectRequestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectRequestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            //return new ClearCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        case SetReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            return new SetReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new StatisticsCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "jing1324": 8,
      "Lookuz": 7,
      "huichun66": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cIndex\u003e}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cIndex\u003e parseIndexes(Collection\u003cString\u003e index) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String indexNo : index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            indexSet.add(parseIndex(indexNo));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String id} and returns it\u0027s respective index in the addressbook patient list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static int parsePatientIndex(String id) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(trimmedId);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d Methods for parsing Patient Conditions \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    // @author Rohan"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String specialisation} into a {@code Specialisation}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code specialisation} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Condition parseCondition(String condition)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(condition);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedCondition \u003d condition.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Condition.isValidConditionName(trimmedCondition)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Condition(trimmedCondition);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e conditionsToAdd} into a {@code Set\u003cCondition\u003e}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cCondition\u003e parseConditions(Collection\u003cString\u003e conditionsToAdd)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(conditionsToAdd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cCondition\u003e conditionSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String conditionToAdd : conditionsToAdd) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            conditionSet.add(parseCondition(conditionToAdd));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return conditionSet;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d Methods for parsing Organisation, Nric and Specialisations \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // @author Lookaz"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses a {@code String organization} into a {@code Organization}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @throws ParseException if the given {@code organization} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static Organization parseOrganization(String organization) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(organization);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String trimmedOrganization \u003d organization.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!Organization.isValidOrgName(trimmedOrganization)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(Organization.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new Organization(trimmedOrganization);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses a {@code String nric} into a {@code Nric}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses a {@code String specialisation} into a {@code Specialisation}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @throws ParseException if the given {@code specialisation} is invalid."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static Specialisation parseSpecialisation(String specialisation)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(specialisation);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String trimmedSpecialisation \u003d specialisation.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!Specialisation.isValidSpecialisation(trimmedSpecialisation)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(Specialisation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return Specialisation.parseString(trimmedSpecialisation);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e specialisations} into a {@code"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Skills}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static Skills parseSpecialisations(Collection\u003cString\u003e specialisations)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(specialisations);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        final Skills skills \u003d new Skills();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        for (String specialisation : specialisations) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            skills.addSpecialisation(parseSpecialisation(specialisation));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return skills;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code String date} into a {@code RequestDate}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RequestDate parseRequestDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!RequestDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(RequestDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        return new RequestDate(trimmedDate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 190,
      "jing1324": 1,
      "Lookuz": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RequestPredicateUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.FilterRequestCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.request.RequestDatePredicateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.request.RequestStatusPredicateUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestAddressContainsKeywordPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestConditionContainsKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDatePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestNameContainsKeywordPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestNricContainsKeywordPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestPhoneContainsKeywordPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestStatusContainsKeywordPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Util to parse Request\u0027s predicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class RequestPredicateUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_KEYWORD \u003d \"%1$s cannot be empty\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STRING_PREFIX_NAME \u003d \"n/\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STRING_PREFIX_PHONE \u003d \"p/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STRING_PREFIX_ADDRESS \u003d \"a/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STRING_PREFIX_DATE \u003d \"dt/\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STRING_PREFIX_CONDITION \u003d \"c/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STRING_PREFIX_STATUS \u003d \"st/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STRING_PREFIX_NRIC \u003d \"i/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STRING_PREFIX_HEALTHWORKER \u003d \"hw/\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Predicate\u003cRequest\u003e chainedPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code argMultimap} to a chained predicate and returns the chained"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * predicate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Predicate\u003cRequest\u003e parsePredicate(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cPrefix\u003e prefixes \u003d argumentMultimap.getAllPrefixes();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            if (prefix.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e keywords \u003d argumentMultimap.getAllValues(prefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            ensureNonEmptyField(prefix, keywords);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            chainPredicate(prefix, keywords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return chainedPredicate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the different {@code prefix}, forces the related predicate and chains them up"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if an invalid {@code prefix} is supplied"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void chainPredicate(Prefix prefix, List\u003cString\u003e keywords) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (prefix.toString()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case STRING_PREFIX_NAME:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            String name \u003d getLastValueFromList(keywords);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            RequestNameContainsKeywordPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new RequestNameContainsKeywordPredicate(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            setToPredicate(namePredicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case STRING_PREFIX_PHONE:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            String phone \u003d getLastValueFromList(keywords);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] phoneKeywords \u003d trimAndSplitStringByWhiteSpaces(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            RequestPhoneContainsKeywordPredicate phonePredicate \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new RequestPhoneContainsKeywordPredicate(Arrays.asList(phoneKeywords));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            setToPredicate(phonePredicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case STRING_PREFIX_ADDRESS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            String address \u003d getLastValueFromList(keywords);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            RequestAddressContainsKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new RequestAddressContainsKeywordPredicate(address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            setToPredicate(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case STRING_PREFIX_CONDITION:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            String condition \u003d getLastValueFromList(keywords);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            RequestConditionContainsKeywordPredicate conditionContainsKeywordPredicate \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new RequestConditionContainsKeywordPredicate(condition);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            setToPredicate(conditionContainsKeywordPredicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case STRING_PREFIX_STATUS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            String status \u003d getLastValueFromList(keywords);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] statusKeywords \u003d trimAndSplitStringByWhiteSpaces(status);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cRequestStatus\u003e requestStatuses \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                new RequestStatusPredicateUtil().parseOrderStatusKeywords(Arrays.asList(statusKeywords));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            RequestStatusContainsKeywordPredicate statusPredicate \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                new RequestStatusContainsKeywordPredicate(requestStatuses);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            setToPredicate(statusPredicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case STRING_PREFIX_NRIC:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            String nric \u003d getLastValueFromList(keywords);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            RequestNricContainsKeywordPredicate requestNricContainsKeywordPredicate \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new RequestNricContainsKeywordPredicate(nric);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setToPredicate(requestNricContainsKeywordPredicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case STRING_PREFIX_DATE:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDate\u003e date \u003d new RequestDatePredicateUtil().parseDateKeywords(keywords);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            RequestDatePredicate datePredicate \u003d new RequestDatePredicate(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            setToPredicate(datePredicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                FilterRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getLastValueFromList(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        int lastIndex \u003d list.size() - 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(lastIndex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private String[] trimAndSplitStringByWhiteSpaces(String value) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set {@code chainedPredicate} to {@code predicate} if predicate is not set"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * else AND the predicates"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setToPredicate(Predicate\u003cRequest\u003e predicate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // predicate is not set"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (chainedPredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            chainedPredicate \u003d predicate;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            chainedPredicate \u003d chainedPredicate.and(predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensure if prefix given has a non-empty field"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if one prefix is empty"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureNonEmptyField(Prefix prefix, List\u003cString\u003e keywords) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            if (keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EMPTY_KEYWORD, prefix.toString()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 164,
      "Lookuz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetReminderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.logic.commands.SetReminderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Parses input arguments and creates a new SetReminderCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class SetReminderCommandParser implements Parser\u003cSetReminderCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * SetReminderCommand and returns an SetReminderCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public SetReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TIME, PREFIX_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_MESSAGE).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            // if there are supplied values for time and message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            String time \u003d argMultimap.getValue(PREFIX_TIME).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            String message \u003d argMultimap.getValue(PREFIX_MESSAGE).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (time.length() \u003d\u003d 8 \u0026\u0026 time.matches(\"\\\\d+:\\\\d+:\\\\d+\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u0026\u0026 message.length() !\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                return new SetReminderCommand(time, message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                throw new ParseException(SetReminderCommand.INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    SetReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/request/RequestDatePredicateUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses of date keywords and returns a valid date list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RequestDatePredicateUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int VALID_DATE_LIST_SIZE \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final SimpleDateFormat sf \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sorts the dates in ascending request"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of size 2 if more than 2 date fields are specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cDate\u003e parseDateKeywords(List\u003cString\u003e keywords) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        final int firstIndex \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        final int lastIndex \u003d keywords.size() - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cDate\u003e dates \u003d parseStringToDate(keywords);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(dates);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (dates.size() \u003e VALID_DATE_LIST_SIZE) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDate\u003e newKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            newKeywords.add(dates.get(firstIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            newKeywords.add(dates.get(lastIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return newKeywords;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a list of {@code stringDates} and returns a list of Date object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if invalid date format is supplied"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cDate\u003e parseStringToDate(List\u003cString\u003e stringsDates) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cDate\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String stringDate : stringsDates) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                sf.setLenient(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                dates.add(sf.parse(stringDate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (java.text.ParseException pE) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                throw new ParseException(RequestDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "Lookuz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CommandType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * Class that represents different types of books"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    HEALTHWORKER_COMMAND,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    REQUEST_COMMAND"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/HealthWorkerBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.UniqueHealthWorkerList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Wrapper class for storing HealthWorkers and operations involving HealthWorker objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Duplicates are not allowed (by .isSameHealthWorker comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class HealthWorkerBook implements ReadOnlyHealthWorkerBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final UniqueHealthWorkerList uniqueHealthWorkerList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.uniqueHealthWorkerList \u003d new UniqueHealthWorkerList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBook() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBook(ReadOnlyHealthWorkerBook toCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        resetData(toCopy);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setHealthWorkers(List\u003cHealthWorker\u003e healthWorkers) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.uniqueHealthWorkerList.setHealthWorkers(healthWorkers);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Resets the existing data of this {@code HealthWorkerBook} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void resetData(ReadOnlyHealthWorkerBook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        setHealthWorkers(newData.getHealthWorkerList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if a HealthWorker with the same identity as {@code worker}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * exists in the HealthWorkerBook."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean hasHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(healthWorker);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.uniqueHealthWorkerList.contains(healthWorker);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Adds a HealthWorker to the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * HealthWorker object must not already exist in the HealthWorkerBook."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void addHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.uniqueHealthWorkerList.add(healthWorker);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Replaces the given HealthWorker {@code target} in the list with {@code editedWorker}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * {@code target} must exist in the HealthWorkerBook."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * The person identity of {@code editedWorker} must not be the same as another"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * existing HealthWorker in the HealthWorkerBook."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setHealthWorker(HealthWorker target, HealthWorker editedWorker) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(editedWorker);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.uniqueHealthWorkerList.setHealthWorker(target, editedWorker);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Removes {@code worker} from this {@code HealthWorkerBook}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * {@code worker} must exist in the HealthWorkerBook."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void removeHealthWorker(HealthWorker worker) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.uniqueHealthWorkerList.remove(worker);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Notifies listeners that HealthWorkerBook has been modified."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public ObservableList\u003cHealthWorker\u003e getHealthWorkerList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.uniqueHealthWorkerList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void addListener(InvalidationListener invalidationListener) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.invalidationListenerManager.addListener(invalidationListener);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void removeListener(InvalidationListener invalidationListener) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.invalidationListenerManager.removeListener(invalidationListener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return other instanceof HealthWorkerBook \u0026\u0026 this.uniqueHealthWorkerList"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(((HealthWorkerBook) other).uniqueHealthWorkerList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.uniqueHealthWorkerList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * TODO: Overhaul to only have components needed for HealthHub"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    Predicate\u003cHealthWorker\u003e PREDICATE_SHOW_ALL_HEALTHWORKERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cRequest\u003e PREDICATE_SHOW_ALL_REQUESTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /** Returns the HealthWorkerBook */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    ReadOnlyHealthWorkerBook getHealthWorkerBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /** Returns the user prefs\u0027 health worker book file path. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    Path getHealthWorkerBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Added methods for AddHealthWorkerCommand \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // @author: Lookaz"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if a person with the same identity as {@code healthWorker}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * exists in the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    boolean hasHealthWorker(HealthWorker healthWorker);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Deletes the given HealthWorker."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * The HealthWorker object must exist in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    void deleteHealthWorker(HealthWorker target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Adds the given HealthWorker."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * {@code healthWorker} must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    void addHealthWorker(HealthWorker healthWorker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedWorker}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * The identity of {@code editedWorker} must not be the same as"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * another existing HealthWorker in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    void setHealthWorker(HealthWorker target, HealthWorker editedWorker);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /** Returns an unmodifiable view of the filtered health worker list */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    ObservableList\u003cHealthWorker\u003e getFilteredHealthWorkerList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Updates the filter of the filtered HealthWorker list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    void updateFilteredHealthWorkerList(Predicate\u003cHealthWorker\u003e predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Selected health worker in the filtered health worker list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * null if no health worker is selected."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    ReadOnlyProperty\u003cHealthWorker\u003e selectedHealthWorkerProperty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**\\"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Sets the selected health worker in the filtered health worker list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    void setSelectedHealthWorker(HealthWorker worker);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    void commitHealthWorkerBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Request related code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    // @author David, Hui Chun"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 request book file path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getRequestBookFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the RequestBook */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyRequestBook getRequestBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the request list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cRequest\u003e getFilteredRequestList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Selected request in the filtered request list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * null if no request is selected."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    ReadOnlyProperty\u003cRequest\u003e selectedRequestProperty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Sets the selected request in the filtered request list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    void setSelectedRequest(Request request);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a request with the same identity as {@code request} exists in the address"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasRequest(Request request);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedRequest}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the request book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * The request identity of {@code editedRequest} must not be the same as another existing"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * request in the request book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateRequest(Request target, Request editedRequest);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given request."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * The request must exist in the request book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteRequest(Request target);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredRequestList(Predicate\u003cRequest\u003e predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given request."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code request} must not already exist in the request book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void addRequest(Request request);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyRequestBook newData);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given request {@code target} with {@code editedRequest}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the request book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * The request identity of {@code editedRequest} must not be the same as another existing"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * request in the request book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    void setRequest(Request target, Request editedRequest);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitRequestBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    void redo();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Commits the book based on command issued."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    void commit(CommandType commandType);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 139,
      "jing1324": 11,
      "Lookuz": 33,
      "huichun66": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.exceptions.HealthWorkerNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.exceptions.RequestNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final VersionedHealthWorkerBook versionedHealthWorkerBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final VersionedRequestBook versionedRequestBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final ModifyCommandHistory modifyCommandHistory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final FilteredList\u003cHealthWorker\u003e filteredHealthWorkers;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO make the relevant changes to the model manager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO get versionedAddressBook tests to pass"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final FilteredList\u003cRequest\u003e filteredRequests;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final SimpleObjectProperty\u003cHealthWorker\u003e selectedHealthWorker \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final SimpleObjectProperty\u003cRequest\u003e selectedRequest \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public ModelManager("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        ReadOnlyHealthWorkerBook healthWorkerBook,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                        ReadOnlyRequestBook requestBook,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        requireAllNonNull(requestBook, healthWorkerBook, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        logger.fine(\"Initializing with request book: \" + requestBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        versionedHealthWorkerBook \u003d new VersionedHealthWorkerBook(healthWorkerBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        versionedRequestBook \u003d new VersionedRequestBook(requestBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filteredHealthWorkers \u003d new FilteredList\u003c\u003e(versionedHealthWorkerBook.getHealthWorkerList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filteredRequests \u003d new FilteredList\u003c\u003e(versionedRequestBook.getRequestList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        filteredHealthWorkers.addListener(this::ensureSelectedHealthWorkerIsValid);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filteredRequests.addListener(this::ensureSelectedRequestIsValid);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        modifyCommandHistory \u003d new ModifyCommandHistory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this(new HealthWorkerBook(), new RequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Implemented methods for HealthWorker through Model Interface \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // @author: Lookaz"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean hasHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(healthWorker);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.versionedHealthWorkerBook.hasHealthWorker(healthWorker);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void deleteHealthWorker(HealthWorker target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.versionedHealthWorkerBook.removeHealthWorker(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void addHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.versionedHealthWorkerBook.addHealthWorker(healthWorker);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        updateFilteredHealthWorkerList(PREDICATE_SHOW_ALL_HEALTHWORKERS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setHealthWorker(HealthWorker target, HealthWorker editedWorker) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireAllNonNull(target, editedWorker);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.versionedHealthWorkerBook.setHealthWorker(target, editedWorker);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public ObservableList\u003cHealthWorker\u003e getFilteredHealthWorkerList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.filteredHealthWorkers;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void updateFilteredHealthWorkerList(Predicate\u003cHealthWorker\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.filteredHealthWorkers.setPredicate(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public ReadOnlyProperty\u003cHealthWorker\u003e selectedHealthWorkerProperty() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return selectedHealthWorker;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void setSelectedHealthWorker(HealthWorker worker) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (worker !\u003d null \u0026\u0026 !filteredHealthWorkers.contains(worker)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new HealthWorkerNotFoundException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        selectedHealthWorker.setValue(worker);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public ReadOnlyHealthWorkerBook getHealthWorkerBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.versionedHealthWorkerBook;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void commitHealthWorkerBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook.commit();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns the user prefs\u0027 health worker book file path."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public Path getHealthWorkerBookFilePath() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return userPrefs.getHealthWorkerBookFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    // @author Jing1324"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return versionedHealthWorkerBook.canUndo() || versionedRequestBook.canUndo();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return versionedHealthWorkerBook.canRedo() || versionedRequestBook.canRedo();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        CommandType commandType \u003d modifyCommandHistory.getUndoCommand();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        modifyCommandHistory.undo();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        switch(commandType) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        case HEALTHWORKER_COMMAND:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedHealthWorkerBook.undo();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        case REQUEST_COMMAND:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedRequestBook.undo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        CommandType commandType \u003d modifyCommandHistory.getRedoCommand();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        modifyCommandHistory.redo();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        case HEALTHWORKER_COMMAND:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedHealthWorkerBook.redo();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        case REQUEST_COMMAND:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedRequestBook.redo();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void commit(CommandType commandType) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        modifyCommandHistory.addLatestCommand(commandType);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        case HEALTHWORKER_COMMAND:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            commitHealthWorkerBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        case REQUEST_COMMAND:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            commitRequestBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Implemented methods for Request through the Model interface  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public ObservableList\u003cRequest\u003e getFilteredRequestList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return filteredRequests;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 request book file path."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getRequestBookFilePath() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return userPrefs.getRequestBookFilePath();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the RequestBook"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyRequestBook getRequestBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.versionedRequestBook;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a request with the same identity as {@code request} exists in the address"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param request"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasRequest(Request request) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(request);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedRequestBook.hasRequest(request);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedRequest);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedRequestBook.setRequest(target, editedRequest);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given request."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * The request must exist in the request book."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteRequest(Request target) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedRequestBook.removeRequest(target);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredRequestList(Predicate\u003cRequest\u003e predicate) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredRequests.setPredicate(predicate);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given request to the request book"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addRequest(Request request) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedRequestBook.addRequest(request);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredRequestList(PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyRequestBook newData) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedRequestBook.resetData(newData);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given request {@code target} with {@code editedRequest}."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the request book."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * The request identity of {@code editedRequest} must not be the same as another existing"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * request in the request book."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editedRequest"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedRequest);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedRequestBook.setRequest(target, editedRequest);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void commitRequestBook() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        versionedRequestBook.commit();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public ReadOnlyProperty\u003cRequest\u003e selectedRequestProperty() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return selectedRequest;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void setSelectedRequest(Request request) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (request !\u003d null \u0026\u0026 !filteredRequests.contains(request)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new RequestNotFoundException();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        selectedRequest.setValue(request);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Ensures {@code selectedHealthWorker} is a valid request in {@code filteredHealthWorkers}."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void ensureSelectedHealthWorkerIsValid(ListChangeListener.Change\u003c? extends HealthWorker\u003e change) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (selectedHealthWorker.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            boolean wasSelectedHealthWorkerReplaced \u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                            \u0026\u0026 change.getRemoved().contains(selectedHealthWorker.getValue());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (wasSelectedHealthWorkerReplaced) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                // Update selectedHealthWorker to its new value"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedHealthWorker.getValue());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                selectedHealthWorker.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            boolean wasSelectedHealthWorkerRemoved \u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    change.getRemoved().stream().anyMatch(removedHealthWorker -\u003e selectedHealthWorker.getValue()"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                            .isSameHealthWorker(removedHealthWorker));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (wasSelectedHealthWorkerRemoved) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                selectedHealthWorker.setValue(change.getFrom() \u003e 0"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Ensures {@code selectedRequest} is a valid request in {@code filteredRequests}."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void ensureSelectedRequestIsValid(ListChangeListener.Change\u003c? extends Request\u003e change) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (selectedRequest.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            boolean wasSelectedRequestReplaced \u003d"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedRequest.getValue());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (wasSelectedRequestReplaced) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                // Update selectedRequest to its new value"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedRequest.getValue());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                selectedRequest.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            boolean wasSelectedRequestRemoved \u003d"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                change.getRemoved().stream().anyMatch(removedRequest -\u003e selectedRequest.getValue()"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    .isSameRequest(removedRequest));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (wasSelectedRequestRemoved) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                selectedRequest.setValue(change.getFrom() \u003e 0"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return versionedHealthWorkerBook.equals(other.versionedHealthWorkerBook)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \u0026\u0026 versionedRequestBook.equals(other.versionedRequestBook)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \u0026\u0026 filteredRequests.equals(other.filteredRequests)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \u0026\u0026 filteredHealthWorkers.equals(filteredHealthWorkers)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \u0026\u0026 Objects.equals(selectedRequest.get(), other.selectedRequest.get())"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 239,
      "jing1324": 71,
      "huichun66": 93,
      "Lookuz": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModifyCommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.BookType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * Class that stores history of commands that modify the respective Books."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class ModifyCommandHistory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final int NOT_MODIFIED_YET \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final List\u003cCommandType\u003e modifyCommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private int currStatePointer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public ModifyCommandHistory() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.modifyCommandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.currStatePointer \u003d NOT_MODIFIED_YET;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.modifyCommandHistory.subList(this.currStatePointer + 1,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                this.modifyCommandHistory.size()).clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Add the type of the last executed modify command into history of modify commands"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param type The type of command that was last executed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void addLatestCommand(CommandType type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.modifyCommandHistory.add(type);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.currStatePointer++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public CommandType getUndoCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assert(this.currStatePointer \u003e NOT_MODIFIED_YET);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return this.modifyCommandHistory.get(currStatePointer);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public CommandType getRedoCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assert(this.currStatePointer \u003c modifyCommandHistory.size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return this.modifyCommandHistory.get(currStatePointer + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Restores its previous state pointer."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new VersionedBook.NoUndoableStateException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.currStatePointer--;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Restores its previously undone state pointer."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new VersionedBook.NoRedoableStateException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.currStatePointer++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return this.currStatePointer \u003e NOT_MODIFIED_YET;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return this.currStatePointer \u003c this.modifyCommandHistory.size() - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!(other instanceof ModifyCommandHistory)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        ModifyCommandHistory otherHistory \u003d (ModifyCommandHistory) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return super.equals(otherHistory)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                \u0026\u0026 this.modifyCommandHistory.equals(otherHistory.modifyCommandHistory)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                \u0026\u0026 this.currStatePointer \u003d\u003d otherHistory.currStatePointer;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyHealthWorkerBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Unmodifiable view of HealthWorkerBook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public interface ReadOnlyHealthWorkerBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns an unmodifiable view of the healthworkers list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * This list will not contain any duplicate healthworkers"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    ObservableList\u003cHealthWorker\u003e getHealthWorkerList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Path getRequestBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Path getHealthWorkerBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "jing1324": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Path requestBookFilePath \u003d Paths.get(\"data\" , \"requestbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Path healthWorkerBookFilePath \u003d Paths.get(\"data\" , \"healthworkerbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        setHealthWorkerBookFilePath(newUserPrefs.getHealthWorkerBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        setRequestBookFilePath(newUserPrefs.getRequestBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public Path getRequestBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return this.requestBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void setRequestBookFilePath(Path requestBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        requireNonNull(requestBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.requestBookFilePath \u003d requestBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public Path getHealthWorkerBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return healthWorkerBookFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void setHealthWorkerBookFilePath(Path healthWorkerBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        requireNonNull(healthWorkerBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.healthWorkerBookFilePath \u003d healthWorkerBookFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 requestBookFilePath.equals(o.requestBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        sb.append(\"\\nAddress book Local data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        sb.append(\"\\nRequest book Local data file location : \" + requestBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        sb.append(\"\\nHealthWorker book Local data file location : \" + healthWorkerBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "jing1324": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Interface that represents a ObjectBook that keeps track of changes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public interface VersionedBook {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Saves a copy of the current state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Restores its previous state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Restores its previously undone state."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    void redo();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if {@code undo()} has states to undo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        protected NoUndoableStateException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            super(\"Current state pointer at start of BookState list, unable to undo.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        protected NoRedoableStateException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            super(\"Current state pointer at end of BookState list, unable to redo.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 2,
      "Lookuz": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedHealthWorkerBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * {@code HealthWorkerBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class VersionedHealthWorkerBook extends HealthWorkerBook implements VersionedBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final List\u003cReadOnlyHealthWorkerBook\u003e healthWorkerBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private int currStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public VersionedHealthWorkerBook(ReadOnlyHealthWorkerBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.healthWorkerBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.healthWorkerBookStateList.add(new HealthWorkerBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.currStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.healthWorkerBookStateList.subList(this.currStatePointer + 1,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                this.healthWorkerBookStateList.size()).clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.healthWorkerBookStateList.add(new HealthWorkerBook(this));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.currStatePointer++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.currStatePointer--;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        resetData(this.healthWorkerBookStateList.get(this.currStatePointer));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.currStatePointer++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        resetData(this.healthWorkerBookStateList.get(this.currStatePointer));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.currStatePointer \u003e 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.currStatePointer \u003c this.healthWorkerBookStateList.size() - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!(other instanceof VersionedHealthWorkerBook)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        VersionedHealthWorkerBook otherHealthWorkerBook \u003d (VersionedHealthWorkerBook) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return super.equals(otherHealthWorkerBook)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 this.healthWorkerBookStateList.equals(otherHealthWorkerBook.healthWorkerBookStateList)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 this.currStatePointer \u003d\u003d otherHealthWorkerBook.currStatePointer;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedRequestBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code RequestBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedRequestBook extends RequestBook implements VersionedBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReadOnlyRequestBook\u003e requestBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public VersionedRequestBook(ReadOnlyRequestBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBookStateList.add(new RequestBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBookStateList.subList(currentStatePointer + 1, requestBookStateList.size()).clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"State: \" + this.currentStatePointer + \"\\n\" + this.requestBookStateList.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves a copy of the current state."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBookStateList.add(new RequestBook(this));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores its previous state."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(requestBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores its previously undone state."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.currentStatePointer++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        resetData(this.requestBookStateList.get(this.currentStatePointer));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has states to undo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c requestBookStateList.size() - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof VersionedRequestBook)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedRequestBook otherVersionedRequestBook \u003d (VersionedRequestBook) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedRequestBook) \u0026\u0026 requestBookStateList"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            .equals(otherVersionedRequestBook.requestBookStateList)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedRequestBook.currentStatePointer;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 97,
      "jing1324": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Extracts the street name from the address value, without the unit number."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @return street A street only address."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String toStreetNameOnly() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // The address is either in one of the following formats:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // 123, ABC Road, #01-01 or 123 ABC Road, #01-01 or"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // 123, ABC, Road, #01-01 or wallstreet"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String street \u003d value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (street.indexOf(\"#\") !\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            street \u003d value.substring(0, value.indexOf(\"#\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (street.indexOf(\",\") !\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            street \u003d street.replaceAll(\",\", \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return street;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "huichun66": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \"Names should only contain alphabets and spaces, and \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    + \"it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method that returns true if the full name contains the specified substring"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean contains(String substring) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.fullName.toLowerCase().contains(substring.toLowerCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "Lookuz": 9,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Represents a Person\u0027s Nric to be represented."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Guarantees Non-Null and is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Nric should start with \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"an S or T, followed by 7 numeric characters and then a letter\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \". All letters are to be in capital casing\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[STGF]\\\\d{7}[A-Z]\"; // Nric"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // should start with capital S/T, followed by 7 numeric characters and a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // capital letter."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param nric A valid Nric."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if the Nric entered matches is valid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param test Nric string to be tested"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return true if test matches the validation regex"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.nric;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.nric.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this \u003d\u003d other || (other instanceof Nric \u0026\u0026 this.nric.equals((("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Nric) other).nric));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Lookuz": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Person(Name name, Nric nric, Phone phone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireAllNonNull(name, phone, nric);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if both persons of the same name have thesame nric."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return Objects.hash(name, phone, nric);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(\" Nric: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(getPhone());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "Lookuz": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \"Phone numbers should only contain numbers, and should be 8 digits long starting with 6, 8 or 9.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[689][0-9]{7}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "Lookuz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/healthworker/HealthWorker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.person.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Represents a Health Worker class that can handle requests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Guarantees: details are present and not null, and field values are validated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class HealthWorker extends Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private Organization organization;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private Skills skills;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public HealthWorker(HealthWorker toCopy) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(toCopy.getName(), toCopy.getNric(), toCopy.getPhone());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.organization \u003d toCopy.getOrganization();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.skills \u003d toCopy.getSkills();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorker(Name name, Nric nric, Phone phone, Organization organization, Skills skills) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        super(name, nric, phone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.skills \u003d skills;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Organization getOrganization() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return organization;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Skills getSkills() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return skills;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Checks if the current HealthWorker object has the specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * specialisation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param specialisation to check for"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return true if the HealthWorker object contains the specialisation in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Skills, false otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean hasSkill(Specialisation specialisation) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.skills.contains(specialisation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(\" Nric: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(\" Organization: \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(getOrganization().toString())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(\" Skills: \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .append(getSkills());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if both HealthWorkers have the same name, nric, phone and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * organization."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean isSameHealthWorker(HealthWorker other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 other.getNric().equals(this.getNric());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!(other instanceof HealthWorker)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker otherHealthWorker \u003d (HealthWorker) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return otherHealthWorker.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 otherHealthWorker.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 otherHealthWorker.getNric().equals(getNric())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 otherHealthWorker.getOrganization().equals(getOrganization())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 otherHealthWorker.getSkills().equals(getSkills());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return Objects.hash(getName(), getNric(), getPhone(), getOrganization(), getSkills());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Lookuz": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/healthworker/Organization.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.person.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Represents a Health Worker\u0027s Organization."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOrgName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class Organization {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Organization name \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \"should contain only alphanumeric characters and spaces\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \"^[a-zA-Z0-9]+( [a-zA-Z0-9]+)*$\"; // Organization name should"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // contain only alphanumeric character strings with spaces in between."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private String orgName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Organization(String orgName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(orgName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        checkArgument(isValidOrgName(orgName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.orgName \u003d orgName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static boolean isValidOrgName(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Method that returns true if organization name contains the specified substring."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean contains(String substring) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.orgName.toLowerCase().contains(substring.toLowerCase());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public String getOrgName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return orgName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return getOrgName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.orgName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return other \u003d\u003d this || (other instanceof Organization \u0026\u0026 this"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .orgName.equals(((Organization) other).orgName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/healthworker/UniqueHealthWorkerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.person.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * A list of HealthWorker objects that enforces uniqueness between its elements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * and does not allow nulls. A person is considered unique by comparing using"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * {@code HealthWorker#isSameHealthWorker(HealthWorker)}. As such, adding and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * updating of HealthWorkers uses HealthWorker#isSameHealthWorker(HealthWorker)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * for equality so as to ensure that the HealthWorker being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * unique in terms of identity in the UniqueHealthWorkerList. However, the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * removal of a person uses HealthWorker#equals(HealthWorker) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @see HealthWorker#isSameHealthWorker(HealthWorker)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class UniqueHealthWorkerList implements Iterable\u003cHealthWorker\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final ObservableList\u003cHealthWorker\u003e internalList \u003d FXCollections"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final ObservableList\u003cHealthWorker\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if the list contains an equivalent HealthWorker as the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean contains(HealthWorker toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.internalList.stream().anyMatch(toCheck::isSameHealthWorker);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Adds a HealthWorker to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void add(HealthWorker toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Replaces the HealthWorker {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * The person identity of {@code edited} must not be the same as another"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * existing HealthWorker in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setHealthWorker(HealthWorker target, HealthWorker edited) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        int index \u003d this.internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!target.isSameHealthWorker(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.internalList.set(index, edited);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Removes the equivalent HealthWorker from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * The HealthWorker must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void remove(HealthWorker toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!this.internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setHealthWorkers(UniqueHealthWorkerList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Replaces the contents of this list with {@code healthWorkers}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * {@code healthWorkers} must not contain duplicate persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setHealthWorkers(List\u003cHealthWorker\u003e healthWorkers) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        requireAllNonNull(healthWorkers);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!workersAreUnique(healthWorkers)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.internalList.setAll(healthWorkers);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public ObservableList\u003cHealthWorker\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Iterator\u003cHealthWorker\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                || (other instanceof UniqueHealthWorkerList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueHealthWorkerList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns true if {@code persons} contains only unique HealthWorkers."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private boolean workersAreUnique(List\u003cHealthWorker\u003e workers) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        for (int i \u003d 0; i \u003c workers.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            for (int j \u003d i + 1; j \u003c workers.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                if (workers.get(i).isSameHealthWorker(workers.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public HealthWorker getAt(int index) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assert(index \u003c this.internalList.size() - 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.internalList.get(index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Lookuz": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/healthworker/exceptions/HealthWorkerNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.model.person.healthworker.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Signals that the operation is unable to find the specified health worker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class HealthWorkerNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huichun66": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/Request.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a request made by a patient in the request book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Request {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final RequestDate requestDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cCondition\u003e conditions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String healthWorker \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private RequestStatus requestStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overloaded constructor that takes in differing arguments for the patient."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Request(Name name, Nric nric, Phone phone, Address address, RequestDate requestDate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                   Set\u003cCondition\u003e conditions, RequestStatus status) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, nric, address, requestDate, conditions, status);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.conditions \u003d conditions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d requestDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor that takes in a {@code Request} object and copies over it\u0027s values."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Request(Request toCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCopy);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d toCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.conditions \u003d toCopy.getConditions();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d toCopy.getRequestStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d toCopy.getRequestDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d toCopy.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d toCopy.getNric();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d toCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d toCopy.getHealthStaff();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Simplified constructor that takes in the minimal arguments to form a {@code Request}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code requestStatus} to pending"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Request(Name name, Nric nric, Phone phone, Address address, RequestDate requestDate,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                   Set\u003cCondition\u003e conditions) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, nric, address, requestDate, conditions, phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.conditions \u003d conditions;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d new RequestStatus(\"PENDING\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d requestDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overloaded constructor to represent a request."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Request(Name name, Nric nric, Phone phone, Address address, RequestDate requestDate,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                   Set\u003cCondition\u003e conditions, RequestStatus status, String healthWorker) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, address, phone, requestDate, conditions, status);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.conditions \u003d conditions;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d status;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d requestDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d healthWorker;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both requests of the same ID and date have at least one other"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * property field that is the same."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two requests."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameRequest(Request otherRequest) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherRequest \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherRequest \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherRequest.nric.equals(this.nric)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherRequest.getRequestDate().equals(this.requestDate)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherRequest.getConditions().equals(this.conditions)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherRequest.address.equals(this.address);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.address;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.nric;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String hw \u003d (healthWorker \u003d\u003d null) ? \"Unassigned\" : healthWorker;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\\n----------Request----------\\n\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Name: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getName() + \"\\n\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Nric: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getNric() + \"\\n\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Phone: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone() + \"\\n\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Address: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress() + \"\\n\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Assigned staff: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(hw + \"\\n\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Request Date: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getRequestDate() + \"\\n\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Condition(s): \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getConditions() + \"\\n\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Status: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getRequestStatus() + \"\\n\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"----------End of Request----------\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Request)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Request otherRequest \u003d (Request) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return (otherRequest.getRequestDate().equals(this.requestDate))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherRequest.name.equals(this.name))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherRequest.address.equals(this.address))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherRequest.phone.equals(this.phone))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherRequest.nric.equals(this.nric))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherRequest.getConditions().equals(this.conditions))"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            \u0026\u0026 (Objects.equals(this.healthWorker, otherRequest.getHealthStaff()))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherRequest.getRequestStatus().equals(this.requestStatus));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cCondition\u003e getConditions() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.conditions;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestStatus getRequestStatus() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.requestStatus;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestDate getRequestDate() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.requestDate;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHealthStaff() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return healthWorker;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setHealthStaff(String healthStaff) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(healthStaff);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d healthStaff;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d new RequestStatus(\"ONGOING\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(healthWorker);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d healthWorker.getName().toString();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d new RequestStatus(\"ONGOING\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isOngoingStatus() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.requestStatus.isOngoingStatus();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.requestStatus.isCompletedStatus();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d new RequestStatus(\"COMPLETED\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 211,
      "jing1324": 2,
      "Lookuz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Request\u0027s date in the request book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RequestDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in the format dd-MM-yyyy HH:mm:ss and it \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"should be a valid date.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final SimpleDateFormat sf \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code RequestDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param requestDate A valid Request Date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestDate(String requestDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(requestDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            sf.setLenient(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d sf.parse(requestDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            checkArgument(false, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param orderDate The date to check for validity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if the orderDate is valid, false otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDate(String orderDate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sf.setLenient(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            sf.parse(orderDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String getFormattedDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MMM-YYYY, hh:mm a\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return dateFormat.format(this.date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sf.format(this.date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof RequestDate // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 date.equals(((RequestDate) other).date)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "Lookuz": 2,
      "huichun66": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Condition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Condition in the request book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidConditionName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Condition {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Condition descriptions should be alphanumeric characters/spaces\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the condition must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_CONDITION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final String conditionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Condition}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param conditionName A valid Condition name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Condition(String conditionName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(conditionName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        checkArgument(isValidConditionName(conditionName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.conditionName \u003d conditionName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid Condition name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidConditionName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_CONDITION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Condition // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 conditionName.equals(((Condition) other).conditionName)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return conditionName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return conditionName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "Lookuz": 2,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Skills.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Class that represents a set of skills of a HealthWorker object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class Skills {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private Set\u003cSpecialisation\u003e skills;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Skills() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.skills \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Constructs a Skills object from existing {@code skills}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param skills Skills object to construct from"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Skills(Skills skills) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.skills \u003d new HashSet\u003c\u003e(skills.getSkills());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Constructs a Skills object from existing {@code skills} Set of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Specialisations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * TODO: Consider using variable argument list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param skills Set object containing Specialisation to construct from."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Skills(Collection\u003cSpecialisation\u003e skills) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.skills \u003d new HashSet\u003c\u003e(skills);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public Set\u003cSpecialisation\u003e getSkills() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.skills;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Checks if a given Specialisation is in the current skills set."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param specialisation specialisation to check for."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return true if Specialisation is in the set, false otherwise"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean contains(Specialisation specialisation) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.skills.contains(specialisation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Checks if a given Specialisation is in the current skills set by first"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * converting the string to Specialisation object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param specialisation string to check for."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return true if Specialisation Enum of the string specialisation is in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * the set, false otherwise"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean contains(String specialisation) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!Specialisation.isValidSpecialisation(specialisation)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Specialisation specialisationEnum \u003d Specialisation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseString(specialisation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.skills.contains(specialisationEnum);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void addSpecialisation(Specialisation specialisation) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.skills.add(specialisation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Check if another set of skills is a subset of the current set of skills"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean containsAll(Collection\u003cSpecialisation\u003e other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.skills.containsAll(other);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        for (Specialisation specialisation : this.skills) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            stringBuilder.append(specialisation.name());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            stringBuilder.append(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!(other instanceof Skills)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.skills.equals(((Skills) other).getSkills());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Lookuz": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Specialisation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Class that represents a specialisation for a HealthWorker object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public enum Specialisation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    GENERAL_PRACTICE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    CARDIOLOGY,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    ENDOCRINOLOGY,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    NEUROLOGY,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    ORTHOPAEDIC,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    PAEDIATRIC,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    GYNAECOLOGY,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    UROLOGY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    PATHOLOGY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    HAEMATOLOGY,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    PHYSIOTHERAPY,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    OCCUPATIONAL_THERAPY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    ANAESTHESIOLOGY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d getMessageConstraints();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Displays a list of available specialisations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return String describing all available specialisations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static String getSpecialisationList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        for (Specialisation specialisation : Specialisation.values()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            stringBuilder.append(specialisation.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Checks if a given input string matches any of the available"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Specialisations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param input string to check for valid Specialisation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return true if the input string has a matching Specialisation, else"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * false."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static boolean isValidSpecialisation(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            Specialisation.valueOf(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        } catch (IllegalArgumentException | NullPointerException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns the corresponding matching Specialisation given an input String"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param input string to match Specialisations."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return Specialisation matching the given string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static Specialisation parseString(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return Specialisation.valueOf(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns an Optional containing the matching Specialisation to the substring if any, else an empty Optional"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @param input the substring to match against the Specialisation names"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return Optional containing the matching Specialisation, else an empty Optional"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static Optional\u003cSpecialisation\u003e getSpecialisation (String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        for (Specialisation specialisation : Specialisation.values()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            if (specialisation.name().toLowerCase().contains(input.toLowerCase())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                return Optional.of(specialisation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Formulates the String representing the valid specialisations and"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return String containing the valid specialisations to be added."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static String getMessageConstraints() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        stringBuilder.append(\"Valid specialisations: \\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        stringBuilder.append(getSpecialisationList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.request.RequestStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * Contains utility methods for populating {@code RequestBook} and {@code HealthWorkerBook}with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static HealthWorker[] getSampleHealthWorkers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return new HealthWorker[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            new HealthWorker(new Name(\"Alex Tan\"), new Nric(\"T1234567J\"), new Phone(\"98765432\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                        new Organization(\"SGH\"), getSkillsFromString(\"PATHOLOGY\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            new HealthWorker(new Name(\"Betty Chua\"), new Nric(\"T5857367J\"), new Phone(\"98875432\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                        new Organization(\"SGH\"), getSkillsFromString(\"GYNAECOLOGY\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            new HealthWorker(new Name(\"Charles Anderson\"), new Nric(\"S5856787J\"), new Phone(\"91234432\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        new Organization(\"NUH\"), getSkillsFromString(\"GENERAL_PRACTICE\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            new HealthWorker(new Name(\"John Peterson\"), new Nric(\"T2334567J\"), new Phone(\"90987432\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                        new Organization(\"SGH\"), getSkillsFromString(\"UROLOGY\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static ReadOnlyHealthWorkerBook getSampleHealthWorkerBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorkerBook sampleHwb \u003d new HealthWorkerBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (HealthWorker sampleHealthworker : getSampleHealthWorkers()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            sampleHwb.addHealthWorker(sampleHealthworker);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return sampleHwb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static Request[] getSampleRequests() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return new Request[] {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            new Request(new Name(\"Angie Lim\"), new Nric(\"S9875432L\"), new Phone(\"91665831\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        new Address(\"39 Upper Boon Keng Road, #07-45\"), new RequestDate(\"10-04-2019 10:00:00\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                        getConditionSet(\"Palliative\"), new RequestStatus(\"PENDING\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            new Request(new Name(\"Benson Tan\"), new Nric(\"S9878932L\"), new Phone(\"84561267\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        new Address(\"14, Bishan Ave 2, #11-90\"), new RequestDate(\"05-04-2019 15:00:00\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        getConditionSet(\"Palliative\"), new RequestStatus(\"COMPLETED\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            new Request(new Name(\"Rajuratnam\"), new Nric(\"S8016757C\"), new Phone(\"81654488\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    new Address(\"108, McNair Road, #09-65\"), new RequestDate(\"01-03-2019 08:00:00\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    getConditionSet(\"Diabetic\", \"Kidney Dialysis\"), new RequestStatus(\"COMPLETED\"))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static ReadOnlyRequestBook getSampleRequestBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        RequestBook sampleRb \u003d new RequestBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (Request sampleRequest : getSampleRequests()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            sampleRb.addRequest(sampleRequest);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return sampleRb;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a Condition set containing the list of strings given."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param strings the conditions in String form."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @return A set of conditions made from the strings."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cCondition\u003e getConditionSet(String... strings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Condition::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns a Specialisation from a set of strings"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static Skills getSkillsFromString(String... strings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HashSet\u003cSpecialisation\u003e specialisations \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (String string: strings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            specialisations.add(Specialisation.parseString(string));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return new Skills(specialisations);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jing1324": 52,
      "huichun66": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/HealthWorkerBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * Represents a storage for {@link seedu.address.model.HealthWorkerBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public interface HealthWorkerBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Path getHealthWorkerBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns HealthWorkerBook data as a {@link ReadOnlyHealthWorkerBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Optional\u003cReadOnlyHealthWorkerBook\u003e readHealthWorkerBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @see #getHealthWorkerBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Optional\u003cReadOnlyHealthWorkerBook\u003e readHealthWorkerBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Saves the given {@link ReadOnlyHealthWorkerBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param healthWorkerBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @see #saveHealthWorkerBook(ReadOnlyHealthWorkerBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCondition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Condition}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedCondition {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String conditionName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedCondition} with the given {@code conditionName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedCondition(String conditionName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.conditionName \u003d conditionName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Condition} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedCondition(Condition source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        conditionName \u003d source.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getConditionName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return conditionName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Condition} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted condition."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Condition toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Condition.isValidConditionName(conditionName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new IllegalValueException(Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Condition(conditionName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "huichun66": 1,
      "Lookuz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedHealthWorker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link HealthWorker}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedHealthWorker extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String organization;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String skills;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedHealthWorker} with the given person details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedHealthWorker(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                   @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                                   @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                                   @JsonProperty(\"organization\") String organisation,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                                   @JsonProperty(\"skills\") String skills) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        super(name, phone, nric);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.organization \u003d organisation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.skills \u003d skills;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code HealthWorker} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedHealthWorker(HealthWorker source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.organization \u003d source.getOrganization().getOrgName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.skills \u003d source.getSkills().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code HealthWorker} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted HealthWorker."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public HealthWorker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (organization \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    Organization.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!Organization.isValidOrgName(organization)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                    Organization.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        final Organization modelOrganisation \u003d new Organization(organization);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (skills \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Skills.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cSpecialisation\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] skillsArr \u003d this.skills.split(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String skill : skillsArr) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Specialisation spec \u003d Specialisation.parseString(skill);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            set.add(spec);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Skills modelSkills \u003d new Skills(set);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new HealthWorker(modelName, modelNric, modelPhone, modelOrganisation, modelSkills);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "jing1324": 8,
      "Lookuz": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    protected final String phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    protected final String nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                             @JsonProperty(\"nric\") String nric) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        nric \u003d source.getNric().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new Person(modelName, modelNric, modelPhone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "jing1324": 10,
      "Lookuz": 2,
      "huichun66": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRequest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Request}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedRequest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Request\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String requestDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final String conditions;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String requestStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String healthWorker;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedRequest(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"requestDate\") String requestDate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                              @JsonProperty(\"conditions\") String conditions,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"requestStatus\") String requestStatus,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"healthWorker\") String healthWorker) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d requestDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.conditions \u003d conditions;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d requestStatus;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d healthWorker;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Converts a given {@code Request} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedRequest(Request source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.nric \u003d source.getNric().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d source.getRequestDate().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d source.getRequestStatus().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.conditions \u003d source.getConditions().stream().map(Condition::toString)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        System.out.println(this.conditions);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d source.getHealthStaff();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Request} object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Request toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (requestDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    RequestDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!RequestDate.isValidDate(requestDate)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new IllegalValueException(RequestDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        final RequestDate modelrequestDate \u003d new RequestDate(this.requestDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (requestStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    RequestStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!RequestStatus.isValidStatus(requestStatus)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(RequestStatus.MESSAGE_STATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        final RequestStatus modelrequestStatus \u003d new RequestStatus(this.requestStatus);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cCondition\u003e modelConditions \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        String[] conditionsArr \u003d this.conditions.split(\" \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (String condition : conditionsArr) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            Condition conditionToAdd \u003d new Condition(condition);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            modelConditions.add(conditionToAdd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (healthWorker \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Request(modelName, modelNric, modelPhone, modelAddress, modelrequestDate,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    modelConditions, modelrequestStatus);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Request(modelName, modelNric, modelPhone, modelAddress, modelrequestDate,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                modelConditions, modelrequestStatus, healthWorker);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d \"Unable to parse\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d JsonUtil.toJsonString(this);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JsonProcessingException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 148,
      "jing1324": 9,
      "huichun66": 8,
      "Lookuz": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonHealthWorkerBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * A class to access HealthWorkerBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class JsonHealthWorkerBookStorage implements HealthWorkerBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonHealthWorkerBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public JsonHealthWorkerBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public Path getHealthWorkerBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public Optional\u003cReadOnlyHealthWorkerBook\u003e readHealthWorkerBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return readHealthWorkerBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Similar to {@link #readHealthWorkerBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public Optional\u003cReadOnlyHealthWorkerBook\u003e readHealthWorkerBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Optional\u003cJsonSerializableHealthWorkerBook\u003e jsonHealthWorkerBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                filePath, JsonSerializableHealthWorkerBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (!jsonHealthWorkerBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            return Optional.of(jsonHealthWorkerBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        saveHealthWorkerBook(healthWorkerBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Similar to {@link #saveHealthWorkerBook(ReadOnlyHealthWorkerBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        requireNonNull(healthWorkerBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableHealthWorkerBook(healthWorkerBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRequestBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * A class to access RequestBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonRequestBookStorage implements RequestBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRequestBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonRequestBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getRequestBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyRequestBook\u003e readRequestBook() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return readRequestBook(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Similar to {@link #readRequestBook()}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyRequestBook\u003e readRequestBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableRequestBook\u003e jsonRequestBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableRequestBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonRequestBook.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonRequestBook.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRequestBook(ReadOnlyRequestBook requestBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveRequestBook(requestBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveRequestBook(ReadOnlyRequestBook)}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRequestBook(ReadOnlyRequestBook requestBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(requestBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRequestBook(requestBook), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "jing1324": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableHealthWorkerBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * An Immutable HealthWorkerBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "@JsonRootName(value \u003d \"healthWorkerBook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "class JsonSerializableHealthWorkerBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_HEALTHWORKER \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            \"HealthWorkers list contains duplicate healthWorker(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final List\u003cJsonAdaptedHealthWorker\u003e healthWorkers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Constructs a {@code JsonSerializableHealthWorkerBook} with the given healthWorkers."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public JsonSerializableHealthWorkerBook(@JsonProperty(\"healthWorkers\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                                                        List\u003cJsonAdaptedHealthWorker\u003e healthWorkers) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.healthWorkers.addAll(healthWorkers);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Converts a given {@code ReadOnlyHealthWorkerBook} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableHealthWorkerBook}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public JsonSerializableHealthWorkerBook(ReadOnlyHealthWorkerBook source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        healthWorkers.addAll(source.getHealthWorkerList().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                .map(JsonAdaptedHealthWorker::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Converts this address book into the model\u0027s {@code HealthWorkerBook} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public HealthWorkerBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorkerBook healthWorkerBook \u003d new HealthWorkerBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (JsonAdaptedHealthWorker jsonAdaptedHealthWorker : healthWorkers) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            HealthWorker healthWorker \u003d jsonAdaptedHealthWorker.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            if (healthWorkerBook.hasHealthWorker(healthWorker)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_HEALTHWORKER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            healthWorkerBook.addHealthWorker(healthWorker);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return healthWorkerBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 66,
      "Lookuz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRequestBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * An Immutable RequestBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"requestbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableRequestBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REQUEST \u003d \"Request list contains duplicate \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"request(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedRequest\u003e requests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Constructs a {@code JsonSerializableRequestBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableRequestBook(@JsonProperty(\"requests\") List\u003cJsonAdaptedRequest\u003e requests) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requests.addAll(requests);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Converts a given {@code ReadOnlyRequestBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRequestBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableRequestBook(ReadOnlyRequestBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requests.addAll(source.getRequestList().stream().map(JsonAdaptedRequest::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Converts this address book into the model\u0027s {@code RequestBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        RequestBook requestBook \u003d new RequestBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedRequest jsonAdaptedRequest : requests) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Request request \u003d jsonAdaptedRequest.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (requestBook.hasRequest(request)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REQUEST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            requestBook.addRequest(request);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return requestBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "jing1324": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public interface Storage extends UserPrefsStorage,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        RequestBookStorage, HealthWorkerBookStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Path getHealthWorkerBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Path getRequestBookFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Optional\u003cReadOnlyRequestBook\u003e readRequestBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    Optional\u003cReadOnlyHealthWorkerBook\u003e readHealthWorkerBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    void saveRequestBook(ReadOnlyRequestBook requestBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "jing1324": 15,
      "Lookuz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * Manages storage of Books data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private RequestBookStorage requestBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private HealthWorkerBookStorage healthWorkerBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                          RequestBookStorage requestBookStorage, HealthWorkerBookStorage healthWorkerBookStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestBookStorage \u003d requestBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.healthWorkerBookStorage \u003d healthWorkerBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RequestBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getRequestBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return requestBookStorage.getRequestBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyRequestBook\u003e readRequestBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return readRequestBook(requestBookStorage.getRequestBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyRequestBook\u003e readRequestBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return requestBookStorage.readRequestBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRequestBook(ReadOnlyRequestBook requestBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        saveRequestBook(requestBook, requestBookStorage.getRequestBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRequestBook(ReadOnlyRequestBook readOnlyRequestBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBookStorage.saveRequestBook(readOnlyRequestBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HealthWorkerBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public Path getHealthWorkerBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return healthWorkerBookStorage.getHealthWorkerBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public Optional\u003cReadOnlyHealthWorkerBook\u003e readHealthWorkerBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return readHealthWorkerBook(healthWorkerBookStorage.getHealthWorkerBookFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public Optional\u003cReadOnlyHealthWorkerBook\u003e readHealthWorkerBook(Path filePath)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return healthWorkerBookStorage.readHealthWorkerBook(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        saveHealthWorkerBook(healthWorkerBook, healthWorkerBookStorage.getHealthWorkerBookFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        healthWorkerBookStorage.saveHealthWorkerBook(healthWorkerBook, filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "jing1324": 36,
      "Lookuz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompleteTextField.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * This is a custom UI control that inherits from the TextField class,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * with auto-complete functionality. It aims to show users the type of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * commands they can type in the command text field."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class AutoCompleteTextField extends TextField {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final SortedSet\u003cString\u003e suggestions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private ContextMenu autocompleteBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public AutoCompleteTextField() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        suggestions \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        autocompleteBox \u003d new ContextMenu();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        textProperty().addListener((observable, s1, s2) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            setStyleToDefault();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (getText().length() !\u003d 0 \u0026\u0026 suggestions.size() \u003e 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                Iterator iterator \u003d suggestions.iterator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                LinkedList\u003cString\u003e searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    String suggestion \u003d iterator.next().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    if (suggestion.startsWith(getText())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        searchResult.add(suggestion);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                buildContextMenu(searchResult);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                if (!autocompleteBox.isShowing()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    autocompleteBox.show(AutoCompleteTextField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                autocompleteBox.hide();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Get the existing set of autocomplete suggestions."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @return The existing autocomplete suggestions."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public SortedSet\u003cString\u003e getSuggestions() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return this.suggestions;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Populate the entry set with the given search results. Display is limited to 10 entries, for performance."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @param searchResult The set of matching strings."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void buildContextMenu(List\u003cString\u003e searchResult) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // Only show max 10 entries in the autocompletion box"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        int maxEntries \u003d 10;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        int count \u003d Math.min(searchResult.size(), maxEntries);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            final String result \u003d searchResult.get(i);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Label label \u003d new Label(result);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(label, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            item.setOnAction(new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                public void handle(ActionEvent actionEvent) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    setText(result);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    positionCaret(result.length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    autocompleteBox.hide();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        autocompleteBox.getItems().clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        autocompleteBox.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.commons.core.Commands;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private AutoCompleteTextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.commandTextField.getSuggestions().addAll(Commands.getAllCommands());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (styleClass.contains(AutoCompleteTextField.ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        styleClass.add(AutoCompleteTextField.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "huichun66": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HealthWorkerCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * An UI component that displays a simple card info of a {@code HealthWorker},"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * displaying its specialisation, as well as its availability."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class HealthWorkerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String FXML \u003d \"HealthWorkerListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public final HealthWorker worker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private BorderPane borderPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private VBox healthWorkerInfo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Label organisation;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private FlowPane specialisations;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public HealthWorkerCard(HealthWorker worker, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.worker \u003d worker;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.name.setText(worker.getName().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.organisation.setText(\"(\" + worker.getOrganization().toString() + \")\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.phone.setText(worker.getPhone().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.worker.getSkills().getSkills().forEach(s -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            specialisations.getChildren().add(new Label(s.toString().toLowerCase())));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (!(other instanceof HealthWorkerCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorkerCard card \u003d (HealthWorkerCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return name.getText().equals(card.name.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u0026\u0026 organisation.getText().equals(card.organisation.getText());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "huichun66": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HealthWorkerListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * The HealthWorkerList Panel of the App."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Responsible for constructing the health worker list panel via its individual"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * {@code HealthWorker} cards and handling event logic."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class HealthWorkerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String FXML \u003d \"HealthWorkerListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HealthWorkerListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private ListView\u003cHealthWorker\u003e healthWorkerListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public HealthWorkerListPanel(ObservableList\u003cHealthWorker\u003e healthWorkerList,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                                 ObservableValue\u003cHealthWorker\u003e selectedHealthWorker,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                                 Consumer\u003cHealthWorker\u003e onSelectedHealthWorkerChange) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        healthWorkerListView.setItems(healthWorkerList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        healthWorkerListView.setCellFactory(listView -\u003e new HealthWorkerListPanel.HealthWorkerListCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        healthWorkerListView.getSelectionModel()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                .selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    logger.fine(\"Selection in health worker list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    onSelectedHealthWorkerChange.accept(newValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        selectedHealthWorker.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            logger.fine(\"Selected health worker changed to: \" + newValue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected health worker,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (Objects.equals(healthWorkerListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                healthWorkerListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                logger.info(\"NEW HEALTH WORKER\" + newValue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                int index \u003d healthWorkerListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                healthWorkerListView.scrollTo(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                healthWorkerListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code HealthWorker} using a {@code HealthWorkerCard}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    class HealthWorkerListCell extends ListCell\u003cHealthWorker\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        protected void updateItem(HealthWorker worker, boolean empty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            super.updateItem(worker, empty);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (empty || worker \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                setGraphic(new HealthWorkerCard(worker, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 8,
      "huichun66": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InfoPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.io.BufferedInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * The Info Panel of the App."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Responsible for displaying the request details when selected."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Map is rendered via URL request to gothere.sg."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * For more info, visit https://gothere.sg/api/maps/staticmaps.html."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class InfoPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final URL STYLESHEET \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"WhiteTheme.css\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final URL FA_STYLESHEET \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FA_FILE_FOLDER + \"css/all.min.css\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String FXML \u003d \"InfoPanel.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private WebView webView;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public InfoPanel(ObservableValue\u003cRequest\u003e selectedRequest) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // Attaches a listener that displays the request details when selected."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        selectedRequest.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            logger.info(\"InfoPanel triggered on request selection.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Request request \u003d selectedRequest.getValue();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            String htmlContent \u003d generateHtml(request);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            loadContent(htmlContent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Loads a default HTML file that displays the welcome message and starter tips."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Loads a normal web page."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Platform.runLater(() -\u003e webView.getEngine().load(url));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Loads the given HTML content directly into the web engine."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @param htmlContent"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void loadContent(String htmlContent) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Platform.runLater(() -\u003e webView.getEngine().loadContent(htmlContent));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Generates the entire HTML structure via this method."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Takes in a {@code request} object and the StringBuilder appends its properties."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @param request"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @return a string of HTML content"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String generateHtml(Request request) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String name \u003d request.getName().toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String nric \u003d request.getNric().toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String phone \u003d request.getPhone().toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String address \u003d request.getAddress().toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String conditions \u003d request.getConditions().stream().map(Condition::toString).collect("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String healthStaff \u003d request.getHealthStaff();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String date \u003d request.getRequestDate().getFormattedDate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String status \u003d request.getRequestStatus().toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String street \u003d request.getAddress().toStreetNameOnly();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String url \u003d constructMapUrl(street);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        //logger.info(street);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        StringBuilder htmlBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003clink href\u003d\\\"\" + STYLESHEET + \"\\\"\" + \" rel\u003d\\\"stylesheet\\\"/\u003e\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003clink href\u003d\\\"\" + FA_STYLESHEET + \"\\\"\" + \" rel\u003d\\\"stylesheet\\\"/\u003e\u003c/head\u003e\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003cbody class\u003d\\\"request-details\\\"\u003e\u003c/br\u003e\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-user\\\"\u003e\u003c/i\u003e Request Patient: \" + name + \"\u003c/br\u003e\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-id-card\\\"\u003e\u003c/i\u003e Patient NRIC: \" + nric + \"\u003c/br\u003e\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-phone\\\"\u003e\u003c/i\u003e Patient Contact: \" + phone + \"\u003c/br\u003e\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-map-marker-alt\\\"\u003e\u003c/i\u003e Patient Address: \" + address + \"\u003c/br\u003e\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-notes-medical\\\"\u003e\u003c/i\u003e Patient Conditions: \" + conditions + \"\u003c/br\u003e\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (request.getHealthStaff() !\u003d null) { // show staff name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-user-nurse\\\"\u003e\u003c/i\u003e Assigned Staff: \" + healthStaff + \"\u003c/br\u003e\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-user-nurse\\\"\u003e\u003c/i\u003e Assigned Staff: Not Assigned \u003c/br\u003e\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-calendar-alt\\\"\u003e\u003c/i\u003e Appt. Date: \" + date + \"\u003c/br\u003e\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (status \u003d\u003d \"PENDING\") {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-times\\\"\u003e\u003c/i\u003e Request Status: \" + status + \"\u003c/br\u003e\u003c/br\u003e\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } else { // if ongoing or completed"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            htmlBuilder.append(\"\u003ci class\u003d\\\"fas fa-check\\\"\u003e\u003c/i\u003e Request Status: \" + status + \"\u003c/br\u003e\u003c/br\u003e\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            htmlBuilder.append(getEncodedImage(url));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            htmlBuilder.append(\"Unable to view address location in map.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        htmlBuilder.append(\"\u003c/body\u003e\u003c/html\u003e\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return htmlBuilder.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Constructs the URL for accessing the static map."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Takes in an {@code address} string and extracts only the street details."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @param address"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @return a url string to access the map"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private String constructMapUrl(String address) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        StringBuilder urlBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        address \u003d address.replaceAll(\"\\\\s\", \"%20\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        urlBuilder.append(\"https://gothere.sg/maps/staticmap?center\u003d%22\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        urlBuilder.append(address + \"%22\u0026zoom\u003d16\u0026size\u003d400x200\u0026markers\u003d%22\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        urlBuilder.append(address + \"%22,orange\u0026sensor\u003dfalse\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        //logger.info(urlBuilder.toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return urlBuilder.toString();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * This method opens a {@code HTTPURLConnection} object by supplying in the url."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Sets the request method as \"GET\" and retrieves the {@code BufferedInputStream} object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * from the connection, then encodes the bytes to a string to display in the HTML content."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Reference: https://dzone.com/articles/how-to-implement-get-and-post-request-through-simp"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @return a base64 representation of an image"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private String getEncodedImage(String url) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        URL urlForGetRequest \u003d new URL(url);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        byte[] imageBytes \u003d new byte[0];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            HttpURLConnection connection \u003d (HttpURLConnection) urlForGetRequest.openConnection();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            connection.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            int responseCode \u003d connection.getResponseCode();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (responseCode \u003d\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                BufferedInputStream bis \u003d new BufferedInputStream(connection.getInputStream());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                //logger.info(\"AVAILABLE BYTES: \" + bis.available());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                if (bis.available() !\u003d 0) { // if there are bytes to read from InputStream"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    for (byte[] byteArray \u003d new byte[bis.available()];"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                         bis.read(byteArray) !\u003d -1; ) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        byte[] temp \u003d new byte[imageBytes.length + byteArray.length];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        System.arraycopy(imageBytes, 0, temp, 0, imageBytes.length);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        System.arraycopy(byteArray, 0, temp, imageBytes.length, byteArray.length);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        imageBytes \u003d temp;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    return \"Unable to view address location in map.\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new IOException(io.getMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return \"\u003cimg src\u003d\u0027data:image/png;base64,\" + Base64.getEncoder().encodeToString(imageBytes) + \"\u0027 /\u003e\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 199
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    // Independent UI parts residing in this UI container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private RequestListPanel requestListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private InfoPanel infoPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private HealthWorkerListPanel healthWorkerListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private MenuItem feedbackMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private StackPane requestListPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private StackPane displayInfoPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private StackPane healthWorkerListPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private StackPane statusBarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        setAccelerator(feedbackMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requestListPanel \u003d new RequestListPanel(logic.getFilteredRequestList(), logic.selectedRequestProperty(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                logic::setSelectedRequest);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requestListPlaceholder.getChildren().add(requestListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        infoPanel \u003d new InfoPanel(logic.selectedRequestProperty());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        displayInfoPlaceholder.getChildren().add(infoPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        healthWorkerListPanel \u003d new HealthWorkerListPanel(logic.getFilteredHealthWorkerList(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            logic.selectedHealthWorkerProperty(), logic::setSelectedHealthWorker);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        healthWorkerListPlaceholder.getChildren().add(healthWorkerListPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter(logic.getRequestBookFilePath(), logic.getHealthWorkerBookFilePath(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                logic.getRequestBook(), logic.getHealthWorkerBook());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        statusBarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Opens the feedback window."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void handleFeedback() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        //TODO implement feedback window logic"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 181,
      "huichun66": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RequestCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * An UI component that displays information of a {@code Request}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class RequestCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String FXML \u003d \"RequestListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public final Request request;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private FlowPane conditions;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public RequestCard(Request request, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.request \u003d request;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.name.setText(request.getName().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.nric.setText(\"(\" + request.getNric().toString() + \")\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.phone.setText(request.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.address.setText(request.getAddress().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.request.getConditions().forEach(c -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                this.conditions.getChildren().add(new Label(c.toString())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.date.setText(\"Appt. Date: \" + request.getRequestDate().getFormattedDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String requestStatus \u003d request.getRequestStatus().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.status.setText(requestStatus);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        switch (requestStatus) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        case \"PENDING\": // red light"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            this.status.setTextFill(Color.web(\"#F22613\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        case \"ONGOING\": // yellow light"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            this.status.setTextFill(Color.web(\"#FFA400\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        case \"COMPLETED\": // green light"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            this.status.setTextFill(Color.web(\"#00E640\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (!(other instanceof RequestCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        RequestCard card \u003d (RequestCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u0026\u0026 request.equals(card.request);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "huichun66": 43,
      "Lookuz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RequestListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * A panel containing the list of requests on the UI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class RequestListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String FXML \u003d \"RequestListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RequestListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private ListView\u003cRequest\u003e requestListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public RequestListPanel(ObservableList\u003cRequest\u003e requestList, ObservableValue\u003cRequest\u003e selectedRequest,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                Consumer\u003cRequest\u003e onSelectedRequestChange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requestListView.setItems(requestList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requestListView.setCellFactory(listView -\u003e new RequestListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requestListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            //logger.info(\"Selection in request list panel changed to: \" + newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            onSelectedRequestChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        selectedRequest.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected request,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (Objects.equals(requestListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                requestListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                int index \u003d requestListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                requestListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                requestListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Request} using a {@code RequestCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    class RequestListViewCell extends ListCell\u003cRequest\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        protected void updateItem(Request request, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            super.updateItem(request, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            if (empty || request \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                setGraphic(new RequestCard(request, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "huichun66": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String REQUEST_BOOK \u003d \"RequestBook\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String HEALTH_WORKER_BOOK \u003d \"HealthWorkerBook\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public StatusBarFooter(Path requestBookPath, Path healthWorkerBookPath, ReadOnlyRequestBook requestBook,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                           ReadOnlyHealthWorkerBook healthWorkerBook) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requestBook.addListener(observable -\u003e updateSyncStatus(REQUEST_BOOK, requestBookPath));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        healthWorkerBook.addListener(observable -\u003e updateSyncStatus(HEALTH_WORKER_BOOK, healthWorkerBookPath));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void updateSyncStatus(String bookType, Path path) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMMM YYYY, hh:mm a\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String lastUpdated \u003d formatter.format(new Date(now));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        switch(bookType) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        case REQUEST_BOOK:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            saveLocationStatus.setText(Paths.get(\".\").resolve(path).toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        case HEALTH_WORKER_BOOK:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            saveLocationStatus.setText(Paths.get(\".\").resolve(path).toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "huichun66": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/health_hub_32.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/WhiteTheme.css\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // Sets the application icon."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // Sets the stage size to be maximized."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "huichun66": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /** Resource folder where font-awesome files are stored. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String FA_FILE_FOLDER \u003d \"/font-awesome/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "huichun66": 3
    }
  },
  {
    "path": "src/main/resources/font-awesome/css/all.min.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Font Awesome Free 5.8.1 by @fontawesome - https://fontawesome.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".fa,.fab,.fal,.far,.fas{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-block;font-style:normal;font-variant:normal;text-rendering:auto;line-height:1}.fa-lg{font-size:1.33333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.fa-ul\u003eli{position:relative}.fa-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.fa-border{border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left{margin-right:.3em}.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right{margin-left:.3em}.fa-spin{animation:fa-spin 2s infinite linear}.fa-pulse{animation:fa-spin 1s infinite steps(8)}@keyframes fa-spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.fa-rotate-90{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d1)\";transform:rotate(90deg)}.fa-rotate-180{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d2)\";transform:rotate(180deg)}.fa-rotate-270{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d3)\";transform:rotate(270deg)}.fa-flip-horizontal{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d0, mirror\u003d1)\";transform:scaleX(-1)}.fa-flip-vertical{transform:scaleY(-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical,.fa-flip-vertical{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d2, mirror\u003d1)\"}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{transform:scale(-1)}:root .fa-flip-both,:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270{filter:none}.fa-stack{display:inline-block;height:2em;line-height:2em;position:relative;vertical-align:middle;width:2.5em}.fa-stack-1x,.fa-stack-2x{left:0;position:absolute;text-align:center;width:100%}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-500px:before{content:\"\\f26e\"}.fa-accessible-icon:before{content:\"\\f368\"}.fa-accusoft:before{content:\"\\f369\"}.fa-acquisitions-incorporated:before{content:\"\\f6af\"}.fa-ad:before{content:\"\\f641\"}.fa-address-book:before{content:\"\\f2b9\"}.fa-address-card:before{content:\"\\f2bb\"}.fa-adjust:before{content:\"\\f042\"}.fa-adn:before{content:\"\\f170\"}.fa-adobe:before{content:\"\\f778\"}.fa-adversal:before{content:\"\\f36a\"}.fa-affiliatetheme:before{content:\"\\f36b\"}.fa-air-freshener:before{content:\"\\f5d0\"}.fa-airbnb:before{content:\"\\f834\"}.fa-algolia:before{content:\"\\f36c\"}.fa-align-center:before{content:\"\\f037\"}.fa-align-justify:before{content:\"\\f039\"}.fa-align-left:before{content:\"\\f036\"}.fa-align-right:before{content:\"\\f038\"}.fa-alipay:before{content:\"\\f642\"}.fa-allergies:before{content:\"\\f461\"}.fa-amazon:before{content:\"\\f270\"}.fa-amazon-pay:before{content:\"\\f42c\"}.fa-ambulance:before{content:\"\\f0f9\"}.fa-american-sign-language-interpreting:before{content:\"\\f2a3\"}.fa-amilia:before{content:\"\\f36d\"}.fa-anchor:before{content:\"\\f13d\"}.fa-android:before{content:\"\\f17b\"}.fa-angellist:before{content:\"\\f209\"}.fa-angle-double-down:before{content:\"\\f103\"}.fa-angle-double-left:before{content:\"\\f100\"}.fa-angle-double-right:before{content:\"\\f101\"}.fa-angle-double-up:before{content:\"\\f102\"}.fa-angle-down:before{content:\"\\f107\"}.fa-angle-left:before{content:\"\\f104\"}.fa-angle-right:before{content:\"\\f105\"}.fa-angle-up:before{content:\"\\f106\"}.fa-angry:before{content:\"\\f556\"}.fa-angrycreative:before{content:\"\\f36e\"}.fa-angular:before{content:\"\\f420\"}.fa-ankh:before{content:\"\\f644\"}.fa-app-store:before{content:\"\\f36f\"}.fa-app-store-ios:before{content:\"\\f370\"}.fa-apper:before{content:\"\\f371\"}.fa-apple:before{content:\"\\f179\"}.fa-apple-alt:before{content:\"\\f5d1\"}.fa-apple-pay:before{content:\"\\f415\"}.fa-archive:before{content:\"\\f187\"}.fa-archway:before{content:\"\\f557\"}.fa-arrow-alt-circle-down:before{content:\"\\f358\"}.fa-arrow-alt-circle-left:before{content:\"\\f359\"}.fa-arrow-alt-circle-right:before{content:\"\\f35a\"}.fa-arrow-alt-circle-up:before{content:\"\\f35b\"}.fa-arrow-circle-down:before{content:\"\\f0ab\"}.fa-arrow-circle-left:before{content:\"\\f0a8\"}.fa-arrow-circle-right:before{content:\"\\f0a9\"}.fa-arrow-circle-up:before{content:\"\\f0aa\"}.fa-arrow-down:before{content:\"\\f063\"}.fa-arrow-left:before{content:\"\\f060\"}.fa-arrow-right:before{content:\"\\f061\"}.fa-arrow-up:before{content:\"\\f062\"}.fa-arrows-alt:before{content:\"\\f0b2\"}.fa-arrows-alt-h:before{content:\"\\f337\"}.fa-arrows-alt-v:before{content:\"\\f338\"}.fa-artstation:before{content:\"\\f77a\"}.fa-assistive-listening-systems:before{content:\"\\f2a2\"}.fa-asterisk:before{content:\"\\f069\"}.fa-asymmetrik:before{content:\"\\f372\"}.fa-at:before{content:\"\\f1fa\"}.fa-atlas:before{content:\"\\f558\"}.fa-atlassian:before{content:\"\\f77b\"}.fa-atom:before{content:\"\\f5d2\"}.fa-audible:before{content:\"\\f373\"}.fa-audio-description:before{content:\"\\f29e\"}.fa-autoprefixer:before{content:\"\\f41c\"}.fa-avianex:before{content:\"\\f374\"}.fa-aviato:before{content:\"\\f421\"}.fa-award:before{content:\"\\f559\"}.fa-aws:before{content:\"\\f375\"}.fa-baby:before{content:\"\\f77c\"}.fa-baby-carriage:before{content:\"\\f77d\"}.fa-backspace:before{content:\"\\f55a\"}.fa-backward:before{content:\"\\f04a\"}.fa-bacon:before{content:\"\\f7e5\"}.fa-balance-scale:before{content:\"\\f24e\"}.fa-ban:before{content:\"\\f05e\"}.fa-band-aid:before{content:\"\\f462\"}.fa-bandcamp:before{content:\"\\f2d5\"}.fa-barcode:before{content:\"\\f02a\"}.fa-bars:before{content:\"\\f0c9\"}.fa-baseball-ball:before{content:\"\\f433\"}.fa-basketball-ball:before{content:\"\\f434\"}.fa-bath:before{content:\"\\f2cd\"}.fa-battery-empty:before{content:\"\\f244\"}.fa-battery-full:before{content:\"\\f240\"}.fa-battery-half:before{content:\"\\f242\"}.fa-battery-quarter:before{content:\"\\f243\"}.fa-battery-three-quarters:before{content:\"\\f241\"}.fa-battle-net:before{content:\"\\f835\"}.fa-bed:before{content:\"\\f236\"}.fa-beer:before{content:\"\\f0fc\"}.fa-behance:before{content:\"\\f1b4\"}.fa-behance-square:before{content:\"\\f1b5\"}.fa-bell:before{content:\"\\f0f3\"}.fa-bell-slash:before{content:\"\\f1f6\"}.fa-bezier-curve:before{content:\"\\f55b\"}.fa-bible:before{content:\"\\f647\"}.fa-bicycle:before{content:\"\\f206\"}.fa-bimobject:before{content:\"\\f378\"}.fa-binoculars:before{content:\"\\f1e5\"}.fa-biohazard:before{content:\"\\f780\"}.fa-birthday-cake:before{content:\"\\f1fd\"}.fa-bitbucket:before{content:\"\\f171\"}.fa-bitcoin:before{content:\"\\f379\"}.fa-bity:before{content:\"\\f37a\"}.fa-black-tie:before{content:\"\\f27e\"}.fa-blackberry:before{content:\"\\f37b\"}.fa-blender:before{content:\"\\f517\"}.fa-blender-phone:before{content:\"\\f6b6\"}.fa-blind:before{content:\"\\f29d\"}.fa-blog:before{content:\"\\f781\"}.fa-blogger:before{content:\"\\f37c\"}.fa-blogger-b:before{content:\"\\f37d\"}.fa-bluetooth:before{content:\"\\f293\"}.fa-bluetooth-b:before{content:\"\\f294\"}.fa-bold:before{content:\"\\f032\"}.fa-bolt:before{content:\"\\f0e7\"}.fa-bomb:before{content:\"\\f1e2\"}.fa-bone:before{content:\"\\f5d7\"}.fa-bong:before{content:\"\\f55c\"}.fa-book:before{content:\"\\f02d\"}.fa-book-dead:before{content:\"\\f6b7\"}.fa-book-medical:before{content:\"\\f7e6\"}.fa-book-open:before{content:\"\\f518\"}.fa-book-reader:before{content:\"\\f5da\"}.fa-bookmark:before{content:\"\\f02e\"}.fa-bootstrap:before{content:\"\\f836\"}.fa-bowling-ball:before{content:\"\\f436\"}.fa-box:before{content:\"\\f466\"}.fa-box-open:before{content:\"\\f49e\"}.fa-boxes:before{content:\"\\f468\"}.fa-braille:before{content:\"\\f2a1\"}.fa-brain:before{content:\"\\f5dc\"}.fa-bread-slice:before{content:\"\\f7ec\"}.fa-briefcase:before{content:\"\\f0b1\"}.fa-briefcase-medical:before{content:\"\\f469\"}.fa-broadcast-tower:before{content:\"\\f519\"}.fa-broom:before{content:\"\\f51a\"}.fa-brush:before{content:\"\\f55d\"}.fa-btc:before{content:\"\\f15a\"}.fa-buffer:before{content:\"\\f837\"}.fa-bug:before{content:\"\\f188\"}.fa-building:before{content:\"\\f1ad\"}.fa-bullhorn:before{content:\"\\f0a1\"}.fa-bullseye:before{content:\"\\f140\"}.fa-burn:before{content:\"\\f46a\"}.fa-buromobelexperte:before{content:\"\\f37f\"}.fa-bus:before{content:\"\\f207\"}.fa-bus-alt:before{content:\"\\f55e\"}.fa-business-time:before{content:\"\\f64a\"}.fa-buysellads:before{content:\"\\f20d\"}.fa-calculator:before{content:\"\\f1ec\"}.fa-calendar:before{content:\"\\f133\"}.fa-calendar-alt:before{content:\"\\f073\"}.fa-calendar-check:before{content:\"\\f274\"}.fa-calendar-day:before{content:\"\\f783\"}.fa-calendar-minus:before{content:\"\\f272\"}.fa-calendar-plus:before{content:\"\\f271\"}.fa-calendar-times:before{content:\"\\f273\"}.fa-calendar-week:before{content:\"\\f784\"}.fa-camera:before{content:\"\\f030\"}.fa-camera-retro:before{content:\"\\f083\"}.fa-campground:before{content:\"\\f6bb\"}.fa-canadian-maple-leaf:before{content:\"\\f785\"}.fa-candy-cane:before{content:\"\\f786\"}.fa-cannabis:before{content:\"\\f55f\"}.fa-capsules:before{content:\"\\f46b\"}.fa-car:before{content:\"\\f1b9\"}.fa-car-alt:before{content:\"\\f5de\"}.fa-car-battery:before{content:\"\\f5df\"}.fa-car-crash:before{content:\"\\f5e1\"}.fa-car-side:before{content:\"\\f5e4\"}.fa-caret-down:before{content:\"\\f0d7\"}.fa-caret-left:before{content:\"\\f0d9\"}.fa-caret-right:before{content:\"\\f0da\"}.fa-caret-square-down:before{content:\"\\f150\"}.fa-caret-square-left:before{content:\"\\f191\"}.fa-caret-square-right:before{content:\"\\f152\"}.fa-caret-square-up:before{content:\"\\f151\"}.fa-caret-up:before{content:\"\\f0d8\"}.fa-carrot:before{content:\"\\f787\"}.fa-cart-arrow-down:before{content:\"\\f218\"}.fa-cart-plus:before{content:\"\\f217\"}.fa-cash-register:before{content:\"\\f788\"}.fa-cat:before{content:\"\\f6be\"}.fa-cc-amazon-pay:before{content:\"\\f42d\"}.fa-cc-amex:before{content:\"\\f1f3\"}.fa-cc-apple-pay:before{content:\"\\f416\"}.fa-cc-diners-club:before{content:\"\\f24c\"}.fa-cc-discover:before{content:\"\\f1f2\"}.fa-cc-jcb:before{content:\"\\f24b\"}.fa-cc-mastercard:before{content:\"\\f1f1\"}.fa-cc-paypal:before{content:\"\\f1f4\"}.fa-cc-stripe:before{content:\"\\f1f5\"}.fa-cc-visa:before{content:\"\\f1f0\"}.fa-centercode:before{content:\"\\f380\"}.fa-centos:before{content:\"\\f789\"}.fa-certificate:before{content:\"\\f0a3\"}.fa-chair:before{content:\"\\f6c0\"}.fa-chalkboard:before{content:\"\\f51b\"}.fa-chalkboard-teacher:before{content:\"\\f51c\"}.fa-charging-station:before{content:\"\\f5e7\"}.fa-chart-area:before{content:\"\\f1fe\"}.fa-chart-bar:before{content:\"\\f080\"}.fa-chart-line:before{content:\"\\f201\"}.fa-chart-pie:before{content:\"\\f200\"}.fa-check:before{content:\"\\f00c\"}.fa-check-circle:before{content:\"\\f058\"}.fa-check-double:before{content:\"\\f560\"}.fa-check-square:before{content:\"\\f14a\"}.fa-cheese:before{content:\"\\f7ef\"}.fa-chess:before{content:\"\\f439\"}.fa-chess-bishop:before{content:\"\\f43a\"}.fa-chess-board:before{content:\"\\f43c\"}.fa-chess-king:before{content:\"\\f43f\"}.fa-chess-knight:before{content:\"\\f441\"}.fa-chess-pawn:before{content:\"\\f443\"}.fa-chess-queen:before{content:\"\\f445\"}.fa-chess-rook:before{content:\"\\f447\"}.fa-chevron-circle-down:before{content:\"\\f13a\"}.fa-chevron-circle-left:before{content:\"\\f137\"}.fa-chevron-circle-right:before{content:\"\\f138\"}.fa-chevron-circle-up:before{content:\"\\f139\"}.fa-chevron-down:before{content:\"\\f078\"}.fa-chevron-left:before{content:\"\\f053\"}.fa-chevron-right:before{content:\"\\f054\"}.fa-chevron-up:before{content:\"\\f077\"}.fa-child:before{content:\"\\f1ae\"}.fa-chrome:before{content:\"\\f268\"}.fa-chromecast:before{content:\"\\f838\"}.fa-church:before{content:\"\\f51d\"}.fa-circle:before{content:\"\\f111\"}.fa-circle-notch:before{content:\"\\f1ce\"}.fa-city:before{content:\"\\f64f\"}.fa-clinic-medical:before{content:\"\\f7f2\"}.fa-clipboard:before{content:\"\\f328\"}.fa-clipboard-check:before{content:\"\\f46c\"}.fa-clipboard-list:before{content:\"\\f46d\"}.fa-clock:before{content:\"\\f017\"}.fa-clone:before{content:\"\\f24d\"}.fa-closed-captioning:before{content:\"\\f20a\"}.fa-cloud:before{content:\"\\f0c2\"}.fa-cloud-download-alt:before{content:\"\\f381\"}.fa-cloud-meatball:before{content:\"\\f73b\"}.fa-cloud-moon:before{content:\"\\f6c3\"}.fa-cloud-moon-rain:before{content:\"\\f73c\"}.fa-cloud-rain:before{content:\"\\f73d\"}.fa-cloud-showers-heavy:before{content:\"\\f740\"}.fa-cloud-sun:before{content:\"\\f6c4\"}.fa-cloud-sun-rain:before{content:\"\\f743\"}.fa-cloud-upload-alt:before{content:\"\\f382\"}.fa-cloudscale:before{content:\"\\f383\"}.fa-cloudsmith:before{content:\"\\f384\"}.fa-cloudversify:before{content:\"\\f385\"}.fa-cocktail:before{content:\"\\f561\"}.fa-code:before{content:\"\\f121\"}.fa-code-branch:before{content:\"\\f126\"}.fa-codepen:before{content:\"\\f1cb\"}.fa-codiepie:before{content:\"\\f284\"}.fa-coffee:before{content:\"\\f0f4\"}.fa-cog:before{content:\"\\f013\"}.fa-cogs:before{content:\"\\f085\"}.fa-coins:before{content:\"\\f51e\"}.fa-columns:before{content:\"\\f0db\"}.fa-comment:before{content:\"\\f075\"}.fa-comment-alt:before{content:\"\\f27a\"}.fa-comment-dollar:before{content:\"\\f651\"}.fa-comment-dots:before{content:\"\\f4ad\"}.fa-comment-medical:before{content:\"\\f7f5\"}.fa-comment-slash:before{content:\"\\f4b3\"}.fa-comments:before{content:\"\\f086\"}.fa-comments-dollar:before{content:\"\\f653\"}.fa-compact-disc:before{content:\"\\f51f\"}.fa-compass:before{content:\"\\f14e\"}.fa-compress:before{content:\"\\f066\"}.fa-compress-arrows-alt:before{content:\"\\f78c\"}.fa-concierge-bell:before{content:\"\\f562\"}.fa-confluence:before{content:\"\\f78d\"}.fa-connectdevelop:before{content:\"\\f20e\"}.fa-contao:before{content:\"\\f26d\"}.fa-cookie:before{content:\"\\f563\"}.fa-cookie-bite:before{content:\"\\f564\"}.fa-copy:before{content:\"\\f0c5\"}.fa-copyright:before{content:\"\\f1f9\"}.fa-couch:before{content:\"\\f4b8\"}.fa-cpanel:before{content:\"\\f388\"}.fa-creative-commons:before{content:\"\\f25e\"}.fa-creative-commons-by:before{content:\"\\f4e7\"}.fa-creative-commons-nc:before{content:\"\\f4e8\"}.fa-creative-commons-nc-eu:before{content:\"\\f4e9\"}.fa-creative-commons-nc-jp:before{content:\"\\f4ea\"}.fa-creative-commons-nd:before{content:\"\\f4eb\"}.fa-creative-commons-pd:before{content:\"\\f4ec\"}.fa-creative-commons-pd-alt:before{content:\"\\f4ed\"}.fa-creative-commons-remix:before{content:\"\\f4ee\"}.fa-creative-commons-sa:before{content:\"\\f4ef\"}.fa-creative-commons-sampling:before{content:\"\\f4f0\"}.fa-creative-commons-sampling-plus:before{content:\"\\f4f1\"}.fa-creative-commons-share:before{content:\"\\f4f2\"}.fa-creative-commons-zero:before{content:\"\\f4f3\"}.fa-credit-card:before{content:\"\\f09d\"}.fa-critical-role:before{content:\"\\f6c9\"}.fa-crop:before{content:\"\\f125\"}.fa-crop-alt:before{content:\"\\f565\"}.fa-cross:before{content:\"\\f654\"}.fa-crosshairs:before{content:\"\\f05b\"}.fa-crow:before{content:\"\\f520\"}.fa-crown:before{content:\"\\f521\"}.fa-crutch:before{content:\"\\f7f7\"}.fa-css3:before{content:\"\\f13c\"}.fa-css3-alt:before{content:\"\\f38b\"}.fa-cube:before{content:\"\\f1b2\"}.fa-cubes:before{content:\"\\f1b3\"}.fa-cut:before{content:\"\\f0c4\"}.fa-cuttlefish:before{content:\"\\f38c\"}.fa-d-and-d:before{content:\"\\f38d\"}.fa-d-and-d-beyond:before{content:\"\\f6ca\"}.fa-dashcube:before{content:\"\\f210\"}.fa-database:before{content:\"\\f1c0\"}.fa-deaf:before{content:\"\\f2a4\"}.fa-delicious:before{content:\"\\f1a5\"}.fa-democrat:before{content:\"\\f747\"}.fa-deploydog:before{content:\"\\f38e\"}.fa-deskpro:before{content:\"\\f38f\"}.fa-desktop:before{content:\"\\f108\"}.fa-dev:before{content:\"\\f6cc\"}.fa-deviantart:before{content:\"\\f1bd\"}.fa-dharmachakra:before{content:\"\\f655\"}.fa-dhl:before{content:\"\\f790\"}.fa-diagnoses:before{content:\"\\f470\"}.fa-diaspora:before{content:\"\\f791\"}.fa-dice:before{content:\"\\f522\"}.fa-dice-d20:before{content:\"\\f6cf\"}.fa-dice-d6:before{content:\"\\f6d1\"}.fa-dice-five:before{content:\"\\f523\"}.fa-dice-four:before{content:\"\\f524\"}.fa-dice-one:before{content:\"\\f525\"}.fa-dice-six:before{content:\"\\f526\"}.fa-dice-three:before{content:\"\\f527\"}.fa-dice-two:before{content:\"\\f528\"}.fa-digg:before{content:\"\\f1a6\"}.fa-digital-ocean:before{content:\"\\f391\"}.fa-digital-tachograph:before{content:\"\\f566\"}.fa-directions:before{content:\"\\f5eb\"}.fa-discord:before{content:\"\\f392\"}.fa-discourse:before{content:\"\\f393\"}.fa-divide:before{content:\"\\f529\"}.fa-dizzy:before{content:\"\\f567\"}.fa-dna:before{content:\"\\f471\"}.fa-dochub:before{content:\"\\f394\"}.fa-docker:before{content:\"\\f395\"}.fa-dog:before{content:\"\\f6d3\"}.fa-dollar-sign:before{content:\"\\f155\"}.fa-dolly:before{content:\"\\f472\"}.fa-dolly-flatbed:before{content:\"\\f474\"}.fa-donate:before{content:\"\\f4b9\"}.fa-door-closed:before{content:\"\\f52a\"}.fa-door-open:before{content:\"\\f52b\"}.fa-dot-circle:before{content:\"\\f192\"}.fa-dove:before{content:\"\\f4ba\"}.fa-download:before{content:\"\\f019\"}.fa-draft2digital:before{content:\"\\f396\"}.fa-drafting-compass:before{content:\"\\f568\"}.fa-dragon:before{content:\"\\f6d5\"}.fa-draw-polygon:before{content:\"\\f5ee\"}.fa-dribbble:before{content:\"\\f17d\"}.fa-dribbble-square:before{content:\"\\f397\"}.fa-dropbox:before{content:\"\\f16b\"}.fa-drum:before{content:\"\\f569\"}.fa-drum-steelpan:before{content:\"\\f56a\"}.fa-drumstick-bite:before{content:\"\\f6d7\"}.fa-drupal:before{content:\"\\f1a9\"}.fa-dumbbell:before{content:\"\\f44b\"}.fa-dumpster:before{content:\"\\f793\"}.fa-dumpster-fire:before{content:\"\\f794\"}.fa-dungeon:before{content:\"\\f6d9\"}.fa-dyalog:before{content:\"\\f399\"}.fa-earlybirds:before{content:\"\\f39a\"}.fa-ebay:before{content:\"\\f4f4\"}.fa-edge:before{content:\"\\f282\"}.fa-edit:before{content:\"\\f044\"}.fa-egg:before{content:\"\\f7fb\"}.fa-eject:before{content:\"\\f052\"}.fa-elementor:before{content:\"\\f430\"}.fa-ellipsis-h:before{content:\"\\f141\"}.fa-ellipsis-v:before{content:\"\\f142\"}.fa-ello:before{content:\"\\f5f1\"}.fa-ember:before{content:\"\\f423\"}.fa-empire:before{content:\"\\f1d1\"}.fa-envelope:before{content:\"\\f0e0\"}.fa-envelope-open:before{content:\"\\f2b6\"}.fa-envelope-open-text:before{content:\"\\f658\"}.fa-envelope-square:before{content:\"\\f199\"}.fa-envira:before{content:\"\\f299\"}.fa-equals:before{content:\"\\f52c\"}.fa-eraser:before{content:\"\\f12d\"}.fa-erlang:before{content:\"\\f39d\"}.fa-ethereum:before{content:\"\\f42e\"}.fa-ethernet:before{content:\"\\f796\"}.fa-etsy:before{content:\"\\f2d7\"}.fa-euro-sign:before{content:\"\\f153\"}.fa-evernote:before{content:\"\\f839\"}.fa-exchange-alt:before{content:\"\\f362\"}.fa-exclamation:before{content:\"\\f12a\"}.fa-exclamation-circle:before{content:\"\\f06a\"}.fa-exclamation-triangle:before{content:\"\\f071\"}.fa-expand:before{content:\"\\f065\"}.fa-expand-arrows-alt:before{content:\"\\f31e\"}.fa-expeditedssl:before{content:\"\\f23e\"}.fa-external-link-alt:before{content:\"\\f35d\"}.fa-external-link-square-alt:before{content:\"\\f360\"}.fa-eye:before{content:\"\\f06e\"}.fa-eye-dropper:before{content:\"\\f1fb\"}.fa-eye-slash:before{content:\"\\f070\"}.fa-facebook:before{content:\"\\f09a\"}.fa-facebook-f:before{content:\"\\f39e\"}.fa-facebook-messenger:before{content:\"\\f39f\"}.fa-facebook-square:before{content:\"\\f082\"}.fa-fantasy-flight-games:before{content:\"\\f6dc\"}.fa-fast-backward:before{content:\"\\f049\"}.fa-fast-forward:before{content:\"\\f050\"}.fa-fax:before{content:\"\\f1ac\"}.fa-feather:before{content:\"\\f52d\"}.fa-feather-alt:before{content:\"\\f56b\"}.fa-fedex:before{content:\"\\f797\"}.fa-fedora:before{content:\"\\f798\"}.fa-female:before{content:\"\\f182\"}.fa-fighter-jet:before{content:\"\\f0fb\"}.fa-figma:before{content:\"\\f799\"}.fa-file:before{content:\"\\f15b\"}.fa-file-alt:before{content:\"\\f15c\"}.fa-file-archive:before{content:\"\\f1c6\"}.fa-file-audio:before{content:\"\\f1c7\"}.fa-file-code:before{content:\"\\f1c9\"}.fa-file-contract:before{content:\"\\f56c\"}.fa-file-csv:before{content:\"\\f6dd\"}.fa-file-download:before{content:\"\\f56d\"}.fa-file-excel:before{content:\"\\f1c3\"}.fa-file-export:before{content:\"\\f56e\"}.fa-file-image:before{content:\"\\f1c5\"}.fa-file-import:before{content:\"\\f56f\"}.fa-file-invoice:before{content:\"\\f570\"}.fa-file-invoice-dollar:before{content:\"\\f571\"}.fa-file-medical:before{content:\"\\f477\"}.fa-file-medical-alt:before{content:\"\\f478\"}.fa-file-pdf:before{content:\"\\f1c1\"}.fa-file-powerpoint:before{content:\"\\f1c4\"}.fa-file-prescription:before{content:\"\\f572\"}.fa-file-signature:before{content:\"\\f573\"}.fa-file-upload:before{content:\"\\f574\"}.fa-file-video:before{content:\"\\f1c8\"}.fa-file-word:before{content:\"\\f1c2\"}.fa-fill:before{content:\"\\f575\"}.fa-fill-drip:before{content:\"\\f576\"}.fa-film:before{content:\"\\f008\"}.fa-filter:before{content:\"\\f0b0\"}.fa-fingerprint:before{content:\"\\f577\"}.fa-fire:before{content:\"\\f06d\"}.fa-fire-alt:before{content:\"\\f7e4\"}.fa-fire-extinguisher:before{content:\"\\f134\"}.fa-firefox:before{content:\"\\f269\"}.fa-first-aid:before{content:\"\\f479\"}.fa-first-order:before{content:\"\\f2b0\"}.fa-first-order-alt:before{content:\"\\f50a\"}.fa-firstdraft:before{content:\"\\f3a1\"}.fa-fish:before{content:\"\\f578\"}.fa-fist-raised:before{content:\"\\f6de\"}.fa-flag:before{content:\"\\f024\"}.fa-flag-checkered:before{content:\"\\f11e\"}.fa-flag-usa:before{content:\"\\f74d\"}.fa-flask:before{content:\"\\f0c3\"}.fa-flickr:before{content:\"\\f16e\"}.fa-flipboard:before{content:\"\\f44d\"}.fa-flushed:before{content:\"\\f579\"}.fa-fly:before{content:\"\\f417\"}.fa-folder:before{content:\"\\f07b\"}.fa-folder-minus:before{content:\"\\f65d\"}.fa-folder-open:before{content:\"\\f07c\"}.fa-folder-plus:before{content:\"\\f65e\"}.fa-font:before{content:\"\\f031\"}.fa-font-awesome:before{content:\"\\f2b4\"}.fa-font-awesome-alt:before{content:\"\\f35c\"}.fa-font-awesome-flag:before{content:\"\\f425\"}.fa-font-awesome-logo-full:before{content:\"\\f4e6\"}.fa-fonticons:before{content:\"\\f280\"}.fa-fonticons-fi:before{content:\"\\f3a2\"}.fa-football-ball:before{content:\"\\f44e\"}.fa-fort-awesome:before{content:\"\\f286\"}.fa-fort-awesome-alt:before{content:\"\\f3a3\"}.fa-forumbee:before{content:\"\\f211\"}.fa-forward:before{content:\"\\f04e\"}.fa-foursquare:before{content:\"\\f180\"}.fa-free-code-camp:before{content:\"\\f2c5\"}.fa-freebsd:before{content:\"\\f3a4\"}.fa-frog:before{content:\"\\f52e\"}.fa-frown:before{content:\"\\f119\"}.fa-frown-open:before{content:\"\\f57a\"}.fa-fulcrum:before{content:\"\\f50b\"}.fa-funnel-dollar:before{content:\"\\f662\"}.fa-futbol:before{content:\"\\f1e3\"}.fa-galactic-republic:before{content:\"\\f50c\"}.fa-galactic-senate:before{content:\"\\f50d\"}.fa-gamepad:before{content:\"\\f11b\"}.fa-gas-pump:before{content:\"\\f52f\"}.fa-gavel:before{content:\"\\f0e3\"}.fa-gem:before{content:\"\\f3a5\"}.fa-genderless:before{content:\"\\f22d\"}.fa-get-pocket:before{content:\"\\f265\"}.fa-gg:before{content:\"\\f260\"}.fa-gg-circle:before{content:\"\\f261\"}.fa-ghost:before{content:\"\\f6e2\"}.fa-gift:before{content:\"\\f06b\"}.fa-gifts:before{content:\"\\f79c\"}.fa-git:before{content:\"\\f1d3\"}.fa-git-square:before{content:\"\\f1d2\"}.fa-github:before{content:\"\\f09b\"}.fa-github-alt:before{content:\"\\f113\"}.fa-github-square:before{content:\"\\f092\"}.fa-gitkraken:before{content:\"\\f3a6\"}.fa-gitlab:before{content:\"\\f296\"}.fa-gitter:before{content:\"\\f426\"}.fa-glass-cheers:before{content:\"\\f79f\"}.fa-glass-martini:before{content:\"\\f000\"}.fa-glass-martini-alt:before{content:\"\\f57b\"}.fa-glass-whiskey:before{content:\"\\f7a0\"}.fa-glasses:before{content:\"\\f530\"}.fa-glide:before{content:\"\\f2a5\"}.fa-glide-g:before{content:\"\\f2a6\"}.fa-globe:before{content:\"\\f0ac\"}.fa-globe-africa:before{content:\"\\f57c\"}.fa-globe-americas:before{content:\"\\f57d\"}.fa-globe-asia:before{content:\"\\f57e\"}.fa-globe-europe:before{content:\"\\f7a2\"}.fa-gofore:before{content:\"\\f3a7\"}.fa-golf-ball:before{content:\"\\f450\"}.fa-goodreads:before{content:\"\\f3a8\"}.fa-goodreads-g:before{content:\"\\f3a9\"}.fa-google:before{content:\"\\f1a0\"}.fa-google-drive:before{content:\"\\f3aa\"}.fa-google-play:before{content:\"\\f3ab\"}.fa-google-plus:before{content:\"\\f2b3\"}.fa-google-plus-g:before{content:\"\\f0d5\"}.fa-google-plus-square:before{content:\"\\f0d4\"}.fa-google-wallet:before{content:\"\\f1ee\"}.fa-gopuram:before{content:\"\\f664\"}.fa-graduation-cap:before{content:\"\\f19d\"}.fa-gratipay:before{content:\"\\f184\"}.fa-grav:before{content:\"\\f2d6\"}.fa-greater-than:before{content:\"\\f531\"}.fa-greater-than-equal:before{content:\"\\f532\"}.fa-grimace:before{content:\"\\f57f\"}.fa-grin:before{content:\"\\f580\"}.fa-grin-alt:before{content:\"\\f581\"}.fa-grin-beam:before{content:\"\\f582\"}.fa-grin-beam-sweat:before{content:\"\\f583\"}.fa-grin-hearts:before{content:\"\\f584\"}.fa-grin-squint:before{content:\"\\f585\"}.fa-grin-squint-tears:before{content:\"\\f586\"}.fa-grin-stars:before{content:\"\\f587\"}.fa-grin-tears:before{content:\"\\f588\"}.fa-grin-tongue:before{content:\"\\f589\"}.fa-grin-tongue-squint:before{content:\"\\f58a\"}.fa-grin-tongue-wink:before{content:\"\\f58b\"}.fa-grin-wink:before{content:\"\\f58c\"}.fa-grip-horizontal:before{content:\"\\f58d\"}.fa-grip-lines:before{content:\"\\f7a4\"}.fa-grip-lines-vertical:before{content:\"\\f7a5\"}.fa-grip-vertical:before{content:\"\\f58e\"}.fa-gripfire:before{content:\"\\f3ac\"}.fa-grunt:before{content:\"\\f3ad\"}.fa-guitar:before{content:\"\\f7a6\"}.fa-gulp:before{content:\"\\f3ae\"}.fa-h-square:before{content:\"\\f0fd\"}.fa-hacker-news:before{content:\"\\f1d4\"}.fa-hacker-news-square:before{content:\"\\f3af\"}.fa-hackerrank:before{content:\"\\f5f7\"}.fa-hamburger:before{content:\"\\f805\"}.fa-hammer:before{content:\"\\f6e3\"}.fa-hamsa:before{content:\"\\f665\"}.fa-hand-holding:before{content:\"\\f4bd\"}.fa-hand-holding-heart:before{content:\"\\f4be\"}.fa-hand-holding-usd:before{content:\"\\f4c0\"}.fa-hand-lizard:before{content:\"\\f258\"}.fa-hand-middle-finger:before{content:\"\\f806\"}.fa-hand-paper:before{content:\"\\f256\"}.fa-hand-peace:before{content:\"\\f25b\"}.fa-hand-point-down:before{content:\"\\f0a7\"}.fa-hand-point-left:before{content:\"\\f0a5\"}.fa-hand-point-right:before{content:\"\\f0a4\"}.fa-hand-point-up:before{content:\"\\f0a6\"}.fa-hand-pointer:before{content:\"\\f25a\"}.fa-hand-rock:before{content:\"\\f255\"}.fa-hand-scissors:before{content:\"\\f257\"}.fa-hand-spock:before{content:\"\\f259\"}.fa-hands:before{content:\"\\f4c2\"}.fa-hands-helping:before{content:\"\\f4c4\"}.fa-handshake:before{content:\"\\f2b5\"}.fa-hanukiah:before{content:\"\\f6e6\"}.fa-hard-hat:before{content:\"\\f807\"}.fa-hashtag:before{content:\"\\f292\"}.fa-hat-wizard:before{content:\"\\f6e8\"}.fa-haykal:before{content:\"\\f666\"}.fa-hdd:before{content:\"\\f0a0\"}.fa-heading:before{content:\"\\f1dc\"}.fa-headphones:before{content:\"\\f025\"}.fa-headphones-alt:before{content:\"\\f58f\"}.fa-headset:before{content:\"\\f590\"}.fa-heart:before{content:\"\\f004\"}.fa-heart-broken:before{content:\"\\f7a9\"}.fa-heartbeat:before{content:\"\\f21e\"}.fa-helicopter:before{content:\"\\f533\"}.fa-highlighter:before{content:\"\\f591\"}.fa-hiking:before{content:\"\\f6ec\"}.fa-hippo:before{content:\"\\f6ed\"}.fa-hips:before{content:\"\\f452\"}.fa-hire-a-helper:before{content:\"\\f3b0\"}.fa-history:before{content:\"\\f1da\"}.fa-hockey-puck:before{content:\"\\f453\"}.fa-holly-berry:before{content:\"\\f7aa\"}.fa-home:before{content:\"\\f015\"}.fa-hooli:before{content:\"\\f427\"}.fa-hornbill:before{content:\"\\f592\"}.fa-horse:before{content:\"\\f6f0\"}.fa-horse-head:before{content:\"\\f7ab\"}.fa-hospital:before{content:\"\\f0f8\"}.fa-hospital-alt:before{content:\"\\f47d\"}.fa-hospital-symbol:before{content:\"\\f47e\"}.fa-hot-tub:before{content:\"\\f593\"}.fa-hotdog:before{content:\"\\f80f\"}.fa-hotel:before{content:\"\\f594\"}.fa-hotjar:before{content:\"\\f3b1\"}.fa-hourglass:before{content:\"\\f254\"}.fa-hourglass-end:before{content:\"\\f253\"}.fa-hourglass-half:before{content:\"\\f252\"}.fa-hourglass-start:before{content:\"\\f251\"}.fa-house-damage:before{content:\"\\f6f1\"}.fa-houzz:before{content:\"\\f27c\"}.fa-hryvnia:before{content:\"\\f6f2\"}.fa-html5:before{content:\"\\f13b\"}.fa-hubspot:before{content:\"\\f3b2\"}.fa-i-cursor:before{content:\"\\f246\"}.fa-ice-cream:before{content:\"\\f810\"}.fa-icicles:before{content:\"\\f7ad\"}.fa-id-badge:before{content:\"\\f2c1\"}.fa-id-card:before{content:\"\\f2c2\"}.fa-id-card-alt:before{content:\"\\f47f\"}.fa-igloo:before{content:\"\\f7ae\"}.fa-image:before{content:\"\\f03e\"}.fa-images:before{content:\"\\f302\"}.fa-imdb:before{content:\"\\f2d8\"}.fa-inbox:before{content:\"\\f01c\"}.fa-indent:before{content:\"\\f03c\"}.fa-industry:before{content:\"\\f275\"}.fa-infinity:before{content:\"\\f534\"}.fa-info:before{content:\"\\f129\"}.fa-info-circle:before{content:\"\\f05a\"}.fa-instagram:before{content:\"\\f16d\"}.fa-intercom:before{content:\"\\f7af\"}.fa-internet-explorer:before{content:\"\\f26b\"}.fa-invision:before{content:\"\\f7b0\"}.fa-ioxhost:before{content:\"\\f208\"}.fa-italic:before{content:\"\\f033\"}.fa-itch-io:before{content:\"\\f83a\"}.fa-itunes:before{content:\"\\f3b4\"}.fa-itunes-note:before{content:\"\\f3b5\"}.fa-java:before{content:\"\\f4e4\"}.fa-jedi:before{content:\"\\f669\"}.fa-jedi-order:before{content:\"\\f50e\"}.fa-jenkins:before{content:\"\\f3b6\"}.fa-jira:before{content:\"\\f7b1\"}.fa-joget:before{content:\"\\f3b7\"}.fa-joint:before{content:\"\\f595\"}.fa-joomla:before{content:\"\\f1aa\"}.fa-journal-whills:before{content:\"\\f66a\"}.fa-js:before{content:\"\\f3b8\"}.fa-js-square:before{content:\"\\f3b9\"}.fa-jsfiddle:before{content:\"\\f1cc\"}.fa-kaaba:before{content:\"\\f66b\"}.fa-kaggle:before{content:\"\\f5fa\"}.fa-key:before{content:\"\\f084\"}.fa-keybase:before{content:\"\\f4f5\"}.fa-keyboard:before{content:\"\\f11c\"}.fa-keycdn:before{content:\"\\f3ba\"}.fa-khanda:before{content:\"\\f66d\"}.fa-kickstarter:before{content:\"\\f3bb\"}.fa-kickstarter-k:before{content:\"\\f3bc\"}.fa-kiss:before{content:\"\\f596\"}.fa-kiss-beam:before{content:\"\\f597\"}.fa-kiss-wink-heart:before{content:\"\\f598\"}.fa-kiwi-bird:before{content:\"\\f535\"}.fa-korvue:before{content:\"\\f42f\"}.fa-landmark:before{content:\"\\f66f\"}.fa-language:before{content:\"\\f1ab\"}.fa-laptop:before{content:\"\\f109\"}.fa-laptop-code:before{content:\"\\f5fc\"}.fa-laptop-medical:before{content:\"\\f812\"}.fa-laravel:before{content:\"\\f3bd\"}.fa-lastfm:before{content:\"\\f202\"}.fa-lastfm-square:before{content:\"\\f203\"}.fa-laugh:before{content:\"\\f599\"}.fa-laugh-beam:before{content:\"\\f59a\"}.fa-laugh-squint:before{content:\"\\f59b\"}.fa-laugh-wink:before{content:\"\\f59c\"}.fa-layer-group:before{content:\"\\f5fd\"}.fa-leaf:before{content:\"\\f06c\"}.fa-leanpub:before{content:\"\\f212\"}.fa-lemon:before{content:\"\\f094\"}.fa-less:before{content:\"\\f41d\"}.fa-less-than:before{content:\"\\f536\"}.fa-less-than-equal:before{content:\"\\f537\"}.fa-level-down-alt:before{content:\"\\f3be\"}.fa-level-up-alt:before{content:\"\\f3bf\"}.fa-life-ring:before{content:\"\\f1cd\"}.fa-lightbulb:before{content:\"\\f0eb\"}.fa-line:before{content:\"\\f3c0\"}.fa-link:before{content:\"\\f0c1\"}.fa-linkedin:before{content:\"\\f08c\"}.fa-linkedin-in:before{content:\"\\f0e1\"}.fa-linode:before{content:\"\\f2b8\"}.fa-linux:before{content:\"\\f17c\"}.fa-lira-sign:before{content:\"\\f195\"}.fa-list:before{content:\"\\f03a\"}.fa-list-alt:before{content:\"\\f022\"}.fa-list-ol:before{content:\"\\f0cb\"}.fa-list-ul:before{content:\"\\f0ca\"}.fa-location-arrow:before{content:\"\\f124\"}.fa-lock:before{content:\"\\f023\"}.fa-lock-open:before{content:\"\\f3c1\"}.fa-long-arrow-alt-down:before{content:\"\\f309\"}.fa-long-arrow-alt-left:before{content:\"\\f30a\"}.fa-long-arrow-alt-right:before{content:\"\\f30b\"}.fa-long-arrow-alt-up:before{content:\"\\f30c\"}.fa-low-vision:before{content:\"\\f2a8\"}.fa-luggage-cart:before{content:\"\\f59d\"}.fa-lyft:before{content:\"\\f3c3\"}.fa-magento:before{content:\"\\f3c4\"}.fa-magic:before{content:\"\\f0d0\"}.fa-magnet:before{content:\"\\f076\"}.fa-mail-bulk:before{content:\"\\f674\"}.fa-mailchimp:before{content:\"\\f59e\"}.fa-male:before{content:\"\\f183\"}.fa-mandalorian:before{content:\"\\f50f\"}.fa-map:before{content:\"\\f279\"}.fa-map-marked:before{content:\"\\f59f\"}.fa-map-marked-alt:before{content:\"\\f5a0\"}.fa-map-marker:before{content:\"\\f041\"}.fa-map-marker-alt:before{content:\"\\f3c5\"}.fa-map-pin:before{content:\"\\f276\"}.fa-map-signs:before{content:\"\\f277\"}.fa-markdown:before{content:\"\\f60f\"}.fa-marker:before{content:\"\\f5a1\"}.fa-mars:before{content:\"\\f222\"}.fa-mars-double:before{content:\"\\f227\"}.fa-mars-stroke:before{content:\"\\f229\"}.fa-mars-stroke-h:before{content:\"\\f22b\"}.fa-mars-stroke-v:before{content:\"\\f22a\"}.fa-mask:before{content:\"\\f6fa\"}.fa-mastodon:before{content:\"\\f4f6\"}.fa-maxcdn:before{content:\"\\f136\"}.fa-medal:before{content:\"\\f5a2\"}.fa-medapps:before{content:\"\\f3c6\"}.fa-medium:before{content:\"\\f23a\"}.fa-medium-m:before{content:\"\\f3c7\"}.fa-medkit:before{content:\"\\f0fa\"}.fa-medrt:before{content:\"\\f3c8\"}.fa-meetup:before{content:\"\\f2e0\"}.fa-megaport:before{content:\"\\f5a3\"}.fa-meh:before{content:\"\\f11a\"}.fa-meh-blank:before{content:\"\\f5a4\"}.fa-meh-rolling-eyes:before{content:\"\\f5a5\"}.fa-memory:before{content:\"\\f538\"}.fa-mendeley:before{content:\"\\f7b3\"}.fa-menorah:before{content:\"\\f676\"}.fa-mercury:before{content:\"\\f223\"}.fa-meteor:before{content:\"\\f753\"}.fa-microchip:before{content:\"\\f2db\"}.fa-microphone:before{content:\"\\f130\"}.fa-microphone-alt:before{content:\"\\f3c9\"}.fa-microphone-alt-slash:before{content:\"\\f539\"}.fa-microphone-slash:before{content:\"\\f131\"}.fa-microscope:before{content:\"\\f610\"}.fa-microsoft:before{content:\"\\f3ca\"}.fa-minus:before{content:\"\\f068\"}.fa-minus-circle:before{content:\"\\f056\"}.fa-minus-square:before{content:\"\\f146\"}.fa-mitten:before{content:\"\\f7b5\"}.fa-mix:before{content:\"\\f3cb\"}.fa-mixcloud:before{content:\"\\f289\"}.fa-mizuni:before{content:\"\\f3cc\"}.fa-mobile:before{content:\"\\f10b\"}.fa-mobile-alt:before{content:\"\\f3cd\"}.fa-modx:before{content:\"\\f285\"}.fa-monero:before{content:\"\\f3d0\"}.fa-money-bill:before{content:\"\\f0d6\"}.fa-money-bill-alt:before{content:\"\\f3d1\"}.fa-money-bill-wave:before{content:\"\\f53a\"}.fa-money-bill-wave-alt:before{content:\"\\f53b\"}.fa-money-check:before{content:\"\\f53c\"}.fa-money-check-alt:before{content:\"\\f53d\"}.fa-monument:before{content:\"\\f5a6\"}.fa-moon:before{content:\"\\f186\"}.fa-mortar-pestle:before{content:\"\\f5a7\"}.fa-mosque:before{content:\"\\f678\"}.fa-motorcycle:before{content:\"\\f21c\"}.fa-mountain:before{content:\"\\f6fc\"}.fa-mouse-pointer:before{content:\"\\f245\"}.fa-mug-hot:before{content:\"\\f7b6\"}.fa-music:before{content:\"\\f001\"}.fa-napster:before{content:\"\\f3d2\"}.fa-neos:before{content:\"\\f612\"}.fa-network-wired:before{content:\"\\f6ff\"}.fa-neuter:before{content:\"\\f22c\"}.fa-newspaper:before{content:\"\\f1ea\"}.fa-nimblr:before{content:\"\\f5a8\"}.fa-nintendo-switch:before{content:\"\\f418\"}.fa-node:before{content:\"\\f419\"}.fa-node-js:before{content:\"\\f3d3\"}.fa-not-equal:before{content:\"\\f53e\"}.fa-notes-medical:before{content:\"\\f481\"}.fa-npm:before{content:\"\\f3d4\"}.fa-ns8:before{content:\"\\f3d5\"}.fa-nutritionix:before{content:\"\\f3d6\"}.fa-object-group:before{content:\"\\f247\"}.fa-object-ungroup:before{content:\"\\f248\"}.fa-odnoklassniki:before{content:\"\\f263\"}.fa-odnoklassniki-square:before{content:\"\\f264\"}.fa-oil-can:before{content:\"\\f613\"}.fa-old-republic:before{content:\"\\f510\"}.fa-om:before{content:\"\\f679\"}.fa-opencart:before{content:\"\\f23d\"}.fa-openid:before{content:\"\\f19b\"}.fa-opera:before{content:\"\\f26a\"}.fa-optin-monster:before{content:\"\\f23c\"}.fa-osi:before{content:\"\\f41a\"}.fa-otter:before{content:\"\\f700\"}.fa-outdent:before{content:\"\\f03b\"}.fa-page4:before{content:\"\\f3d7\"}.fa-pagelines:before{content:\"\\f18c\"}.fa-pager:before{content:\"\\f815\"}.fa-paint-brush:before{content:\"\\f1fc\"}.fa-paint-roller:before{content:\"\\f5aa\"}.fa-palette:before{content:\"\\f53f\"}.fa-palfed:before{content:\"\\f3d8\"}.fa-pallet:before{content:\"\\f482\"}.fa-paper-plane:before{content:\"\\f1d8\"}.fa-paperclip:before{content:\"\\f0c6\"}.fa-parachute-box:before{content:\"\\f4cd\"}.fa-paragraph:before{content:\"\\f1dd\"}.fa-parking:before{content:\"\\f540\"}.fa-passport:before{content:\"\\f5ab\"}.fa-pastafarianism:before{content:\"\\f67b\"}.fa-paste:before{content:\"\\f0ea\"}.fa-patreon:before{content:\"\\f3d9\"}.fa-pause:before{content:\"\\f04c\"}.fa-pause-circle:before{content:\"\\f28b\"}.fa-paw:before{content:\"\\f1b0\"}.fa-paypal:before{content:\"\\f1ed\"}.fa-peace:before{content:\"\\f67c\"}.fa-pen:before{content:\"\\f304\"}.fa-pen-alt:before{content:\"\\f305\"}.fa-pen-fancy:before{content:\"\\f5ac\"}.fa-pen-nib:before{content:\"\\f5ad\"}.fa-pen-square:before{content:\"\\f14b\"}.fa-pencil-alt:before{content:\"\\f303\"}.fa-pencil-ruler:before{content:\"\\f5ae\"}.fa-penny-arcade:before{content:\"\\f704\"}.fa-people-carry:before{content:\"\\f4ce\"}.fa-pepper-hot:before{content:\"\\f816\"}.fa-percent:before{content:\"\\f295\"}.fa-percentage:before{content:\"\\f541\"}.fa-periscope:before{content:\"\\f3da\"}.fa-person-booth:before{content:\"\\f756\"}.fa-phabricator:before{content:\"\\f3db\"}.fa-phoenix-framework:before{content:\"\\f3dc\"}.fa-phoenix-squadron:before{content:\"\\f511\"}.fa-phone:before{content:\"\\f095\"}.fa-phone-slash:before{content:\"\\f3dd\"}.fa-phone-square:before{content:\"\\f098\"}.fa-phone-volume:before{content:\"\\f2a0\"}.fa-php:before{content:\"\\f457\"}.fa-pied-piper:before{content:\"\\f2ae\"}.fa-pied-piper-alt:before{content:\"\\f1a8\"}.fa-pied-piper-hat:before{content:\"\\f4e5\"}.fa-pied-piper-pp:before{content:\"\\f1a7\"}.fa-piggy-bank:before{content:\"\\f4d3\"}.fa-pills:before{content:\"\\f484\"}.fa-pinterest:before{content:\"\\f0d2\"}.fa-pinterest-p:before{content:\"\\f231\"}.fa-pinterest-square:before{content:\"\\f0d3\"}.fa-pizza-slice:before{content:\"\\f818\"}.fa-place-of-worship:before{content:\"\\f67f\"}.fa-plane:before{content:\"\\f072\"}.fa-plane-arrival:before{content:\"\\f5af\"}.fa-plane-departure:before{content:\"\\f5b0\"}.fa-play:before{content:\"\\f04b\"}.fa-play-circle:before{content:\"\\f144\"}.fa-playstation:before{content:\"\\f3df\"}.fa-plug:before{content:\"\\f1e6\"}.fa-plus:before{content:\"\\f067\"}.fa-plus-circle:before{content:\"\\f055\"}.fa-plus-square:before{content:\"\\f0fe\"}.fa-podcast:before{content:\"\\f2ce\"}.fa-poll:before{content:\"\\f681\"}.fa-poll-h:before{content:\"\\f682\"}.fa-poo:before{content:\"\\f2fe\"}.fa-poo-storm:before{content:\"\\f75a\"}.fa-poop:before{content:\"\\f619\"}.fa-portrait:before{content:\"\\f3e0\"}.fa-pound-sign:before{content:\"\\f154\"}.fa-power-off:before{content:\"\\f011\"}.fa-pray:before{content:\"\\f683\"}.fa-praying-hands:before{content:\"\\f684\"}.fa-prescription:before{content:\"\\f5b1\"}.fa-prescription-bottle:before{content:\"\\f485\"}.fa-prescription-bottle-alt:before{content:\"\\f486\"}.fa-print:before{content:\"\\f02f\"}.fa-procedures:before{content:\"\\f487\"}.fa-product-hunt:before{content:\"\\f288\"}.fa-project-diagram:before{content:\"\\f542\"}.fa-pushed:before{content:\"\\f3e1\"}.fa-puzzle-piece:before{content:\"\\f12e\"}.fa-python:before{content:\"\\f3e2\"}.fa-qq:before{content:\"\\f1d6\"}.fa-qrcode:before{content:\"\\f029\"}.fa-question:before{content:\"\\f128\"}.fa-question-circle:before{content:\"\\f059\"}.fa-quidditch:before{content:\"\\f458\"}.fa-quinscape:before{content:\"\\f459\"}.fa-quora:before{content:\"\\f2c4\"}.fa-quote-left:before{content:\"\\f10d\"}.fa-quote-right:before{content:\"\\f10e\"}.fa-quran:before{content:\"\\f687\"}.fa-r-project:before{content:\"\\f4f7\"}.fa-radiation:before{content:\"\\f7b9\"}.fa-radiation-alt:before{content:\"\\f7ba\"}.fa-rainbow:before{content:\"\\f75b\"}.fa-random:before{content:\"\\f074\"}.fa-raspberry-pi:before{content:\"\\f7bb\"}.fa-ravelry:before{content:\"\\f2d9\"}.fa-react:before{content:\"\\f41b\"}.fa-reacteurope:before{content:\"\\f75d\"}.fa-readme:before{content:\"\\f4d5\"}.fa-rebel:before{content:\"\\f1d0\"}.fa-receipt:before{content:\"\\f543\"}.fa-recycle:before{content:\"\\f1b8\"}.fa-red-river:before{content:\"\\f3e3\"}.fa-reddit:before{content:\"\\f1a1\"}.fa-reddit-alien:before{content:\"\\f281\"}.fa-reddit-square:before{content:\"\\f1a2\"}.fa-redhat:before{content:\"\\f7bc\"}.fa-redo:before{content:\"\\f01e\"}.fa-redo-alt:before{content:\"\\f2f9\"}.fa-registered:before{content:\"\\f25d\"}.fa-renren:before{content:\"\\f18b\"}.fa-reply:before{content:\"\\f3e5\"}.fa-reply-all:before{content:\"\\f122\"}.fa-replyd:before{content:\"\\f3e6\"}.fa-republican:before{content:\"\\f75e\"}.fa-researchgate:before{content:\"\\f4f8\"}.fa-resolving:before{content:\"\\f3e7\"}.fa-restroom:before{content:\"\\f7bd\"}.fa-retweet:before{content:\"\\f079\"}.fa-rev:before{content:\"\\f5b2\"}.fa-ribbon:before{content:\"\\f4d6\"}.fa-ring:before{content:\"\\f70b\"}.fa-road:before{content:\"\\f018\"}.fa-robot:before{content:\"\\f544\"}.fa-rocket:before{content:\"\\f135\"}.fa-rocketchat:before{content:\"\\f3e8\"}.fa-rockrms:before{content:\"\\f3e9\"}.fa-route:before{content:\"\\f4d7\"}.fa-rss:before{content:\"\\f09e\"}.fa-rss-square:before{content:\"\\f143\"}.fa-ruble-sign:before{content:\"\\f158\"}.fa-ruler:before{content:\"\\f545\"}.fa-ruler-combined:before{content:\"\\f546\"}.fa-ruler-horizontal:before{content:\"\\f547\"}.fa-ruler-vertical:before{content:\"\\f548\"}.fa-running:before{content:\"\\f70c\"}.fa-rupee-sign:before{content:\"\\f156\"}.fa-sad-cry:before{content:\"\\f5b3\"}.fa-sad-tear:before{content:\"\\f5b4\"}.fa-safari:before{content:\"\\f267\"}.fa-salesforce:before{content:\"\\f83b\"}.fa-sass:before{content:\"\\f41e\"}.fa-satellite:before{content:\"\\f7bf\"}.fa-satellite-dish:before{content:\"\\f7c0\"}.fa-save:before{content:\"\\f0c7\"}.fa-schlix:before{content:\"\\f3ea\"}.fa-school:before{content:\"\\f549\"}.fa-screwdriver:before{content:\"\\f54a\"}.fa-scribd:before{content:\"\\f28a\"}.fa-scroll:before{content:\"\\f70e\"}.fa-sd-card:before{content:\"\\f7c2\"}.fa-search:before{content:\"\\f002\"}.fa-search-dollar:before{content:\"\\f688\"}.fa-search-location:before{content:\"\\f689\"}.fa-search-minus:before{content:\"\\f010\"}.fa-search-plus:before{content:\"\\f00e\"}.fa-searchengin:before{content:\"\\f3eb\"}.fa-seedling:before{content:\"\\f4d8\"}.fa-sellcast:before{content:\"\\f2da\"}.fa-sellsy:before{content:\"\\f213\"}.fa-server:before{content:\"\\f233\"}.fa-servicestack:before{content:\"\\f3ec\"}.fa-shapes:before{content:\"\\f61f\"}.fa-share:before{content:\"\\f064\"}.fa-share-alt:before{content:\"\\f1e0\"}.fa-share-alt-square:before{content:\"\\f1e1\"}.fa-share-square:before{content:\"\\f14d\"}.fa-shekel-sign:before{content:\"\\f20b\"}.fa-shield-alt:before{content:\"\\f3ed\"}.fa-ship:before{content:\"\\f21a\"}.fa-shipping-fast:before{content:\"\\f48b\"}.fa-shirtsinbulk:before{content:\"\\f214\"}.fa-shoe-prints:before{content:\"\\f54b\"}.fa-shopping-bag:before{content:\"\\f290\"}.fa-shopping-basket:before{content:\"\\f291\"}.fa-shopping-cart:before{content:\"\\f07a\"}.fa-shopware:before{content:\"\\f5b5\"}.fa-shower:before{content:\"\\f2cc\"}.fa-shuttle-van:before{content:\"\\f5b6\"}.fa-sign:before{content:\"\\f4d9\"}.fa-sign-in-alt:before{content:\"\\f2f6\"}.fa-sign-language:before{content:\"\\f2a7\"}.fa-sign-out-alt:before{content:\"\\f2f5\"}.fa-signal:before{content:\"\\f012\"}.fa-signature:before{content:\"\\f5b7\"}.fa-sim-card:before{content:\"\\f7c4\"}.fa-simplybuilt:before{content:\"\\f215\"}.fa-sistrix:before{content:\"\\f3ee\"}.fa-sitemap:before{content:\"\\f0e8\"}.fa-sith:before{content:\"\\f512\"}.fa-skating:before{content:\"\\f7c5\"}.fa-sketch:before{content:\"\\f7c6\"}.fa-skiing:before{content:\"\\f7c9\"}.fa-skiing-nordic:before{content:\"\\f7ca\"}.fa-skull:before{content:\"\\f54c\"}.fa-skull-crossbones:before{content:\"\\f714\"}.fa-skyatlas:before{content:\"\\f216\"}.fa-skype:before{content:\"\\f17e\"}.fa-slack:before{content:\"\\f198\"}.fa-slack-hash:before{content:\"\\f3ef\"}.fa-slash:before{content:\"\\f715\"}.fa-sleigh:before{content:\"\\f7cc\"}.fa-sliders-h:before{content:\"\\f1de\"}.fa-slideshare:before{content:\"\\f1e7\"}.fa-smile:before{content:\"\\f118\"}.fa-smile-beam:before{content:\"\\f5b8\"}.fa-smile-wink:before{content:\"\\f4da\"}.fa-smog:before{content:\"\\f75f\"}.fa-smoking:before{content:\"\\f48d\"}.fa-smoking-ban:before{content:\"\\f54d\"}.fa-sms:before{content:\"\\f7cd\"}.fa-snapchat:before{content:\"\\f2ab\"}.fa-snapchat-ghost:before{content:\"\\f2ac\"}.fa-snapchat-square:before{content:\"\\f2ad\"}.fa-snowboarding:before{content:\"\\f7ce\"}.fa-snowflake:before{content:\"\\f2dc\"}.fa-snowman:before{content:\"\\f7d0\"}.fa-snowplow:before{content:\"\\f7d2\"}.fa-socks:before{content:\"\\f696\"}.fa-solar-panel:before{content:\"\\f5ba\"}.fa-sort:before{content:\"\\f0dc\"}.fa-sort-alpha-down:before{content:\"\\f15d\"}.fa-sort-alpha-up:before{content:\"\\f15e\"}.fa-sort-amount-down:before{content:\"\\f160\"}.fa-sort-amount-up:before{content:\"\\f161\"}.fa-sort-down:before{content:\"\\f0dd\"}.fa-sort-numeric-down:before{content:\"\\f162\"}.fa-sort-numeric-up:before{content:\"\\f163\"}.fa-sort-up:before{content:\"\\f0de\"}.fa-soundcloud:before{content:\"\\f1be\"}.fa-sourcetree:before{content:\"\\f7d3\"}.fa-spa:before{content:\"\\f5bb\"}.fa-space-shuttle:before{content:\"\\f197\"}.fa-speakap:before{content:\"\\f3f3\"}.fa-speaker-deck:before{content:\"\\f83c\"}.fa-spider:before{content:\"\\f717\"}.fa-spinner:before{content:\"\\f110\"}.fa-splotch:before{content:\"\\f5bc\"}.fa-spotify:before{content:\"\\f1bc\"}.fa-spray-can:before{content:\"\\f5bd\"}.fa-square:before{content:\"\\f0c8\"}.fa-square-full:before{content:\"\\f45c\"}.fa-square-root-alt:before{content:\"\\f698\"}.fa-squarespace:before{content:\"\\f5be\"}.fa-stack-exchange:before{content:\"\\f18d\"}.fa-stack-overflow:before{content:\"\\f16c\"}.fa-stamp:before{content:\"\\f5bf\"}.fa-star:before{content:\"\\f005\"}.fa-star-and-crescent:before{content:\"\\f699\"}.fa-star-half:before{content:\"\\f089\"}.fa-star-half-alt:before{content:\"\\f5c0\"}.fa-star-of-david:before{content:\"\\f69a\"}.fa-star-of-life:before{content:\"\\f621\"}.fa-staylinked:before{content:\"\\f3f5\"}.fa-steam:before{content:\"\\f1b6\"}.fa-steam-square:before{content:\"\\f1b7\"}.fa-steam-symbol:before{content:\"\\f3f6\"}.fa-step-backward:before{content:\"\\f048\"}.fa-step-forward:before{content:\"\\f051\"}.fa-stethoscope:before{content:\"\\f0f1\"}.fa-sticker-mule:before{content:\"\\f3f7\"}.fa-sticky-note:before{content:\"\\f249\"}.fa-stop:before{content:\"\\f04d\"}.fa-stop-circle:before{content:\"\\f28d\"}.fa-stopwatch:before{content:\"\\f2f2\"}.fa-store:before{content:\"\\f54e\"}.fa-store-alt:before{content:\"\\f54f\"}.fa-strava:before{content:\"\\f428\"}.fa-stream:before{content:\"\\f550\"}.fa-street-view:before{content:\"\\f21d\"}.fa-strikethrough:before{content:\"\\f0cc\"}.fa-stripe:before{content:\"\\f429\"}.fa-stripe-s:before{content:\"\\f42a\"}.fa-stroopwafel:before{content:\"\\f551\"}.fa-studiovinari:before{content:\"\\f3f8\"}.fa-stumbleupon:before{content:\"\\f1a4\"}.fa-stumbleupon-circle:before{content:\"\\f1a3\"}.fa-subscript:before{content:\"\\f12c\"}.fa-subway:before{content:\"\\f239\"}.fa-suitcase:before{content:\"\\f0f2\"}.fa-suitcase-rolling:before{content:\"\\f5c1\"}.fa-sun:before{content:\"\\f185\"}.fa-superpowers:before{content:\"\\f2dd\"}.fa-superscript:before{content:\"\\f12b\"}.fa-supple:before{content:\"\\f3f9\"}.fa-surprise:before{content:\"\\f5c2\"}.fa-suse:before{content:\"\\f7d6\"}.fa-swatchbook:before{content:\"\\f5c3\"}.fa-swimmer:before{content:\"\\f5c4\"}.fa-swimming-pool:before{content:\"\\f5c5\"}.fa-symfony:before{content:\"\\f83d\"}.fa-synagogue:before{content:\"\\f69b\"}.fa-sync:before{content:\"\\f021\"}.fa-sync-alt:before{content:\"\\f2f1\"}.fa-syringe:before{content:\"\\f48e\"}.fa-table:before{content:\"\\f0ce\"}.fa-table-tennis:before{content:\"\\f45d\"}.fa-tablet:before{content:\"\\f10a\"}.fa-tablet-alt:before{content:\"\\f3fa\"}.fa-tablets:before{content:\"\\f490\"}.fa-tachometer-alt:before{content:\"\\f3fd\"}.fa-tag:before{content:\"\\f02b\"}.fa-tags:before{content:\"\\f02c\"}.fa-tape:before{content:\"\\f4db\"}.fa-tasks:before{content:\"\\f0ae\"}.fa-taxi:before{content:\"\\f1ba\"}.fa-teamspeak:before{content:\"\\f4f9\"}.fa-teeth:before{content:\"\\f62e\"}.fa-teeth-open:before{content:\"\\f62f\"}.fa-telegram:before{content:\"\\f2c6\"}.fa-telegram-plane:before{content:\"\\f3fe\"}.fa-temperature-high:before{content:\"\\f769\"}.fa-temperature-low:before{content:\"\\f76b\"}.fa-tencent-weibo:before{content:\"\\f1d5\"}.fa-tenge:before{content:\"\\f7d7\"}.fa-terminal:before{content:\"\\f120\"}.fa-text-height:before{content:\"\\f034\"}.fa-text-width:before{content:\"\\f035\"}.fa-th:before{content:\"\\f00a\"}.fa-th-large:before{content:\"\\f009\"}.fa-th-list:before{content:\"\\f00b\"}.fa-the-red-yeti:before{content:\"\\f69d\"}.fa-theater-masks:before{content:\"\\f630\"}.fa-themeco:before{content:\"\\f5c6\"}.fa-themeisle:before{content:\"\\f2b2\"}.fa-thermometer:before{content:\"\\f491\"}.fa-thermometer-empty:before{content:\"\\f2cb\"}.fa-thermometer-full:before{content:\"\\f2c7\"}.fa-thermometer-half:before{content:\"\\f2c9\"}.fa-thermometer-quarter:before{content:\"\\f2ca\"}.fa-thermometer-three-quarters:before{content:\"\\f2c8\"}.fa-think-peaks:before{content:\"\\f731\"}.fa-thumbs-down:before{content:\"\\f165\"}.fa-thumbs-up:before{content:\"\\f164\"}.fa-thumbtack:before{content:\"\\f08d\"}.fa-ticket-alt:before{content:\"\\f3ff\"}.fa-times:before{content:\"\\f00d\"}.fa-times-circle:before{content:\"\\f057\"}.fa-tint:before{content:\"\\f043\"}.fa-tint-slash:before{content:\"\\f5c7\"}.fa-tired:before{content:\"\\f5c8\"}.fa-toggle-off:before{content:\"\\f204\"}.fa-toggle-on:before{content:\"\\f205\"}.fa-toilet:before{content:\"\\f7d8\"}.fa-toilet-paper:before{content:\"\\f71e\"}.fa-toolbox:before{content:\"\\f552\"}.fa-tools:before{content:\"\\f7d9\"}.fa-tooth:before{content:\"\\f5c9\"}.fa-torah:before{content:\"\\f6a0\"}.fa-torii-gate:before{content:\"\\f6a1\"}.fa-tractor:before{content:\"\\f722\"}.fa-trade-federation:before{content:\"\\f513\"}.fa-trademark:before{content:\"\\f25c\"}.fa-traffic-light:before{content:\"\\f637\"}.fa-train:before{content:\"\\f238\"}.fa-tram:before{content:\"\\f7da\"}.fa-transgender:before{content:\"\\f224\"}.fa-transgender-alt:before{content:\"\\f225\"}.fa-trash:before{content:\"\\f1f8\"}.fa-trash-alt:before{content:\"\\f2ed\"}.fa-trash-restore:before{content:\"\\f829\"}.fa-trash-restore-alt:before{content:\"\\f82a\"}.fa-tree:before{content:\"\\f1bb\"}.fa-trello:before{content:\"\\f181\"}.fa-tripadvisor:before{content:\"\\f262\"}.fa-trophy:before{content:\"\\f091\"}.fa-truck:before{content:\"\\f0d1\"}.fa-truck-loading:before{content:\"\\f4de\"}.fa-truck-monster:before{content:\"\\f63b\"}.fa-truck-moving:before{content:\"\\f4df\"}.fa-truck-pickup:before{content:\"\\f63c\"}.fa-tshirt:before{content:\"\\f553\"}.fa-tty:before{content:\"\\f1e4\"}.fa-tumblr:before{content:\"\\f173\"}.fa-tumblr-square:before{content:\"\\f174\"}.fa-tv:before{content:\"\\f26c\"}.fa-twitch:before{content:\"\\f1e8\"}.fa-twitter:before{content:\"\\f099\"}.fa-twitter-square:before{content:\"\\f081\"}.fa-typo3:before{content:\"\\f42b\"}.fa-uber:before{content:\"\\f402\"}.fa-ubuntu:before{content:\"\\f7df\"}.fa-uikit:before{content:\"\\f403\"}.fa-umbrella:before{content:\"\\f0e9\"}.fa-umbrella-beach:before{content:\"\\f5ca\"}.fa-underline:before{content:\"\\f0cd\"}.fa-undo:before{content:\"\\f0e2\"}.fa-undo-alt:before{content:\"\\f2ea\"}.fa-uniregistry:before{content:\"\\f404\"}.fa-universal-access:before{content:\"\\f29a\"}.fa-university:before{content:\"\\f19c\"}.fa-unlink:before{content:\"\\f127\"}.fa-unlock:before{content:\"\\f09c\"}.fa-unlock-alt:before{content:\"\\f13e\"}.fa-untappd:before{content:\"\\f405\"}.fa-upload:before{content:\"\\f093\"}.fa-ups:before{content:\"\\f7e0\"}.fa-usb:before{content:\"\\f287\"}.fa-user:before{content:\"\\f007\"}.fa-user-alt:before{content:\"\\f406\"}.fa-user-alt-slash:before{content:\"\\f4fa\"}.fa-user-astronaut:before{content:\"\\f4fb\"}.fa-user-check:before{content:\"\\f4fc\"}.fa-user-circle:before{content:\"\\f2bd\"}.fa-user-clock:before{content:\"\\f4fd\"}.fa-user-cog:before{content:\"\\f4fe\"}.fa-user-edit:before{content:\"\\f4ff\"}.fa-user-friends:before{content:\"\\f500\"}.fa-user-graduate:before{content:\"\\f501\"}.fa-user-injured:before{content:\"\\f728\"}.fa-user-lock:before{content:\"\\f502\"}.fa-user-md:before{content:\"\\f0f0\"}.fa-user-minus:before{content:\"\\f503\"}.fa-user-ninja:before{content:\"\\f504\"}.fa-user-nurse:before{content:\"\\f82f\"}.fa-user-plus:before{content:\"\\f234\"}.fa-user-secret:before{content:\"\\f21b\"}.fa-user-shield:before{content:\"\\f505\"}.fa-user-slash:before{content:\"\\f506\"}.fa-user-tag:before{content:\"\\f507\"}.fa-user-tie:before{content:\"\\f508\"}.fa-user-times:before{content:\"\\f235\"}.fa-users:before{content:\"\\f0c0\"}.fa-users-cog:before{content:\"\\f509\"}.fa-usps:before{content:\"\\f7e1\"}.fa-ussunnah:before{content:\"\\f407\"}.fa-utensil-spoon:before{content:\"\\f2e5\"}.fa-utensils:before{content:\"\\f2e7\"}.fa-vaadin:before{content:\"\\f408\"}.fa-vector-square:before{content:\"\\f5cb\"}.fa-venus:before{content:\"\\f221\"}.fa-venus-double:before{content:\"\\f226\"}.fa-venus-mars:before{content:\"\\f228\"}.fa-viacoin:before{content:\"\\f237\"}.fa-viadeo:before{content:\"\\f2a9\"}.fa-viadeo-square:before{content:\"\\f2aa\"}.fa-vial:before{content:\"\\f492\"}.fa-vials:before{content:\"\\f493\"}.fa-viber:before{content:\"\\f409\"}.fa-video:before{content:\"\\f03d\"}.fa-video-slash:before{content:\"\\f4e2\"}.fa-vihara:before{content:\"\\f6a7\"}.fa-vimeo:before{content:\"\\f40a\"}.fa-vimeo-square:before{content:\"\\f194\"}.fa-vimeo-v:before{content:\"\\f27d\"}.fa-vine:before{content:\"\\f1ca\"}.fa-vk:before{content:\"\\f189\"}.fa-vnv:before{content:\"\\f40b\"}.fa-volleyball-ball:before{content:\"\\f45f\"}.fa-volume-down:before{content:\"\\f027\"}.fa-volume-mute:before{content:\"\\f6a9\"}.fa-volume-off:before{content:\"\\f026\"}.fa-volume-up:before{content:\"\\f028\"}.fa-vote-yea:before{content:\"\\f772\"}.fa-vr-cardboard:before{content:\"\\f729\"}.fa-vuejs:before{content:\"\\f41f\"}.fa-walking:before{content:\"\\f554\"}.fa-wallet:before{content:\"\\f555\"}.fa-warehouse:before{content:\"\\f494\"}.fa-water:before{content:\"\\f773\"}.fa-wave-square:before{content:\"\\f83e\"}.fa-waze:before{content:\"\\f83f\"}.fa-weebly:before{content:\"\\f5cc\"}.fa-weibo:before{content:\"\\f18a\"}.fa-weight:before{content:\"\\f496\"}.fa-weight-hanging:before{content:\"\\f5cd\"}.fa-weixin:before{content:\"\\f1d7\"}.fa-whatsapp:before{content:\"\\f232\"}.fa-whatsapp-square:before{content:\"\\f40c\"}.fa-wheelchair:before{content:\"\\f193\"}.fa-whmcs:before{content:\"\\f40d\"}.fa-wifi:before{content:\"\\f1eb\"}.fa-wikipedia-w:before{content:\"\\f266\"}.fa-wind:before{content:\"\\f72e\"}.fa-window-close:before{content:\"\\f410\"}.fa-window-maximize:before{content:\"\\f2d0\"}.fa-window-minimize:before{content:\"\\f2d1\"}.fa-window-restore:before{content:\"\\f2d2\"}.fa-windows:before{content:\"\\f17a\"}.fa-wine-bottle:before{content:\"\\f72f\"}.fa-wine-glass:before{content:\"\\f4e3\"}.fa-wine-glass-alt:before{content:\"\\f5ce\"}.fa-wix:before{content:\"\\f5cf\"}.fa-wizards-of-the-coast:before{content:\"\\f730\"}.fa-wolf-pack-battalion:before{content:\"\\f514\"}.fa-won-sign:before{content:\"\\f159\"}.fa-wordpress:before{content:\"\\f19a\"}.fa-wordpress-simple:before{content:\"\\f411\"}.fa-wpbeginner:before{content:\"\\f297\"}.fa-wpexplorer:before{content:\"\\f2de\"}.fa-wpforms:before{content:\"\\f298\"}.fa-wpressr:before{content:\"\\f3e4\"}.fa-wrench:before{content:\"\\f0ad\"}.fa-x-ray:before{content:\"\\f497\"}.fa-xbox:before{content:\"\\f412\"}.fa-xing:before{content:\"\\f168\"}.fa-xing-square:before{content:\"\\f169\"}.fa-y-combinator:before{content:\"\\f23b\"}.fa-yahoo:before{content:\"\\f19e\"}.fa-yammer:before{content:\"\\f840\"}.fa-yandex:before{content:\"\\f413\"}.fa-yandex-international:before{content:\"\\f414\"}.fa-yarn:before{content:\"\\f7e3\"}.fa-yelp:before{content:\"\\f1e9\"}.fa-yen-sign:before{content:\"\\f157\"}.fa-yin-yang:before{content:\"\\f6ad\"}.fa-yoast:before{content:\"\\f2b1\"}.fa-youtube:before{content:\"\\f167\"}.fa-youtube-square:before{content:\"\\f431\"}.fa-zhihu:before{content:\"\\f63f\"}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}@font-face{font-family:\"Font Awesome 5 Brands\";font-style:normal;font-weight:normal;font-display:auto;src:url(../webfonts/fa-brands-400.eot);src:url(../webfonts/fa-brands-400.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-brands-400.woff2) format(\"woff2\"),url(../webfonts/fa-brands-400.woff) format(\"woff\"),url(../webfonts/fa-brands-400.ttf) format(\"truetype\"),url(../webfonts/fa-brands-400.svg#fontawesome) format(\"svg\")}.fab{font-family:\"Font Awesome 5 Brands\"}@font-face{font-family:\"Font Awesome 5 Free\";font-style:normal;font-weight:400;font-display:auto;src:url(../webfonts/fa-regular-400.eot);src:url(../webfonts/fa-regular-400.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-regular-400.woff2) format(\"woff2\"),url(../webfonts/fa-regular-400.woff) format(\"woff\"),url(../webfonts/fa-regular-400.ttf) format(\"truetype\"),url(../webfonts/fa-regular-400.svg#fontawesome) format(\"svg\")}.far{font-weight:400}@font-face{font-family:\"Font Awesome 5 Free\";font-style:normal;font-weight:900;font-display:auto;src:url(../webfonts/fa-solid-900.eot);src:url(../webfonts/fa-solid-900.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-solid-900.woff2) format(\"woff2\"),url(../webfonts/fa-solid-900.woff) format(\"woff\"),url(../webfonts/fa-solid-900.ttf) format(\"truetype\"),url(../webfonts/fa-solid-900.svg#fontawesome) format(\"svg\")}.fa,.far,.fas{font-family:\"Font Awesome 5 Free\"}.fa,.fas{font-weight:900}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 5
    }
  },
  {
    "path": "src/main/resources/font-awesome/css/brands.min.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Font Awesome Free 5.8.1 by @fontawesome - https://fontawesome.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "@font-face{font-family:\"Font Awesome 5 Brands\";font-style:normal;font-weight:normal;font-display:auto;src:url(../webfonts/fa-brands-400.eot);src:url(../webfonts/fa-brands-400.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-brands-400.woff2) format(\"woff2\"),url(../webfonts/fa-brands-400.woff) format(\"woff\"),url(../webfonts/fa-brands-400.ttf) format(\"truetype\"),url(../webfonts/fa-brands-400.svg#fontawesome) format(\"svg\")}.fab{font-family:\"Font Awesome 5 Brands\"}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 5
    }
  },
  {
    "path": "src/main/resources/font-awesome/css/fontawesome.min.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Font Awesome Free 5.8.1 by @fontawesome - https://fontawesome.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".fa,.fab,.fal,.far,.fas{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-block;font-style:normal;font-variant:normal;text-rendering:auto;line-height:1}.fa-lg{font-size:1.33333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.fa-ul\u003eli{position:relative}.fa-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.fa-border{border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left{margin-right:.3em}.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right{margin-left:.3em}.fa-spin{animation:fa-spin 2s infinite linear}.fa-pulse{animation:fa-spin 1s infinite steps(8)}@keyframes fa-spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.fa-rotate-90{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d1)\";transform:rotate(90deg)}.fa-rotate-180{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d2)\";transform:rotate(180deg)}.fa-rotate-270{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d3)\";transform:rotate(270deg)}.fa-flip-horizontal{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d0, mirror\u003d1)\";transform:scaleX(-1)}.fa-flip-vertical{transform:scaleY(-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical,.fa-flip-vertical{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d2, mirror\u003d1)\"}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{transform:scale(-1)}:root .fa-flip-both,:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270{filter:none}.fa-stack{display:inline-block;height:2em;line-height:2em;position:relative;vertical-align:middle;width:2.5em}.fa-stack-1x,.fa-stack-2x{left:0;position:absolute;text-align:center;width:100%}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-500px:before{content:\"\\f26e\"}.fa-accessible-icon:before{content:\"\\f368\"}.fa-accusoft:before{content:\"\\f369\"}.fa-acquisitions-incorporated:before{content:\"\\f6af\"}.fa-ad:before{content:\"\\f641\"}.fa-address-book:before{content:\"\\f2b9\"}.fa-address-card:before{content:\"\\f2bb\"}.fa-adjust:before{content:\"\\f042\"}.fa-adn:before{content:\"\\f170\"}.fa-adobe:before{content:\"\\f778\"}.fa-adversal:before{content:\"\\f36a\"}.fa-affiliatetheme:before{content:\"\\f36b\"}.fa-air-freshener:before{content:\"\\f5d0\"}.fa-airbnb:before{content:\"\\f834\"}.fa-algolia:before{content:\"\\f36c\"}.fa-align-center:before{content:\"\\f037\"}.fa-align-justify:before{content:\"\\f039\"}.fa-align-left:before{content:\"\\f036\"}.fa-align-right:before{content:\"\\f038\"}.fa-alipay:before{content:\"\\f642\"}.fa-allergies:before{content:\"\\f461\"}.fa-amazon:before{content:\"\\f270\"}.fa-amazon-pay:before{content:\"\\f42c\"}.fa-ambulance:before{content:\"\\f0f9\"}.fa-american-sign-language-interpreting:before{content:\"\\f2a3\"}.fa-amilia:before{content:\"\\f36d\"}.fa-anchor:before{content:\"\\f13d\"}.fa-android:before{content:\"\\f17b\"}.fa-angellist:before{content:\"\\f209\"}.fa-angle-double-down:before{content:\"\\f103\"}.fa-angle-double-left:before{content:\"\\f100\"}.fa-angle-double-right:before{content:\"\\f101\"}.fa-angle-double-up:before{content:\"\\f102\"}.fa-angle-down:before{content:\"\\f107\"}.fa-angle-left:before{content:\"\\f104\"}.fa-angle-right:before{content:\"\\f105\"}.fa-angle-up:before{content:\"\\f106\"}.fa-angry:before{content:\"\\f556\"}.fa-angrycreative:before{content:\"\\f36e\"}.fa-angular:before{content:\"\\f420\"}.fa-ankh:before{content:\"\\f644\"}.fa-app-store:before{content:\"\\f36f\"}.fa-app-store-ios:before{content:\"\\f370\"}.fa-apper:before{content:\"\\f371\"}.fa-apple:before{content:\"\\f179\"}.fa-apple-alt:before{content:\"\\f5d1\"}.fa-apple-pay:before{content:\"\\f415\"}.fa-archive:before{content:\"\\f187\"}.fa-archway:before{content:\"\\f557\"}.fa-arrow-alt-circle-down:before{content:\"\\f358\"}.fa-arrow-alt-circle-left:before{content:\"\\f359\"}.fa-arrow-alt-circle-right:before{content:\"\\f35a\"}.fa-arrow-alt-circle-up:before{content:\"\\f35b\"}.fa-arrow-circle-down:before{content:\"\\f0ab\"}.fa-arrow-circle-left:before{content:\"\\f0a8\"}.fa-arrow-circle-right:before{content:\"\\f0a9\"}.fa-arrow-circle-up:before{content:\"\\f0aa\"}.fa-arrow-down:before{content:\"\\f063\"}.fa-arrow-left:before{content:\"\\f060\"}.fa-arrow-right:before{content:\"\\f061\"}.fa-arrow-up:before{content:\"\\f062\"}.fa-arrows-alt:before{content:\"\\f0b2\"}.fa-arrows-alt-h:before{content:\"\\f337\"}.fa-arrows-alt-v:before{content:\"\\f338\"}.fa-artstation:before{content:\"\\f77a\"}.fa-assistive-listening-systems:before{content:\"\\f2a2\"}.fa-asterisk:before{content:\"\\f069\"}.fa-asymmetrik:before{content:\"\\f372\"}.fa-at:before{content:\"\\f1fa\"}.fa-atlas:before{content:\"\\f558\"}.fa-atlassian:before{content:\"\\f77b\"}.fa-atom:before{content:\"\\f5d2\"}.fa-audible:before{content:\"\\f373\"}.fa-audio-description:before{content:\"\\f29e\"}.fa-autoprefixer:before{content:\"\\f41c\"}.fa-avianex:before{content:\"\\f374\"}.fa-aviato:before{content:\"\\f421\"}.fa-award:before{content:\"\\f559\"}.fa-aws:before{content:\"\\f375\"}.fa-baby:before{content:\"\\f77c\"}.fa-baby-carriage:before{content:\"\\f77d\"}.fa-backspace:before{content:\"\\f55a\"}.fa-backward:before{content:\"\\f04a\"}.fa-bacon:before{content:\"\\f7e5\"}.fa-balance-scale:before{content:\"\\f24e\"}.fa-ban:before{content:\"\\f05e\"}.fa-band-aid:before{content:\"\\f462\"}.fa-bandcamp:before{content:\"\\f2d5\"}.fa-barcode:before{content:\"\\f02a\"}.fa-bars:before{content:\"\\f0c9\"}.fa-baseball-ball:before{content:\"\\f433\"}.fa-basketball-ball:before{content:\"\\f434\"}.fa-bath:before{content:\"\\f2cd\"}.fa-battery-empty:before{content:\"\\f244\"}.fa-battery-full:before{content:\"\\f240\"}.fa-battery-half:before{content:\"\\f242\"}.fa-battery-quarter:before{content:\"\\f243\"}.fa-battery-three-quarters:before{content:\"\\f241\"}.fa-battle-net:before{content:\"\\f835\"}.fa-bed:before{content:\"\\f236\"}.fa-beer:before{content:\"\\f0fc\"}.fa-behance:before{content:\"\\f1b4\"}.fa-behance-square:before{content:\"\\f1b5\"}.fa-bell:before{content:\"\\f0f3\"}.fa-bell-slash:before{content:\"\\f1f6\"}.fa-bezier-curve:before{content:\"\\f55b\"}.fa-bible:before{content:\"\\f647\"}.fa-bicycle:before{content:\"\\f206\"}.fa-bimobject:before{content:\"\\f378\"}.fa-binoculars:before{content:\"\\f1e5\"}.fa-biohazard:before{content:\"\\f780\"}.fa-birthday-cake:before{content:\"\\f1fd\"}.fa-bitbucket:before{content:\"\\f171\"}.fa-bitcoin:before{content:\"\\f379\"}.fa-bity:before{content:\"\\f37a\"}.fa-black-tie:before{content:\"\\f27e\"}.fa-blackberry:before{content:\"\\f37b\"}.fa-blender:before{content:\"\\f517\"}.fa-blender-phone:before{content:\"\\f6b6\"}.fa-blind:before{content:\"\\f29d\"}.fa-blog:before{content:\"\\f781\"}.fa-blogger:before{content:\"\\f37c\"}.fa-blogger-b:before{content:\"\\f37d\"}.fa-bluetooth:before{content:\"\\f293\"}.fa-bluetooth-b:before{content:\"\\f294\"}.fa-bold:before{content:\"\\f032\"}.fa-bolt:before{content:\"\\f0e7\"}.fa-bomb:before{content:\"\\f1e2\"}.fa-bone:before{content:\"\\f5d7\"}.fa-bong:before{content:\"\\f55c\"}.fa-book:before{content:\"\\f02d\"}.fa-book-dead:before{content:\"\\f6b7\"}.fa-book-medical:before{content:\"\\f7e6\"}.fa-book-open:before{content:\"\\f518\"}.fa-book-reader:before{content:\"\\f5da\"}.fa-bookmark:before{content:\"\\f02e\"}.fa-bootstrap:before{content:\"\\f836\"}.fa-bowling-ball:before{content:\"\\f436\"}.fa-box:before{content:\"\\f466\"}.fa-box-open:before{content:\"\\f49e\"}.fa-boxes:before{content:\"\\f468\"}.fa-braille:before{content:\"\\f2a1\"}.fa-brain:before{content:\"\\f5dc\"}.fa-bread-slice:before{content:\"\\f7ec\"}.fa-briefcase:before{content:\"\\f0b1\"}.fa-briefcase-medical:before{content:\"\\f469\"}.fa-broadcast-tower:before{content:\"\\f519\"}.fa-broom:before{content:\"\\f51a\"}.fa-brush:before{content:\"\\f55d\"}.fa-btc:before{content:\"\\f15a\"}.fa-buffer:before{content:\"\\f837\"}.fa-bug:before{content:\"\\f188\"}.fa-building:before{content:\"\\f1ad\"}.fa-bullhorn:before{content:\"\\f0a1\"}.fa-bullseye:before{content:\"\\f140\"}.fa-burn:before{content:\"\\f46a\"}.fa-buromobelexperte:before{content:\"\\f37f\"}.fa-bus:before{content:\"\\f207\"}.fa-bus-alt:before{content:\"\\f55e\"}.fa-business-time:before{content:\"\\f64a\"}.fa-buysellads:before{content:\"\\f20d\"}.fa-calculator:before{content:\"\\f1ec\"}.fa-calendar:before{content:\"\\f133\"}.fa-calendar-alt:before{content:\"\\f073\"}.fa-calendar-check:before{content:\"\\f274\"}.fa-calendar-day:before{content:\"\\f783\"}.fa-calendar-minus:before{content:\"\\f272\"}.fa-calendar-plus:before{content:\"\\f271\"}.fa-calendar-times:before{content:\"\\f273\"}.fa-calendar-week:before{content:\"\\f784\"}.fa-camera:before{content:\"\\f030\"}.fa-camera-retro:before{content:\"\\f083\"}.fa-campground:before{content:\"\\f6bb\"}.fa-canadian-maple-leaf:before{content:\"\\f785\"}.fa-candy-cane:before{content:\"\\f786\"}.fa-cannabis:before{content:\"\\f55f\"}.fa-capsules:before{content:\"\\f46b\"}.fa-car:before{content:\"\\f1b9\"}.fa-car-alt:before{content:\"\\f5de\"}.fa-car-battery:before{content:\"\\f5df\"}.fa-car-crash:before{content:\"\\f5e1\"}.fa-car-side:before{content:\"\\f5e4\"}.fa-caret-down:before{content:\"\\f0d7\"}.fa-caret-left:before{content:\"\\f0d9\"}.fa-caret-right:before{content:\"\\f0da\"}.fa-caret-square-down:before{content:\"\\f150\"}.fa-caret-square-left:before{content:\"\\f191\"}.fa-caret-square-right:before{content:\"\\f152\"}.fa-caret-square-up:before{content:\"\\f151\"}.fa-caret-up:before{content:\"\\f0d8\"}.fa-carrot:before{content:\"\\f787\"}.fa-cart-arrow-down:before{content:\"\\f218\"}.fa-cart-plus:before{content:\"\\f217\"}.fa-cash-register:before{content:\"\\f788\"}.fa-cat:before{content:\"\\f6be\"}.fa-cc-amazon-pay:before{content:\"\\f42d\"}.fa-cc-amex:before{content:\"\\f1f3\"}.fa-cc-apple-pay:before{content:\"\\f416\"}.fa-cc-diners-club:before{content:\"\\f24c\"}.fa-cc-discover:before{content:\"\\f1f2\"}.fa-cc-jcb:before{content:\"\\f24b\"}.fa-cc-mastercard:before{content:\"\\f1f1\"}.fa-cc-paypal:before{content:\"\\f1f4\"}.fa-cc-stripe:before{content:\"\\f1f5\"}.fa-cc-visa:before{content:\"\\f1f0\"}.fa-centercode:before{content:\"\\f380\"}.fa-centos:before{content:\"\\f789\"}.fa-certificate:before{content:\"\\f0a3\"}.fa-chair:before{content:\"\\f6c0\"}.fa-chalkboard:before{content:\"\\f51b\"}.fa-chalkboard-teacher:before{content:\"\\f51c\"}.fa-charging-station:before{content:\"\\f5e7\"}.fa-chart-area:before{content:\"\\f1fe\"}.fa-chart-bar:before{content:\"\\f080\"}.fa-chart-line:before{content:\"\\f201\"}.fa-chart-pie:before{content:\"\\f200\"}.fa-check:before{content:\"\\f00c\"}.fa-check-circle:before{content:\"\\f058\"}.fa-check-double:before{content:\"\\f560\"}.fa-check-square:before{content:\"\\f14a\"}.fa-cheese:before{content:\"\\f7ef\"}.fa-chess:before{content:\"\\f439\"}.fa-chess-bishop:before{content:\"\\f43a\"}.fa-chess-board:before{content:\"\\f43c\"}.fa-chess-king:before{content:\"\\f43f\"}.fa-chess-knight:before{content:\"\\f441\"}.fa-chess-pawn:before{content:\"\\f443\"}.fa-chess-queen:before{content:\"\\f445\"}.fa-chess-rook:before{content:\"\\f447\"}.fa-chevron-circle-down:before{content:\"\\f13a\"}.fa-chevron-circle-left:before{content:\"\\f137\"}.fa-chevron-circle-right:before{content:\"\\f138\"}.fa-chevron-circle-up:before{content:\"\\f139\"}.fa-chevron-down:before{content:\"\\f078\"}.fa-chevron-left:before{content:\"\\f053\"}.fa-chevron-right:before{content:\"\\f054\"}.fa-chevron-up:before{content:\"\\f077\"}.fa-child:before{content:\"\\f1ae\"}.fa-chrome:before{content:\"\\f268\"}.fa-chromecast:before{content:\"\\f838\"}.fa-church:before{content:\"\\f51d\"}.fa-circle:before{content:\"\\f111\"}.fa-circle-notch:before{content:\"\\f1ce\"}.fa-city:before{content:\"\\f64f\"}.fa-clinic-medical:before{content:\"\\f7f2\"}.fa-clipboard:before{content:\"\\f328\"}.fa-clipboard-check:before{content:\"\\f46c\"}.fa-clipboard-list:before{content:\"\\f46d\"}.fa-clock:before{content:\"\\f017\"}.fa-clone:before{content:\"\\f24d\"}.fa-closed-captioning:before{content:\"\\f20a\"}.fa-cloud:before{content:\"\\f0c2\"}.fa-cloud-download-alt:before{content:\"\\f381\"}.fa-cloud-meatball:before{content:\"\\f73b\"}.fa-cloud-moon:before{content:\"\\f6c3\"}.fa-cloud-moon-rain:before{content:\"\\f73c\"}.fa-cloud-rain:before{content:\"\\f73d\"}.fa-cloud-showers-heavy:before{content:\"\\f740\"}.fa-cloud-sun:before{content:\"\\f6c4\"}.fa-cloud-sun-rain:before{content:\"\\f743\"}.fa-cloud-upload-alt:before{content:\"\\f382\"}.fa-cloudscale:before{content:\"\\f383\"}.fa-cloudsmith:before{content:\"\\f384\"}.fa-cloudversify:before{content:\"\\f385\"}.fa-cocktail:before{content:\"\\f561\"}.fa-code:before{content:\"\\f121\"}.fa-code-branch:before{content:\"\\f126\"}.fa-codepen:before{content:\"\\f1cb\"}.fa-codiepie:before{content:\"\\f284\"}.fa-coffee:before{content:\"\\f0f4\"}.fa-cog:before{content:\"\\f013\"}.fa-cogs:before{content:\"\\f085\"}.fa-coins:before{content:\"\\f51e\"}.fa-columns:before{content:\"\\f0db\"}.fa-comment:before{content:\"\\f075\"}.fa-comment-alt:before{content:\"\\f27a\"}.fa-comment-dollar:before{content:\"\\f651\"}.fa-comment-dots:before{content:\"\\f4ad\"}.fa-comment-medical:before{content:\"\\f7f5\"}.fa-comment-slash:before{content:\"\\f4b3\"}.fa-comments:before{content:\"\\f086\"}.fa-comments-dollar:before{content:\"\\f653\"}.fa-compact-disc:before{content:\"\\f51f\"}.fa-compass:before{content:\"\\f14e\"}.fa-compress:before{content:\"\\f066\"}.fa-compress-arrows-alt:before{content:\"\\f78c\"}.fa-concierge-bell:before{content:\"\\f562\"}.fa-confluence:before{content:\"\\f78d\"}.fa-connectdevelop:before{content:\"\\f20e\"}.fa-contao:before{content:\"\\f26d\"}.fa-cookie:before{content:\"\\f563\"}.fa-cookie-bite:before{content:\"\\f564\"}.fa-copy:before{content:\"\\f0c5\"}.fa-copyright:before{content:\"\\f1f9\"}.fa-couch:before{content:\"\\f4b8\"}.fa-cpanel:before{content:\"\\f388\"}.fa-creative-commons:before{content:\"\\f25e\"}.fa-creative-commons-by:before{content:\"\\f4e7\"}.fa-creative-commons-nc:before{content:\"\\f4e8\"}.fa-creative-commons-nc-eu:before{content:\"\\f4e9\"}.fa-creative-commons-nc-jp:before{content:\"\\f4ea\"}.fa-creative-commons-nd:before{content:\"\\f4eb\"}.fa-creative-commons-pd:before{content:\"\\f4ec\"}.fa-creative-commons-pd-alt:before{content:\"\\f4ed\"}.fa-creative-commons-remix:before{content:\"\\f4ee\"}.fa-creative-commons-sa:before{content:\"\\f4ef\"}.fa-creative-commons-sampling:before{content:\"\\f4f0\"}.fa-creative-commons-sampling-plus:before{content:\"\\f4f1\"}.fa-creative-commons-share:before{content:\"\\f4f2\"}.fa-creative-commons-zero:before{content:\"\\f4f3\"}.fa-credit-card:before{content:\"\\f09d\"}.fa-critical-role:before{content:\"\\f6c9\"}.fa-crop:before{content:\"\\f125\"}.fa-crop-alt:before{content:\"\\f565\"}.fa-cross:before{content:\"\\f654\"}.fa-crosshairs:before{content:\"\\f05b\"}.fa-crow:before{content:\"\\f520\"}.fa-crown:before{content:\"\\f521\"}.fa-crutch:before{content:\"\\f7f7\"}.fa-css3:before{content:\"\\f13c\"}.fa-css3-alt:before{content:\"\\f38b\"}.fa-cube:before{content:\"\\f1b2\"}.fa-cubes:before{content:\"\\f1b3\"}.fa-cut:before{content:\"\\f0c4\"}.fa-cuttlefish:before{content:\"\\f38c\"}.fa-d-and-d:before{content:\"\\f38d\"}.fa-d-and-d-beyond:before{content:\"\\f6ca\"}.fa-dashcube:before{content:\"\\f210\"}.fa-database:before{content:\"\\f1c0\"}.fa-deaf:before{content:\"\\f2a4\"}.fa-delicious:before{content:\"\\f1a5\"}.fa-democrat:before{content:\"\\f747\"}.fa-deploydog:before{content:\"\\f38e\"}.fa-deskpro:before{content:\"\\f38f\"}.fa-desktop:before{content:\"\\f108\"}.fa-dev:before{content:\"\\f6cc\"}.fa-deviantart:before{content:\"\\f1bd\"}.fa-dharmachakra:before{content:\"\\f655\"}.fa-dhl:before{content:\"\\f790\"}.fa-diagnoses:before{content:\"\\f470\"}.fa-diaspora:before{content:\"\\f791\"}.fa-dice:before{content:\"\\f522\"}.fa-dice-d20:before{content:\"\\f6cf\"}.fa-dice-d6:before{content:\"\\f6d1\"}.fa-dice-five:before{content:\"\\f523\"}.fa-dice-four:before{content:\"\\f524\"}.fa-dice-one:before{content:\"\\f525\"}.fa-dice-six:before{content:\"\\f526\"}.fa-dice-three:before{content:\"\\f527\"}.fa-dice-two:before{content:\"\\f528\"}.fa-digg:before{content:\"\\f1a6\"}.fa-digital-ocean:before{content:\"\\f391\"}.fa-digital-tachograph:before{content:\"\\f566\"}.fa-directions:before{content:\"\\f5eb\"}.fa-discord:before{content:\"\\f392\"}.fa-discourse:before{content:\"\\f393\"}.fa-divide:before{content:\"\\f529\"}.fa-dizzy:before{content:\"\\f567\"}.fa-dna:before{content:\"\\f471\"}.fa-dochub:before{content:\"\\f394\"}.fa-docker:before{content:\"\\f395\"}.fa-dog:before{content:\"\\f6d3\"}.fa-dollar-sign:before{content:\"\\f155\"}.fa-dolly:before{content:\"\\f472\"}.fa-dolly-flatbed:before{content:\"\\f474\"}.fa-donate:before{content:\"\\f4b9\"}.fa-door-closed:before{content:\"\\f52a\"}.fa-door-open:before{content:\"\\f52b\"}.fa-dot-circle:before{content:\"\\f192\"}.fa-dove:before{content:\"\\f4ba\"}.fa-download:before{content:\"\\f019\"}.fa-draft2digital:before{content:\"\\f396\"}.fa-drafting-compass:before{content:\"\\f568\"}.fa-dragon:before{content:\"\\f6d5\"}.fa-draw-polygon:before{content:\"\\f5ee\"}.fa-dribbble:before{content:\"\\f17d\"}.fa-dribbble-square:before{content:\"\\f397\"}.fa-dropbox:before{content:\"\\f16b\"}.fa-drum:before{content:\"\\f569\"}.fa-drum-steelpan:before{content:\"\\f56a\"}.fa-drumstick-bite:before{content:\"\\f6d7\"}.fa-drupal:before{content:\"\\f1a9\"}.fa-dumbbell:before{content:\"\\f44b\"}.fa-dumpster:before{content:\"\\f793\"}.fa-dumpster-fire:before{content:\"\\f794\"}.fa-dungeon:before{content:\"\\f6d9\"}.fa-dyalog:before{content:\"\\f399\"}.fa-earlybirds:before{content:\"\\f39a\"}.fa-ebay:before{content:\"\\f4f4\"}.fa-edge:before{content:\"\\f282\"}.fa-edit:before{content:\"\\f044\"}.fa-egg:before{content:\"\\f7fb\"}.fa-eject:before{content:\"\\f052\"}.fa-elementor:before{content:\"\\f430\"}.fa-ellipsis-h:before{content:\"\\f141\"}.fa-ellipsis-v:before{content:\"\\f142\"}.fa-ello:before{content:\"\\f5f1\"}.fa-ember:before{content:\"\\f423\"}.fa-empire:before{content:\"\\f1d1\"}.fa-envelope:before{content:\"\\f0e0\"}.fa-envelope-open:before{content:\"\\f2b6\"}.fa-envelope-open-text:before{content:\"\\f658\"}.fa-envelope-square:before{content:\"\\f199\"}.fa-envira:before{content:\"\\f299\"}.fa-equals:before{content:\"\\f52c\"}.fa-eraser:before{content:\"\\f12d\"}.fa-erlang:before{content:\"\\f39d\"}.fa-ethereum:before{content:\"\\f42e\"}.fa-ethernet:before{content:\"\\f796\"}.fa-etsy:before{content:\"\\f2d7\"}.fa-euro-sign:before{content:\"\\f153\"}.fa-evernote:before{content:\"\\f839\"}.fa-exchange-alt:before{content:\"\\f362\"}.fa-exclamation:before{content:\"\\f12a\"}.fa-exclamation-circle:before{content:\"\\f06a\"}.fa-exclamation-triangle:before{content:\"\\f071\"}.fa-expand:before{content:\"\\f065\"}.fa-expand-arrows-alt:before{content:\"\\f31e\"}.fa-expeditedssl:before{content:\"\\f23e\"}.fa-external-link-alt:before{content:\"\\f35d\"}.fa-external-link-square-alt:before{content:\"\\f360\"}.fa-eye:before{content:\"\\f06e\"}.fa-eye-dropper:before{content:\"\\f1fb\"}.fa-eye-slash:before{content:\"\\f070\"}.fa-facebook:before{content:\"\\f09a\"}.fa-facebook-f:before{content:\"\\f39e\"}.fa-facebook-messenger:before{content:\"\\f39f\"}.fa-facebook-square:before{content:\"\\f082\"}.fa-fantasy-flight-games:before{content:\"\\f6dc\"}.fa-fast-backward:before{content:\"\\f049\"}.fa-fast-forward:before{content:\"\\f050\"}.fa-fax:before{content:\"\\f1ac\"}.fa-feather:before{content:\"\\f52d\"}.fa-feather-alt:before{content:\"\\f56b\"}.fa-fedex:before{content:\"\\f797\"}.fa-fedora:before{content:\"\\f798\"}.fa-female:before{content:\"\\f182\"}.fa-fighter-jet:before{content:\"\\f0fb\"}.fa-figma:before{content:\"\\f799\"}.fa-file:before{content:\"\\f15b\"}.fa-file-alt:before{content:\"\\f15c\"}.fa-file-archive:before{content:\"\\f1c6\"}.fa-file-audio:before{content:\"\\f1c7\"}.fa-file-code:before{content:\"\\f1c9\"}.fa-file-contract:before{content:\"\\f56c\"}.fa-file-csv:before{content:\"\\f6dd\"}.fa-file-download:before{content:\"\\f56d\"}.fa-file-excel:before{content:\"\\f1c3\"}.fa-file-export:before{content:\"\\f56e\"}.fa-file-image:before{content:\"\\f1c5\"}.fa-file-import:before{content:\"\\f56f\"}.fa-file-invoice:before{content:\"\\f570\"}.fa-file-invoice-dollar:before{content:\"\\f571\"}.fa-file-medical:before{content:\"\\f477\"}.fa-file-medical-alt:before{content:\"\\f478\"}.fa-file-pdf:before{content:\"\\f1c1\"}.fa-file-powerpoint:before{content:\"\\f1c4\"}.fa-file-prescription:before{content:\"\\f572\"}.fa-file-signature:before{content:\"\\f573\"}.fa-file-upload:before{content:\"\\f574\"}.fa-file-video:before{content:\"\\f1c8\"}.fa-file-word:before{content:\"\\f1c2\"}.fa-fill:before{content:\"\\f575\"}.fa-fill-drip:before{content:\"\\f576\"}.fa-film:before{content:\"\\f008\"}.fa-filter:before{content:\"\\f0b0\"}.fa-fingerprint:before{content:\"\\f577\"}.fa-fire:before{content:\"\\f06d\"}.fa-fire-alt:before{content:\"\\f7e4\"}.fa-fire-extinguisher:before{content:\"\\f134\"}.fa-firefox:before{content:\"\\f269\"}.fa-first-aid:before{content:\"\\f479\"}.fa-first-order:before{content:\"\\f2b0\"}.fa-first-order-alt:before{content:\"\\f50a\"}.fa-firstdraft:before{content:\"\\f3a1\"}.fa-fish:before{content:\"\\f578\"}.fa-fist-raised:before{content:\"\\f6de\"}.fa-flag:before{content:\"\\f024\"}.fa-flag-checkered:before{content:\"\\f11e\"}.fa-flag-usa:before{content:\"\\f74d\"}.fa-flask:before{content:\"\\f0c3\"}.fa-flickr:before{content:\"\\f16e\"}.fa-flipboard:before{content:\"\\f44d\"}.fa-flushed:before{content:\"\\f579\"}.fa-fly:before{content:\"\\f417\"}.fa-folder:before{content:\"\\f07b\"}.fa-folder-minus:before{content:\"\\f65d\"}.fa-folder-open:before{content:\"\\f07c\"}.fa-folder-plus:before{content:\"\\f65e\"}.fa-font:before{content:\"\\f031\"}.fa-font-awesome:before{content:\"\\f2b4\"}.fa-font-awesome-alt:before{content:\"\\f35c\"}.fa-font-awesome-flag:before{content:\"\\f425\"}.fa-font-awesome-logo-full:before{content:\"\\f4e6\"}.fa-fonticons:before{content:\"\\f280\"}.fa-fonticons-fi:before{content:\"\\f3a2\"}.fa-football-ball:before{content:\"\\f44e\"}.fa-fort-awesome:before{content:\"\\f286\"}.fa-fort-awesome-alt:before{content:\"\\f3a3\"}.fa-forumbee:before{content:\"\\f211\"}.fa-forward:before{content:\"\\f04e\"}.fa-foursquare:before{content:\"\\f180\"}.fa-free-code-camp:before{content:\"\\f2c5\"}.fa-freebsd:before{content:\"\\f3a4\"}.fa-frog:before{content:\"\\f52e\"}.fa-frown:before{content:\"\\f119\"}.fa-frown-open:before{content:\"\\f57a\"}.fa-fulcrum:before{content:\"\\f50b\"}.fa-funnel-dollar:before{content:\"\\f662\"}.fa-futbol:before{content:\"\\f1e3\"}.fa-galactic-republic:before{content:\"\\f50c\"}.fa-galactic-senate:before{content:\"\\f50d\"}.fa-gamepad:before{content:\"\\f11b\"}.fa-gas-pump:before{content:\"\\f52f\"}.fa-gavel:before{content:\"\\f0e3\"}.fa-gem:before{content:\"\\f3a5\"}.fa-genderless:before{content:\"\\f22d\"}.fa-get-pocket:before{content:\"\\f265\"}.fa-gg:before{content:\"\\f260\"}.fa-gg-circle:before{content:\"\\f261\"}.fa-ghost:before{content:\"\\f6e2\"}.fa-gift:before{content:\"\\f06b\"}.fa-gifts:before{content:\"\\f79c\"}.fa-git:before{content:\"\\f1d3\"}.fa-git-square:before{content:\"\\f1d2\"}.fa-github:before{content:\"\\f09b\"}.fa-github-alt:before{content:\"\\f113\"}.fa-github-square:before{content:\"\\f092\"}.fa-gitkraken:before{content:\"\\f3a6\"}.fa-gitlab:before{content:\"\\f296\"}.fa-gitter:before{content:\"\\f426\"}.fa-glass-cheers:before{content:\"\\f79f\"}.fa-glass-martini:before{content:\"\\f000\"}.fa-glass-martini-alt:before{content:\"\\f57b\"}.fa-glass-whiskey:before{content:\"\\f7a0\"}.fa-glasses:before{content:\"\\f530\"}.fa-glide:before{content:\"\\f2a5\"}.fa-glide-g:before{content:\"\\f2a6\"}.fa-globe:before{content:\"\\f0ac\"}.fa-globe-africa:before{content:\"\\f57c\"}.fa-globe-americas:before{content:\"\\f57d\"}.fa-globe-asia:before{content:\"\\f57e\"}.fa-globe-europe:before{content:\"\\f7a2\"}.fa-gofore:before{content:\"\\f3a7\"}.fa-golf-ball:before{content:\"\\f450\"}.fa-goodreads:before{content:\"\\f3a8\"}.fa-goodreads-g:before{content:\"\\f3a9\"}.fa-google:before{content:\"\\f1a0\"}.fa-google-drive:before{content:\"\\f3aa\"}.fa-google-play:before{content:\"\\f3ab\"}.fa-google-plus:before{content:\"\\f2b3\"}.fa-google-plus-g:before{content:\"\\f0d5\"}.fa-google-plus-square:before{content:\"\\f0d4\"}.fa-google-wallet:before{content:\"\\f1ee\"}.fa-gopuram:before{content:\"\\f664\"}.fa-graduation-cap:before{content:\"\\f19d\"}.fa-gratipay:before{content:\"\\f184\"}.fa-grav:before{content:\"\\f2d6\"}.fa-greater-than:before{content:\"\\f531\"}.fa-greater-than-equal:before{content:\"\\f532\"}.fa-grimace:before{content:\"\\f57f\"}.fa-grin:before{content:\"\\f580\"}.fa-grin-alt:before{content:\"\\f581\"}.fa-grin-beam:before{content:\"\\f582\"}.fa-grin-beam-sweat:before{content:\"\\f583\"}.fa-grin-hearts:before{content:\"\\f584\"}.fa-grin-squint:before{content:\"\\f585\"}.fa-grin-squint-tears:before{content:\"\\f586\"}.fa-grin-stars:before{content:\"\\f587\"}.fa-grin-tears:before{content:\"\\f588\"}.fa-grin-tongue:before{content:\"\\f589\"}.fa-grin-tongue-squint:before{content:\"\\f58a\"}.fa-grin-tongue-wink:before{content:\"\\f58b\"}.fa-grin-wink:before{content:\"\\f58c\"}.fa-grip-horizontal:before{content:\"\\f58d\"}.fa-grip-lines:before{content:\"\\f7a4\"}.fa-grip-lines-vertical:before{content:\"\\f7a5\"}.fa-grip-vertical:before{content:\"\\f58e\"}.fa-gripfire:before{content:\"\\f3ac\"}.fa-grunt:before{content:\"\\f3ad\"}.fa-guitar:before{content:\"\\f7a6\"}.fa-gulp:before{content:\"\\f3ae\"}.fa-h-square:before{content:\"\\f0fd\"}.fa-hacker-news:before{content:\"\\f1d4\"}.fa-hacker-news-square:before{content:\"\\f3af\"}.fa-hackerrank:before{content:\"\\f5f7\"}.fa-hamburger:before{content:\"\\f805\"}.fa-hammer:before{content:\"\\f6e3\"}.fa-hamsa:before{content:\"\\f665\"}.fa-hand-holding:before{content:\"\\f4bd\"}.fa-hand-holding-heart:before{content:\"\\f4be\"}.fa-hand-holding-usd:before{content:\"\\f4c0\"}.fa-hand-lizard:before{content:\"\\f258\"}.fa-hand-middle-finger:before{content:\"\\f806\"}.fa-hand-paper:before{content:\"\\f256\"}.fa-hand-peace:before{content:\"\\f25b\"}.fa-hand-point-down:before{content:\"\\f0a7\"}.fa-hand-point-left:before{content:\"\\f0a5\"}.fa-hand-point-right:before{content:\"\\f0a4\"}.fa-hand-point-up:before{content:\"\\f0a6\"}.fa-hand-pointer:before{content:\"\\f25a\"}.fa-hand-rock:before{content:\"\\f255\"}.fa-hand-scissors:before{content:\"\\f257\"}.fa-hand-spock:before{content:\"\\f259\"}.fa-hands:before{content:\"\\f4c2\"}.fa-hands-helping:before{content:\"\\f4c4\"}.fa-handshake:before{content:\"\\f2b5\"}.fa-hanukiah:before{content:\"\\f6e6\"}.fa-hard-hat:before{content:\"\\f807\"}.fa-hashtag:before{content:\"\\f292\"}.fa-hat-wizard:before{content:\"\\f6e8\"}.fa-haykal:before{content:\"\\f666\"}.fa-hdd:before{content:\"\\f0a0\"}.fa-heading:before{content:\"\\f1dc\"}.fa-headphones:before{content:\"\\f025\"}.fa-headphones-alt:before{content:\"\\f58f\"}.fa-headset:before{content:\"\\f590\"}.fa-heart:before{content:\"\\f004\"}.fa-heart-broken:before{content:\"\\f7a9\"}.fa-heartbeat:before{content:\"\\f21e\"}.fa-helicopter:before{content:\"\\f533\"}.fa-highlighter:before{content:\"\\f591\"}.fa-hiking:before{content:\"\\f6ec\"}.fa-hippo:before{content:\"\\f6ed\"}.fa-hips:before{content:\"\\f452\"}.fa-hire-a-helper:before{content:\"\\f3b0\"}.fa-history:before{content:\"\\f1da\"}.fa-hockey-puck:before{content:\"\\f453\"}.fa-holly-berry:before{content:\"\\f7aa\"}.fa-home:before{content:\"\\f015\"}.fa-hooli:before{content:\"\\f427\"}.fa-hornbill:before{content:\"\\f592\"}.fa-horse:before{content:\"\\f6f0\"}.fa-horse-head:before{content:\"\\f7ab\"}.fa-hospital:before{content:\"\\f0f8\"}.fa-hospital-alt:before{content:\"\\f47d\"}.fa-hospital-symbol:before{content:\"\\f47e\"}.fa-hot-tub:before{content:\"\\f593\"}.fa-hotdog:before{content:\"\\f80f\"}.fa-hotel:before{content:\"\\f594\"}.fa-hotjar:before{content:\"\\f3b1\"}.fa-hourglass:before{content:\"\\f254\"}.fa-hourglass-end:before{content:\"\\f253\"}.fa-hourglass-half:before{content:\"\\f252\"}.fa-hourglass-start:before{content:\"\\f251\"}.fa-house-damage:before{content:\"\\f6f1\"}.fa-houzz:before{content:\"\\f27c\"}.fa-hryvnia:before{content:\"\\f6f2\"}.fa-html5:before{content:\"\\f13b\"}.fa-hubspot:before{content:\"\\f3b2\"}.fa-i-cursor:before{content:\"\\f246\"}.fa-ice-cream:before{content:\"\\f810\"}.fa-icicles:before{content:\"\\f7ad\"}.fa-id-badge:before{content:\"\\f2c1\"}.fa-id-card:before{content:\"\\f2c2\"}.fa-id-card-alt:before{content:\"\\f47f\"}.fa-igloo:before{content:\"\\f7ae\"}.fa-image:before{content:\"\\f03e\"}.fa-images:before{content:\"\\f302\"}.fa-imdb:before{content:\"\\f2d8\"}.fa-inbox:before{content:\"\\f01c\"}.fa-indent:before{content:\"\\f03c\"}.fa-industry:before{content:\"\\f275\"}.fa-infinity:before{content:\"\\f534\"}.fa-info:before{content:\"\\f129\"}.fa-info-circle:before{content:\"\\f05a\"}.fa-instagram:before{content:\"\\f16d\"}.fa-intercom:before{content:\"\\f7af\"}.fa-internet-explorer:before{content:\"\\f26b\"}.fa-invision:before{content:\"\\f7b0\"}.fa-ioxhost:before{content:\"\\f208\"}.fa-italic:before{content:\"\\f033\"}.fa-itch-io:before{content:\"\\f83a\"}.fa-itunes:before{content:\"\\f3b4\"}.fa-itunes-note:before{content:\"\\f3b5\"}.fa-java:before{content:\"\\f4e4\"}.fa-jedi:before{content:\"\\f669\"}.fa-jedi-order:before{content:\"\\f50e\"}.fa-jenkins:before{content:\"\\f3b6\"}.fa-jira:before{content:\"\\f7b1\"}.fa-joget:before{content:\"\\f3b7\"}.fa-joint:before{content:\"\\f595\"}.fa-joomla:before{content:\"\\f1aa\"}.fa-journal-whills:before{content:\"\\f66a\"}.fa-js:before{content:\"\\f3b8\"}.fa-js-square:before{content:\"\\f3b9\"}.fa-jsfiddle:before{content:\"\\f1cc\"}.fa-kaaba:before{content:\"\\f66b\"}.fa-kaggle:before{content:\"\\f5fa\"}.fa-key:before{content:\"\\f084\"}.fa-keybase:before{content:\"\\f4f5\"}.fa-keyboard:before{content:\"\\f11c\"}.fa-keycdn:before{content:\"\\f3ba\"}.fa-khanda:before{content:\"\\f66d\"}.fa-kickstarter:before{content:\"\\f3bb\"}.fa-kickstarter-k:before{content:\"\\f3bc\"}.fa-kiss:before{content:\"\\f596\"}.fa-kiss-beam:before{content:\"\\f597\"}.fa-kiss-wink-heart:before{content:\"\\f598\"}.fa-kiwi-bird:before{content:\"\\f535\"}.fa-korvue:before{content:\"\\f42f\"}.fa-landmark:before{content:\"\\f66f\"}.fa-language:before{content:\"\\f1ab\"}.fa-laptop:before{content:\"\\f109\"}.fa-laptop-code:before{content:\"\\f5fc\"}.fa-laptop-medical:before{content:\"\\f812\"}.fa-laravel:before{content:\"\\f3bd\"}.fa-lastfm:before{content:\"\\f202\"}.fa-lastfm-square:before{content:\"\\f203\"}.fa-laugh:before{content:\"\\f599\"}.fa-laugh-beam:before{content:\"\\f59a\"}.fa-laugh-squint:before{content:\"\\f59b\"}.fa-laugh-wink:before{content:\"\\f59c\"}.fa-layer-group:before{content:\"\\f5fd\"}.fa-leaf:before{content:\"\\f06c\"}.fa-leanpub:before{content:\"\\f212\"}.fa-lemon:before{content:\"\\f094\"}.fa-less:before{content:\"\\f41d\"}.fa-less-than:before{content:\"\\f536\"}.fa-less-than-equal:before{content:\"\\f537\"}.fa-level-down-alt:before{content:\"\\f3be\"}.fa-level-up-alt:before{content:\"\\f3bf\"}.fa-life-ring:before{content:\"\\f1cd\"}.fa-lightbulb:before{content:\"\\f0eb\"}.fa-line:before{content:\"\\f3c0\"}.fa-link:before{content:\"\\f0c1\"}.fa-linkedin:before{content:\"\\f08c\"}.fa-linkedin-in:before{content:\"\\f0e1\"}.fa-linode:before{content:\"\\f2b8\"}.fa-linux:before{content:\"\\f17c\"}.fa-lira-sign:before{content:\"\\f195\"}.fa-list:before{content:\"\\f03a\"}.fa-list-alt:before{content:\"\\f022\"}.fa-list-ol:before{content:\"\\f0cb\"}.fa-list-ul:before{content:\"\\f0ca\"}.fa-location-arrow:before{content:\"\\f124\"}.fa-lock:before{content:\"\\f023\"}.fa-lock-open:before{content:\"\\f3c1\"}.fa-long-arrow-alt-down:before{content:\"\\f309\"}.fa-long-arrow-alt-left:before{content:\"\\f30a\"}.fa-long-arrow-alt-right:before{content:\"\\f30b\"}.fa-long-arrow-alt-up:before{content:\"\\f30c\"}.fa-low-vision:before{content:\"\\f2a8\"}.fa-luggage-cart:before{content:\"\\f59d\"}.fa-lyft:before{content:\"\\f3c3\"}.fa-magento:before{content:\"\\f3c4\"}.fa-magic:before{content:\"\\f0d0\"}.fa-magnet:before{content:\"\\f076\"}.fa-mail-bulk:before{content:\"\\f674\"}.fa-mailchimp:before{content:\"\\f59e\"}.fa-male:before{content:\"\\f183\"}.fa-mandalorian:before{content:\"\\f50f\"}.fa-map:before{content:\"\\f279\"}.fa-map-marked:before{content:\"\\f59f\"}.fa-map-marked-alt:before{content:\"\\f5a0\"}.fa-map-marker:before{content:\"\\f041\"}.fa-map-marker-alt:before{content:\"\\f3c5\"}.fa-map-pin:before{content:\"\\f276\"}.fa-map-signs:before{content:\"\\f277\"}.fa-markdown:before{content:\"\\f60f\"}.fa-marker:before{content:\"\\f5a1\"}.fa-mars:before{content:\"\\f222\"}.fa-mars-double:before{content:\"\\f227\"}.fa-mars-stroke:before{content:\"\\f229\"}.fa-mars-stroke-h:before{content:\"\\f22b\"}.fa-mars-stroke-v:before{content:\"\\f22a\"}.fa-mask:before{content:\"\\f6fa\"}.fa-mastodon:before{content:\"\\f4f6\"}.fa-maxcdn:before{content:\"\\f136\"}.fa-medal:before{content:\"\\f5a2\"}.fa-medapps:before{content:\"\\f3c6\"}.fa-medium:before{content:\"\\f23a\"}.fa-medium-m:before{content:\"\\f3c7\"}.fa-medkit:before{content:\"\\f0fa\"}.fa-medrt:before{content:\"\\f3c8\"}.fa-meetup:before{content:\"\\f2e0\"}.fa-megaport:before{content:\"\\f5a3\"}.fa-meh:before{content:\"\\f11a\"}.fa-meh-blank:before{content:\"\\f5a4\"}.fa-meh-rolling-eyes:before{content:\"\\f5a5\"}.fa-memory:before{content:\"\\f538\"}.fa-mendeley:before{content:\"\\f7b3\"}.fa-menorah:before{content:\"\\f676\"}.fa-mercury:before{content:\"\\f223\"}.fa-meteor:before{content:\"\\f753\"}.fa-microchip:before{content:\"\\f2db\"}.fa-microphone:before{content:\"\\f130\"}.fa-microphone-alt:before{content:\"\\f3c9\"}.fa-microphone-alt-slash:before{content:\"\\f539\"}.fa-microphone-slash:before{content:\"\\f131\"}.fa-microscope:before{content:\"\\f610\"}.fa-microsoft:before{content:\"\\f3ca\"}.fa-minus:before{content:\"\\f068\"}.fa-minus-circle:before{content:\"\\f056\"}.fa-minus-square:before{content:\"\\f146\"}.fa-mitten:before{content:\"\\f7b5\"}.fa-mix:before{content:\"\\f3cb\"}.fa-mixcloud:before{content:\"\\f289\"}.fa-mizuni:before{content:\"\\f3cc\"}.fa-mobile:before{content:\"\\f10b\"}.fa-mobile-alt:before{content:\"\\f3cd\"}.fa-modx:before{content:\"\\f285\"}.fa-monero:before{content:\"\\f3d0\"}.fa-money-bill:before{content:\"\\f0d6\"}.fa-money-bill-alt:before{content:\"\\f3d1\"}.fa-money-bill-wave:before{content:\"\\f53a\"}.fa-money-bill-wave-alt:before{content:\"\\f53b\"}.fa-money-check:before{content:\"\\f53c\"}.fa-money-check-alt:before{content:\"\\f53d\"}.fa-monument:before{content:\"\\f5a6\"}.fa-moon:before{content:\"\\f186\"}.fa-mortar-pestle:before{content:\"\\f5a7\"}.fa-mosque:before{content:\"\\f678\"}.fa-motorcycle:before{content:\"\\f21c\"}.fa-mountain:before{content:\"\\f6fc\"}.fa-mouse-pointer:before{content:\"\\f245\"}.fa-mug-hot:before{content:\"\\f7b6\"}.fa-music:before{content:\"\\f001\"}.fa-napster:before{content:\"\\f3d2\"}.fa-neos:before{content:\"\\f612\"}.fa-network-wired:before{content:\"\\f6ff\"}.fa-neuter:before{content:\"\\f22c\"}.fa-newspaper:before{content:\"\\f1ea\"}.fa-nimblr:before{content:\"\\f5a8\"}.fa-nintendo-switch:before{content:\"\\f418\"}.fa-node:before{content:\"\\f419\"}.fa-node-js:before{content:\"\\f3d3\"}.fa-not-equal:before{content:\"\\f53e\"}.fa-notes-medical:before{content:\"\\f481\"}.fa-npm:before{content:\"\\f3d4\"}.fa-ns8:before{content:\"\\f3d5\"}.fa-nutritionix:before{content:\"\\f3d6\"}.fa-object-group:before{content:\"\\f247\"}.fa-object-ungroup:before{content:\"\\f248\"}.fa-odnoklassniki:before{content:\"\\f263\"}.fa-odnoklassniki-square:before{content:\"\\f264\"}.fa-oil-can:before{content:\"\\f613\"}.fa-old-republic:before{content:\"\\f510\"}.fa-om:before{content:\"\\f679\"}.fa-opencart:before{content:\"\\f23d\"}.fa-openid:before{content:\"\\f19b\"}.fa-opera:before{content:\"\\f26a\"}.fa-optin-monster:before{content:\"\\f23c\"}.fa-osi:before{content:\"\\f41a\"}.fa-otter:before{content:\"\\f700\"}.fa-outdent:before{content:\"\\f03b\"}.fa-page4:before{content:\"\\f3d7\"}.fa-pagelines:before{content:\"\\f18c\"}.fa-pager:before{content:\"\\f815\"}.fa-paint-brush:before{content:\"\\f1fc\"}.fa-paint-roller:before{content:\"\\f5aa\"}.fa-palette:before{content:\"\\f53f\"}.fa-palfed:before{content:\"\\f3d8\"}.fa-pallet:before{content:\"\\f482\"}.fa-paper-plane:before{content:\"\\f1d8\"}.fa-paperclip:before{content:\"\\f0c6\"}.fa-parachute-box:before{content:\"\\f4cd\"}.fa-paragraph:before{content:\"\\f1dd\"}.fa-parking:before{content:\"\\f540\"}.fa-passport:before{content:\"\\f5ab\"}.fa-pastafarianism:before{content:\"\\f67b\"}.fa-paste:before{content:\"\\f0ea\"}.fa-patreon:before{content:\"\\f3d9\"}.fa-pause:before{content:\"\\f04c\"}.fa-pause-circle:before{content:\"\\f28b\"}.fa-paw:before{content:\"\\f1b0\"}.fa-paypal:before{content:\"\\f1ed\"}.fa-peace:before{content:\"\\f67c\"}.fa-pen:before{content:\"\\f304\"}.fa-pen-alt:before{content:\"\\f305\"}.fa-pen-fancy:before{content:\"\\f5ac\"}.fa-pen-nib:before{content:\"\\f5ad\"}.fa-pen-square:before{content:\"\\f14b\"}.fa-pencil-alt:before{content:\"\\f303\"}.fa-pencil-ruler:before{content:\"\\f5ae\"}.fa-penny-arcade:before{content:\"\\f704\"}.fa-people-carry:before{content:\"\\f4ce\"}.fa-pepper-hot:before{content:\"\\f816\"}.fa-percent:before{content:\"\\f295\"}.fa-percentage:before{content:\"\\f541\"}.fa-periscope:before{content:\"\\f3da\"}.fa-person-booth:before{content:\"\\f756\"}.fa-phabricator:before{content:\"\\f3db\"}.fa-phoenix-framework:before{content:\"\\f3dc\"}.fa-phoenix-squadron:before{content:\"\\f511\"}.fa-phone:before{content:\"\\f095\"}.fa-phone-slash:before{content:\"\\f3dd\"}.fa-phone-square:before{content:\"\\f098\"}.fa-phone-volume:before{content:\"\\f2a0\"}.fa-php:before{content:\"\\f457\"}.fa-pied-piper:before{content:\"\\f2ae\"}.fa-pied-piper-alt:before{content:\"\\f1a8\"}.fa-pied-piper-hat:before{content:\"\\f4e5\"}.fa-pied-piper-pp:before{content:\"\\f1a7\"}.fa-piggy-bank:before{content:\"\\f4d3\"}.fa-pills:before{content:\"\\f484\"}.fa-pinterest:before{content:\"\\f0d2\"}.fa-pinterest-p:before{content:\"\\f231\"}.fa-pinterest-square:before{content:\"\\f0d3\"}.fa-pizza-slice:before{content:\"\\f818\"}.fa-place-of-worship:before{content:\"\\f67f\"}.fa-plane:before{content:\"\\f072\"}.fa-plane-arrival:before{content:\"\\f5af\"}.fa-plane-departure:before{content:\"\\f5b0\"}.fa-play:before{content:\"\\f04b\"}.fa-play-circle:before{content:\"\\f144\"}.fa-playstation:before{content:\"\\f3df\"}.fa-plug:before{content:\"\\f1e6\"}.fa-plus:before{content:\"\\f067\"}.fa-plus-circle:before{content:\"\\f055\"}.fa-plus-square:before{content:\"\\f0fe\"}.fa-podcast:before{content:\"\\f2ce\"}.fa-poll:before{content:\"\\f681\"}.fa-poll-h:before{content:\"\\f682\"}.fa-poo:before{content:\"\\f2fe\"}.fa-poo-storm:before{content:\"\\f75a\"}.fa-poop:before{content:\"\\f619\"}.fa-portrait:before{content:\"\\f3e0\"}.fa-pound-sign:before{content:\"\\f154\"}.fa-power-off:before{content:\"\\f011\"}.fa-pray:before{content:\"\\f683\"}.fa-praying-hands:before{content:\"\\f684\"}.fa-prescription:before{content:\"\\f5b1\"}.fa-prescription-bottle:before{content:\"\\f485\"}.fa-prescription-bottle-alt:before{content:\"\\f486\"}.fa-print:before{content:\"\\f02f\"}.fa-procedures:before{content:\"\\f487\"}.fa-product-hunt:before{content:\"\\f288\"}.fa-project-diagram:before{content:\"\\f542\"}.fa-pushed:before{content:\"\\f3e1\"}.fa-puzzle-piece:before{content:\"\\f12e\"}.fa-python:before{content:\"\\f3e2\"}.fa-qq:before{content:\"\\f1d6\"}.fa-qrcode:before{content:\"\\f029\"}.fa-question:before{content:\"\\f128\"}.fa-question-circle:before{content:\"\\f059\"}.fa-quidditch:before{content:\"\\f458\"}.fa-quinscape:before{content:\"\\f459\"}.fa-quora:before{content:\"\\f2c4\"}.fa-quote-left:before{content:\"\\f10d\"}.fa-quote-right:before{content:\"\\f10e\"}.fa-quran:before{content:\"\\f687\"}.fa-r-project:before{content:\"\\f4f7\"}.fa-radiation:before{content:\"\\f7b9\"}.fa-radiation-alt:before{content:\"\\f7ba\"}.fa-rainbow:before{content:\"\\f75b\"}.fa-random:before{content:\"\\f074\"}.fa-raspberry-pi:before{content:\"\\f7bb\"}.fa-ravelry:before{content:\"\\f2d9\"}.fa-react:before{content:\"\\f41b\"}.fa-reacteurope:before{content:\"\\f75d\"}.fa-readme:before{content:\"\\f4d5\"}.fa-rebel:before{content:\"\\f1d0\"}.fa-receipt:before{content:\"\\f543\"}.fa-recycle:before{content:\"\\f1b8\"}.fa-red-river:before{content:\"\\f3e3\"}.fa-reddit:before{content:\"\\f1a1\"}.fa-reddit-alien:before{content:\"\\f281\"}.fa-reddit-square:before{content:\"\\f1a2\"}.fa-redhat:before{content:\"\\f7bc\"}.fa-redo:before{content:\"\\f01e\"}.fa-redo-alt:before{content:\"\\f2f9\"}.fa-registered:before{content:\"\\f25d\"}.fa-renren:before{content:\"\\f18b\"}.fa-reply:before{content:\"\\f3e5\"}.fa-reply-all:before{content:\"\\f122\"}.fa-replyd:before{content:\"\\f3e6\"}.fa-republican:before{content:\"\\f75e\"}.fa-researchgate:before{content:\"\\f4f8\"}.fa-resolving:before{content:\"\\f3e7\"}.fa-restroom:before{content:\"\\f7bd\"}.fa-retweet:before{content:\"\\f079\"}.fa-rev:before{content:\"\\f5b2\"}.fa-ribbon:before{content:\"\\f4d6\"}.fa-ring:before{content:\"\\f70b\"}.fa-road:before{content:\"\\f018\"}.fa-robot:before{content:\"\\f544\"}.fa-rocket:before{content:\"\\f135\"}.fa-rocketchat:before{content:\"\\f3e8\"}.fa-rockrms:before{content:\"\\f3e9\"}.fa-route:before{content:\"\\f4d7\"}.fa-rss:before{content:\"\\f09e\"}.fa-rss-square:before{content:\"\\f143\"}.fa-ruble-sign:before{content:\"\\f158\"}.fa-ruler:before{content:\"\\f545\"}.fa-ruler-combined:before{content:\"\\f546\"}.fa-ruler-horizontal:before{content:\"\\f547\"}.fa-ruler-vertical:before{content:\"\\f548\"}.fa-running:before{content:\"\\f70c\"}.fa-rupee-sign:before{content:\"\\f156\"}.fa-sad-cry:before{content:\"\\f5b3\"}.fa-sad-tear:before{content:\"\\f5b4\"}.fa-safari:before{content:\"\\f267\"}.fa-salesforce:before{content:\"\\f83b\"}.fa-sass:before{content:\"\\f41e\"}.fa-satellite:before{content:\"\\f7bf\"}.fa-satellite-dish:before{content:\"\\f7c0\"}.fa-save:before{content:\"\\f0c7\"}.fa-schlix:before{content:\"\\f3ea\"}.fa-school:before{content:\"\\f549\"}.fa-screwdriver:before{content:\"\\f54a\"}.fa-scribd:before{content:\"\\f28a\"}.fa-scroll:before{content:\"\\f70e\"}.fa-sd-card:before{content:\"\\f7c2\"}.fa-search:before{content:\"\\f002\"}.fa-search-dollar:before{content:\"\\f688\"}.fa-search-location:before{content:\"\\f689\"}.fa-search-minus:before{content:\"\\f010\"}.fa-search-plus:before{content:\"\\f00e\"}.fa-searchengin:before{content:\"\\f3eb\"}.fa-seedling:before{content:\"\\f4d8\"}.fa-sellcast:before{content:\"\\f2da\"}.fa-sellsy:before{content:\"\\f213\"}.fa-server:before{content:\"\\f233\"}.fa-servicestack:before{content:\"\\f3ec\"}.fa-shapes:before{content:\"\\f61f\"}.fa-share:before{content:\"\\f064\"}.fa-share-alt:before{content:\"\\f1e0\"}.fa-share-alt-square:before{content:\"\\f1e1\"}.fa-share-square:before{content:\"\\f14d\"}.fa-shekel-sign:before{content:\"\\f20b\"}.fa-shield-alt:before{content:\"\\f3ed\"}.fa-ship:before{content:\"\\f21a\"}.fa-shipping-fast:before{content:\"\\f48b\"}.fa-shirtsinbulk:before{content:\"\\f214\"}.fa-shoe-prints:before{content:\"\\f54b\"}.fa-shopping-bag:before{content:\"\\f290\"}.fa-shopping-basket:before{content:\"\\f291\"}.fa-shopping-cart:before{content:\"\\f07a\"}.fa-shopware:before{content:\"\\f5b5\"}.fa-shower:before{content:\"\\f2cc\"}.fa-shuttle-van:before{content:\"\\f5b6\"}.fa-sign:before{content:\"\\f4d9\"}.fa-sign-in-alt:before{content:\"\\f2f6\"}.fa-sign-language:before{content:\"\\f2a7\"}.fa-sign-out-alt:before{content:\"\\f2f5\"}.fa-signal:before{content:\"\\f012\"}.fa-signature:before{content:\"\\f5b7\"}.fa-sim-card:before{content:\"\\f7c4\"}.fa-simplybuilt:before{content:\"\\f215\"}.fa-sistrix:before{content:\"\\f3ee\"}.fa-sitemap:before{content:\"\\f0e8\"}.fa-sith:before{content:\"\\f512\"}.fa-skating:before{content:\"\\f7c5\"}.fa-sketch:before{content:\"\\f7c6\"}.fa-skiing:before{content:\"\\f7c9\"}.fa-skiing-nordic:before{content:\"\\f7ca\"}.fa-skull:before{content:\"\\f54c\"}.fa-skull-crossbones:before{content:\"\\f714\"}.fa-skyatlas:before{content:\"\\f216\"}.fa-skype:before{content:\"\\f17e\"}.fa-slack:before{content:\"\\f198\"}.fa-slack-hash:before{content:\"\\f3ef\"}.fa-slash:before{content:\"\\f715\"}.fa-sleigh:before{content:\"\\f7cc\"}.fa-sliders-h:before{content:\"\\f1de\"}.fa-slideshare:before{content:\"\\f1e7\"}.fa-smile:before{content:\"\\f118\"}.fa-smile-beam:before{content:\"\\f5b8\"}.fa-smile-wink:before{content:\"\\f4da\"}.fa-smog:before{content:\"\\f75f\"}.fa-smoking:before{content:\"\\f48d\"}.fa-smoking-ban:before{content:\"\\f54d\"}.fa-sms:before{content:\"\\f7cd\"}.fa-snapchat:before{content:\"\\f2ab\"}.fa-snapchat-ghost:before{content:\"\\f2ac\"}.fa-snapchat-square:before{content:\"\\f2ad\"}.fa-snowboarding:before{content:\"\\f7ce\"}.fa-snowflake:before{content:\"\\f2dc\"}.fa-snowman:before{content:\"\\f7d0\"}.fa-snowplow:before{content:\"\\f7d2\"}.fa-socks:before{content:\"\\f696\"}.fa-solar-panel:before{content:\"\\f5ba\"}.fa-sort:before{content:\"\\f0dc\"}.fa-sort-alpha-down:before{content:\"\\f15d\"}.fa-sort-alpha-up:before{content:\"\\f15e\"}.fa-sort-amount-down:before{content:\"\\f160\"}.fa-sort-amount-up:before{content:\"\\f161\"}.fa-sort-down:before{content:\"\\f0dd\"}.fa-sort-numeric-down:before{content:\"\\f162\"}.fa-sort-numeric-up:before{content:\"\\f163\"}.fa-sort-up:before{content:\"\\f0de\"}.fa-soundcloud:before{content:\"\\f1be\"}.fa-sourcetree:before{content:\"\\f7d3\"}.fa-spa:before{content:\"\\f5bb\"}.fa-space-shuttle:before{content:\"\\f197\"}.fa-speakap:before{content:\"\\f3f3\"}.fa-speaker-deck:before{content:\"\\f83c\"}.fa-spider:before{content:\"\\f717\"}.fa-spinner:before{content:\"\\f110\"}.fa-splotch:before{content:\"\\f5bc\"}.fa-spotify:before{content:\"\\f1bc\"}.fa-spray-can:before{content:\"\\f5bd\"}.fa-square:before{content:\"\\f0c8\"}.fa-square-full:before{content:\"\\f45c\"}.fa-square-root-alt:before{content:\"\\f698\"}.fa-squarespace:before{content:\"\\f5be\"}.fa-stack-exchange:before{content:\"\\f18d\"}.fa-stack-overflow:before{content:\"\\f16c\"}.fa-stamp:before{content:\"\\f5bf\"}.fa-star:before{content:\"\\f005\"}.fa-star-and-crescent:before{content:\"\\f699\"}.fa-star-half:before{content:\"\\f089\"}.fa-star-half-alt:before{content:\"\\f5c0\"}.fa-star-of-david:before{content:\"\\f69a\"}.fa-star-of-life:before{content:\"\\f621\"}.fa-staylinked:before{content:\"\\f3f5\"}.fa-steam:before{content:\"\\f1b6\"}.fa-steam-square:before{content:\"\\f1b7\"}.fa-steam-symbol:before{content:\"\\f3f6\"}.fa-step-backward:before{content:\"\\f048\"}.fa-step-forward:before{content:\"\\f051\"}.fa-stethoscope:before{content:\"\\f0f1\"}.fa-sticker-mule:before{content:\"\\f3f7\"}.fa-sticky-note:before{content:\"\\f249\"}.fa-stop:before{content:\"\\f04d\"}.fa-stop-circle:before{content:\"\\f28d\"}.fa-stopwatch:before{content:\"\\f2f2\"}.fa-store:before{content:\"\\f54e\"}.fa-store-alt:before{content:\"\\f54f\"}.fa-strava:before{content:\"\\f428\"}.fa-stream:before{content:\"\\f550\"}.fa-street-view:before{content:\"\\f21d\"}.fa-strikethrough:before{content:\"\\f0cc\"}.fa-stripe:before{content:\"\\f429\"}.fa-stripe-s:before{content:\"\\f42a\"}.fa-stroopwafel:before{content:\"\\f551\"}.fa-studiovinari:before{content:\"\\f3f8\"}.fa-stumbleupon:before{content:\"\\f1a4\"}.fa-stumbleupon-circle:before{content:\"\\f1a3\"}.fa-subscript:before{content:\"\\f12c\"}.fa-subway:before{content:\"\\f239\"}.fa-suitcase:before{content:\"\\f0f2\"}.fa-suitcase-rolling:before{content:\"\\f5c1\"}.fa-sun:before{content:\"\\f185\"}.fa-superpowers:before{content:\"\\f2dd\"}.fa-superscript:before{content:\"\\f12b\"}.fa-supple:before{content:\"\\f3f9\"}.fa-surprise:before{content:\"\\f5c2\"}.fa-suse:before{content:\"\\f7d6\"}.fa-swatchbook:before{content:\"\\f5c3\"}.fa-swimmer:before{content:\"\\f5c4\"}.fa-swimming-pool:before{content:\"\\f5c5\"}.fa-symfony:before{content:\"\\f83d\"}.fa-synagogue:before{content:\"\\f69b\"}.fa-sync:before{content:\"\\f021\"}.fa-sync-alt:before{content:\"\\f2f1\"}.fa-syringe:before{content:\"\\f48e\"}.fa-table:before{content:\"\\f0ce\"}.fa-table-tennis:before{content:\"\\f45d\"}.fa-tablet:before{content:\"\\f10a\"}.fa-tablet-alt:before{content:\"\\f3fa\"}.fa-tablets:before{content:\"\\f490\"}.fa-tachometer-alt:before{content:\"\\f3fd\"}.fa-tag:before{content:\"\\f02b\"}.fa-tags:before{content:\"\\f02c\"}.fa-tape:before{content:\"\\f4db\"}.fa-tasks:before{content:\"\\f0ae\"}.fa-taxi:before{content:\"\\f1ba\"}.fa-teamspeak:before{content:\"\\f4f9\"}.fa-teeth:before{content:\"\\f62e\"}.fa-teeth-open:before{content:\"\\f62f\"}.fa-telegram:before{content:\"\\f2c6\"}.fa-telegram-plane:before{content:\"\\f3fe\"}.fa-temperature-high:before{content:\"\\f769\"}.fa-temperature-low:before{content:\"\\f76b\"}.fa-tencent-weibo:before{content:\"\\f1d5\"}.fa-tenge:before{content:\"\\f7d7\"}.fa-terminal:before{content:\"\\f120\"}.fa-text-height:before{content:\"\\f034\"}.fa-text-width:before{content:\"\\f035\"}.fa-th:before{content:\"\\f00a\"}.fa-th-large:before{content:\"\\f009\"}.fa-th-list:before{content:\"\\f00b\"}.fa-the-red-yeti:before{content:\"\\f69d\"}.fa-theater-masks:before{content:\"\\f630\"}.fa-themeco:before{content:\"\\f5c6\"}.fa-themeisle:before{content:\"\\f2b2\"}.fa-thermometer:before{content:\"\\f491\"}.fa-thermometer-empty:before{content:\"\\f2cb\"}.fa-thermometer-full:before{content:\"\\f2c7\"}.fa-thermometer-half:before{content:\"\\f2c9\"}.fa-thermometer-quarter:before{content:\"\\f2ca\"}.fa-thermometer-three-quarters:before{content:\"\\f2c8\"}.fa-think-peaks:before{content:\"\\f731\"}.fa-thumbs-down:before{content:\"\\f165\"}.fa-thumbs-up:before{content:\"\\f164\"}.fa-thumbtack:before{content:\"\\f08d\"}.fa-ticket-alt:before{content:\"\\f3ff\"}.fa-times:before{content:\"\\f00d\"}.fa-times-circle:before{content:\"\\f057\"}.fa-tint:before{content:\"\\f043\"}.fa-tint-slash:before{content:\"\\f5c7\"}.fa-tired:before{content:\"\\f5c8\"}.fa-toggle-off:before{content:\"\\f204\"}.fa-toggle-on:before{content:\"\\f205\"}.fa-toilet:before{content:\"\\f7d8\"}.fa-toilet-paper:before{content:\"\\f71e\"}.fa-toolbox:before{content:\"\\f552\"}.fa-tools:before{content:\"\\f7d9\"}.fa-tooth:before{content:\"\\f5c9\"}.fa-torah:before{content:\"\\f6a0\"}.fa-torii-gate:before{content:\"\\f6a1\"}.fa-tractor:before{content:\"\\f722\"}.fa-trade-federation:before{content:\"\\f513\"}.fa-trademark:before{content:\"\\f25c\"}.fa-traffic-light:before{content:\"\\f637\"}.fa-train:before{content:\"\\f238\"}.fa-tram:before{content:\"\\f7da\"}.fa-transgender:before{content:\"\\f224\"}.fa-transgender-alt:before{content:\"\\f225\"}.fa-trash:before{content:\"\\f1f8\"}.fa-trash-alt:before{content:\"\\f2ed\"}.fa-trash-restore:before{content:\"\\f829\"}.fa-trash-restore-alt:before{content:\"\\f82a\"}.fa-tree:before{content:\"\\f1bb\"}.fa-trello:before{content:\"\\f181\"}.fa-tripadvisor:before{content:\"\\f262\"}.fa-trophy:before{content:\"\\f091\"}.fa-truck:before{content:\"\\f0d1\"}.fa-truck-loading:before{content:\"\\f4de\"}.fa-truck-monster:before{content:\"\\f63b\"}.fa-truck-moving:before{content:\"\\f4df\"}.fa-truck-pickup:before{content:\"\\f63c\"}.fa-tshirt:before{content:\"\\f553\"}.fa-tty:before{content:\"\\f1e4\"}.fa-tumblr:before{content:\"\\f173\"}.fa-tumblr-square:before{content:\"\\f174\"}.fa-tv:before{content:\"\\f26c\"}.fa-twitch:before{content:\"\\f1e8\"}.fa-twitter:before{content:\"\\f099\"}.fa-twitter-square:before{content:\"\\f081\"}.fa-typo3:before{content:\"\\f42b\"}.fa-uber:before{content:\"\\f402\"}.fa-ubuntu:before{content:\"\\f7df\"}.fa-uikit:before{content:\"\\f403\"}.fa-umbrella:before{content:\"\\f0e9\"}.fa-umbrella-beach:before{content:\"\\f5ca\"}.fa-underline:before{content:\"\\f0cd\"}.fa-undo:before{content:\"\\f0e2\"}.fa-undo-alt:before{content:\"\\f2ea\"}.fa-uniregistry:before{content:\"\\f404\"}.fa-universal-access:before{content:\"\\f29a\"}.fa-university:before{content:\"\\f19c\"}.fa-unlink:before{content:\"\\f127\"}.fa-unlock:before{content:\"\\f09c\"}.fa-unlock-alt:before{content:\"\\f13e\"}.fa-untappd:before{content:\"\\f405\"}.fa-upload:before{content:\"\\f093\"}.fa-ups:before{content:\"\\f7e0\"}.fa-usb:before{content:\"\\f287\"}.fa-user:before{content:\"\\f007\"}.fa-user-alt:before{content:\"\\f406\"}.fa-user-alt-slash:before{content:\"\\f4fa\"}.fa-user-astronaut:before{content:\"\\f4fb\"}.fa-user-check:before{content:\"\\f4fc\"}.fa-user-circle:before{content:\"\\f2bd\"}.fa-user-clock:before{content:\"\\f4fd\"}.fa-user-cog:before{content:\"\\f4fe\"}.fa-user-edit:before{content:\"\\f4ff\"}.fa-user-friends:before{content:\"\\f500\"}.fa-user-graduate:before{content:\"\\f501\"}.fa-user-injured:before{content:\"\\f728\"}.fa-user-lock:before{content:\"\\f502\"}.fa-user-md:before{content:\"\\f0f0\"}.fa-user-minus:before{content:\"\\f503\"}.fa-user-ninja:before{content:\"\\f504\"}.fa-user-nurse:before{content:\"\\f82f\"}.fa-user-plus:before{content:\"\\f234\"}.fa-user-secret:before{content:\"\\f21b\"}.fa-user-shield:before{content:\"\\f505\"}.fa-user-slash:before{content:\"\\f506\"}.fa-user-tag:before{content:\"\\f507\"}.fa-user-tie:before{content:\"\\f508\"}.fa-user-times:before{content:\"\\f235\"}.fa-users:before{content:\"\\f0c0\"}.fa-users-cog:before{content:\"\\f509\"}.fa-usps:before{content:\"\\f7e1\"}.fa-ussunnah:before{content:\"\\f407\"}.fa-utensil-spoon:before{content:\"\\f2e5\"}.fa-utensils:before{content:\"\\f2e7\"}.fa-vaadin:before{content:\"\\f408\"}.fa-vector-square:before{content:\"\\f5cb\"}.fa-venus:before{content:\"\\f221\"}.fa-venus-double:before{content:\"\\f226\"}.fa-venus-mars:before{content:\"\\f228\"}.fa-viacoin:before{content:\"\\f237\"}.fa-viadeo:before{content:\"\\f2a9\"}.fa-viadeo-square:before{content:\"\\f2aa\"}.fa-vial:before{content:\"\\f492\"}.fa-vials:before{content:\"\\f493\"}.fa-viber:before{content:\"\\f409\"}.fa-video:before{content:\"\\f03d\"}.fa-video-slash:before{content:\"\\f4e2\"}.fa-vihara:before{content:\"\\f6a7\"}.fa-vimeo:before{content:\"\\f40a\"}.fa-vimeo-square:before{content:\"\\f194\"}.fa-vimeo-v:before{content:\"\\f27d\"}.fa-vine:before{content:\"\\f1ca\"}.fa-vk:before{content:\"\\f189\"}.fa-vnv:before{content:\"\\f40b\"}.fa-volleyball-ball:before{content:\"\\f45f\"}.fa-volume-down:before{content:\"\\f027\"}.fa-volume-mute:before{content:\"\\f6a9\"}.fa-volume-off:before{content:\"\\f026\"}.fa-volume-up:before{content:\"\\f028\"}.fa-vote-yea:before{content:\"\\f772\"}.fa-vr-cardboard:before{content:\"\\f729\"}.fa-vuejs:before{content:\"\\f41f\"}.fa-walking:before{content:\"\\f554\"}.fa-wallet:before{content:\"\\f555\"}.fa-warehouse:before{content:\"\\f494\"}.fa-water:before{content:\"\\f773\"}.fa-wave-square:before{content:\"\\f83e\"}.fa-waze:before{content:\"\\f83f\"}.fa-weebly:before{content:\"\\f5cc\"}.fa-weibo:before{content:\"\\f18a\"}.fa-weight:before{content:\"\\f496\"}.fa-weight-hanging:before{content:\"\\f5cd\"}.fa-weixin:before{content:\"\\f1d7\"}.fa-whatsapp:before{content:\"\\f232\"}.fa-whatsapp-square:before{content:\"\\f40c\"}.fa-wheelchair:before{content:\"\\f193\"}.fa-whmcs:before{content:\"\\f40d\"}.fa-wifi:before{content:\"\\f1eb\"}.fa-wikipedia-w:before{content:\"\\f266\"}.fa-wind:before{content:\"\\f72e\"}.fa-window-close:before{content:\"\\f410\"}.fa-window-maximize:before{content:\"\\f2d0\"}.fa-window-minimize:before{content:\"\\f2d1\"}.fa-window-restore:before{content:\"\\f2d2\"}.fa-windows:before{content:\"\\f17a\"}.fa-wine-bottle:before{content:\"\\f72f\"}.fa-wine-glass:before{content:\"\\f4e3\"}.fa-wine-glass-alt:before{content:\"\\f5ce\"}.fa-wix:before{content:\"\\f5cf\"}.fa-wizards-of-the-coast:before{content:\"\\f730\"}.fa-wolf-pack-battalion:before{content:\"\\f514\"}.fa-won-sign:before{content:\"\\f159\"}.fa-wordpress:before{content:\"\\f19a\"}.fa-wordpress-simple:before{content:\"\\f411\"}.fa-wpbeginner:before{content:\"\\f297\"}.fa-wpexplorer:before{content:\"\\f2de\"}.fa-wpforms:before{content:\"\\f298\"}.fa-wpressr:before{content:\"\\f3e4\"}.fa-wrench:before{content:\"\\f0ad\"}.fa-x-ray:before{content:\"\\f497\"}.fa-xbox:before{content:\"\\f412\"}.fa-xing:before{content:\"\\f168\"}.fa-xing-square:before{content:\"\\f169\"}.fa-y-combinator:before{content:\"\\f23b\"}.fa-yahoo:before{content:\"\\f19e\"}.fa-yammer:before{content:\"\\f840\"}.fa-yandex:before{content:\"\\f413\"}.fa-yandex-international:before{content:\"\\f414\"}.fa-yarn:before{content:\"\\f7e3\"}.fa-yelp:before{content:\"\\f1e9\"}.fa-yen-sign:before{content:\"\\f157\"}.fa-yin-yang:before{content:\"\\f6ad\"}.fa-yoast:before{content:\"\\f2b1\"}.fa-youtube:before{content:\"\\f167\"}.fa-youtube-square:before{content:\"\\f431\"}.fa-zhihu:before{content:\"\\f63f\"}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 5
    }
  },
  {
    "path": "src/main/resources/font-awesome/css/regular.min.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Font Awesome Free 5.8.1 by @fontawesome - https://fontawesome.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "@font-face{font-family:\"Font Awesome 5 Free\";font-style:normal;font-weight:400;font-display:auto;src:url(../webfonts/fa-regular-400.eot);src:url(../webfonts/fa-regular-400.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-regular-400.woff2) format(\"woff2\"),url(../webfonts/fa-regular-400.woff) format(\"woff\"),url(../webfonts/fa-regular-400.ttf) format(\"truetype\"),url(../webfonts/fa-regular-400.svg#fontawesome) format(\"svg\")}.far{font-family:\"Font Awesome 5 Free\";font-weight:400}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 5
    }
  },
  {
    "path": "src/main/resources/font-awesome/css/solid.min.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Font Awesome Free 5.8.1 by @fontawesome - https://fontawesome.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "@font-face{font-family:\"Font Awesome 5 Free\";font-style:normal;font-weight:900;font-display:auto;src:url(../webfonts/fa-solid-900.eot);src:url(../webfonts/fa-solid-900.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-solid-900.woff2) format(\"woff2\"),url(../webfonts/fa-solid-900.woff) format(\"woff\"),url(../webfonts/fa-solid-900.ttf) format(\"truetype\"),url(../webfonts/fa-solid-900.svg#fontawesome) format(\"svg\")}.fa,.fas{font-family:\"Font Awesome 5 Free\";font-weight:900}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 5
    }
  },
  {
    "path": "src/main/resources/font-awesome/css/svg-with-js.min.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Font Awesome Free 5.8.1 by @fontawesome - https://fontawesome.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".svg-inline--fa,svg:not(:root).svg-inline--fa{overflow:visible}.svg-inline--fa{display:inline-block;font-size:inherit;height:1em;vertical-align:-.125em}.svg-inline--fa.fa-lg{vertical-align:-.225em}.svg-inline--fa.fa-w-1{width:.0625em}.svg-inline--fa.fa-w-2{width:.125em}.svg-inline--fa.fa-w-3{width:.1875em}.svg-inline--fa.fa-w-4{width:.25em}.svg-inline--fa.fa-w-5{width:.3125em}.svg-inline--fa.fa-w-6{width:.375em}.svg-inline--fa.fa-w-7{width:.4375em}.svg-inline--fa.fa-w-8{width:.5em}.svg-inline--fa.fa-w-9{width:.5625em}.svg-inline--fa.fa-w-10{width:.625em}.svg-inline--fa.fa-w-11{width:.6875em}.svg-inline--fa.fa-w-12{width:.75em}.svg-inline--fa.fa-w-13{width:.8125em}.svg-inline--fa.fa-w-14{width:.875em}.svg-inline--fa.fa-w-15{width:.9375em}.svg-inline--fa.fa-w-16{width:1em}.svg-inline--fa.fa-w-17{width:1.0625em}.svg-inline--fa.fa-w-18{width:1.125em}.svg-inline--fa.fa-w-19{width:1.1875em}.svg-inline--fa.fa-w-20{width:1.25em}.svg-inline--fa.fa-pull-left{margin-right:.3em;width:auto}.svg-inline--fa.fa-pull-right{margin-left:.3em;width:auto}.svg-inline--fa.fa-border{height:1.5em}.svg-inline--fa.fa-li{width:2em}.svg-inline--fa.fa-fw{width:1.25em}.fa-layers svg.svg-inline--fa{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.fa-layers{display:inline-block;height:1em;position:relative;text-align:center;vertical-align:-.125em;width:1em}.fa-layers svg.svg-inline--fa{transform-origin:center center}.fa-layers-counter,.fa-layers-text{display:inline-block;position:absolute;text-align:center}.fa-layers-text{left:50%;top:50%;transform:translate(-50%,-50%);transform-origin:center center}.fa-layers-counter{background-color:#ff253a;border-radius:1em;box-sizing:border-box;color:#fff;height:1.5em;line-height:1;max-width:5em;min-width:1.5em;overflow:hidden;padding:.25em;right:0;text-overflow:ellipsis;top:0;transform:scale(.25);transform-origin:top right}.fa-layers-bottom-right{bottom:0;right:0;top:auto;transform:scale(.25);transform-origin:bottom right}.fa-layers-bottom-left{bottom:0;left:0;right:auto;top:auto;transform:scale(.25);transform-origin:bottom left}.fa-layers-top-right{right:0;top:0;transform:scale(.25);transform-origin:top right}.fa-layers-top-left{left:0;right:auto;top:0;transform:scale(.25);transform-origin:top left}.fa-lg{font-size:1.33333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.fa-ul\u003eli{position:relative}.fa-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.fa-border{border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left{margin-right:.3em}.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right{margin-left:.3em}.fa-spin{animation:fa-spin 2s infinite linear}.fa-pulse{animation:fa-spin 1s infinite steps(8)}@keyframes fa-spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.fa-rotate-90{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d1)\";transform:rotate(90deg)}.fa-rotate-180{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d2)\";transform:rotate(180deg)}.fa-rotate-270{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d3)\";transform:rotate(270deg)}.fa-flip-horizontal{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d0, mirror\u003d1)\";transform:scaleX(-1)}.fa-flip-vertical{transform:scaleY(-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical,.fa-flip-vertical{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation\u003d2, mirror\u003d1)\"}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{transform:scale(-1)}:root .fa-flip-both,:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270{filter:none}.fa-stack{display:inline-block;height:2em;position:relative;width:2.5em}.fa-stack-1x,.fa-stack-2x{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.svg-inline--fa.fa-stack-1x{height:1em;width:1.25em}.svg-inline--fa.fa-stack-2x{height:2em;width:2.5em}.fa-inverse{color:#fff}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 5
    }
  },
  {
    "path": "src/main/resources/font-awesome/css/v4-shims.min.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Font Awesome Free 5.8.1 by @fontawesome - https://fontawesome.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".fa.fa-glass:before{content:\"\\f000\"}.fa.fa-meetup{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-star-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-star-o:before{content:\"\\f005\"}.fa.fa-close:before,.fa.fa-remove:before{content:\"\\f00d\"}.fa.fa-gear:before{content:\"\\f013\"}.fa.fa-trash-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-trash-o:before{content:\"\\f2ed\"}.fa.fa-file-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-o:before{content:\"\\f15b\"}.fa.fa-clock-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-clock-o:before{content:\"\\f017\"}.fa.fa-arrow-circle-o-down{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-arrow-circle-o-down:before{content:\"\\f358\"}.fa.fa-arrow-circle-o-up{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-arrow-circle-o-up:before{content:\"\\f35b\"}.fa.fa-play-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-play-circle-o:before{content:\"\\f144\"}.fa.fa-repeat:before,.fa.fa-rotate-right:before{content:\"\\f01e\"}.fa.fa-refresh:before{content:\"\\f021\"}.fa.fa-list-alt{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-dedent:before{content:\"\\f03b\"}.fa.fa-video-camera:before{content:\"\\f03d\"}.fa.fa-picture-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-picture-o:before{content:\"\\f03e\"}.fa.fa-photo{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-photo:before{content:\"\\f03e\"}.fa.fa-image{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-image:before{content:\"\\f03e\"}.fa.fa-pencil:before{content:\"\\f303\"}.fa.fa-map-marker:before{content:\"\\f3c5\"}.fa.fa-pencil-square-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-pencil-square-o:before{content:\"\\f044\"}.fa.fa-share-square-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-share-square-o:before{content:\"\\f14d\"}.fa.fa-check-square-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-check-square-o:before{content:\"\\f14a\"}.fa.fa-arrows:before{content:\"\\f0b2\"}.fa.fa-times-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-times-circle-o:before{content:\"\\f057\"}.fa.fa-check-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-check-circle-o:before{content:\"\\f058\"}.fa.fa-mail-forward:before{content:\"\\f064\"}.fa.fa-eye,.fa.fa-eye-slash{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-warning:before{content:\"\\f071\"}.fa.fa-calendar:before{content:\"\\f073\"}.fa.fa-arrows-v:before{content:\"\\f338\"}.fa.fa-arrows-h:before{content:\"\\f337\"}.fa.fa-bar-chart{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-bar-chart:before{content:\"\\f080\"}.fa.fa-bar-chart-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-bar-chart-o:before{content:\"\\f080\"}.fa.fa-facebook-square,.fa.fa-twitter-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-gears:before{content:\"\\f085\"}.fa.fa-thumbs-o-up{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-thumbs-o-up:before{content:\"\\f164\"}.fa.fa-thumbs-o-down{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-thumbs-o-down:before{content:\"\\f165\"}.fa.fa-heart-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-heart-o:before{content:\"\\f004\"}.fa.fa-sign-out:before{content:\"\\f2f5\"}.fa.fa-linkedin-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-linkedin-square:before{content:\"\\f08c\"}.fa.fa-thumb-tack:before{content:\"\\f08d\"}.fa.fa-external-link:before{content:\"\\f35d\"}.fa.fa-sign-in:before{content:\"\\f2f6\"}.fa.fa-github-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-lemon-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-lemon-o:before{content:\"\\f094\"}.fa.fa-square-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-square-o:before{content:\"\\f0c8\"}.fa.fa-bookmark-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-bookmark-o:before{content:\"\\f02e\"}.fa.fa-facebook,.fa.fa-twitter{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-facebook:before{content:\"\\f39e\"}.fa.fa-facebook-f{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-facebook-f:before{content:\"\\f39e\"}.fa.fa-github{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-credit-card{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-feed:before{content:\"\\f09e\"}.fa.fa-hdd-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hdd-o:before{content:\"\\f0a0\"}.fa.fa-hand-o-right{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-o-right:before{content:\"\\f0a4\"}.fa.fa-hand-o-left{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-o-left:before{content:\"\\f0a5\"}.fa.fa-hand-o-up{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-o-up:before{content:\"\\f0a6\"}.fa.fa-hand-o-down{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-o-down:before{content:\"\\f0a7\"}.fa.fa-arrows-alt:before{content:\"\\f31e\"}.fa.fa-group:before{content:\"\\f0c0\"}.fa.fa-chain:before{content:\"\\f0c1\"}.fa.fa-scissors:before{content:\"\\f0c4\"}.fa.fa-files-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-files-o:before{content:\"\\f0c5\"}.fa.fa-floppy-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-floppy-o:before{content:\"\\f0c7\"}.fa.fa-navicon:before,.fa.fa-reorder:before{content:\"\\f0c9\"}.fa.fa-google-plus,.fa.fa-google-plus-square,.fa.fa-pinterest,.fa.fa-pinterest-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-google-plus:before{content:\"\\f0d5\"}.fa.fa-money{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-money:before{content:\"\\f3d1\"}.fa.fa-unsorted:before{content:\"\\f0dc\"}.fa.fa-sort-desc:before{content:\"\\f0dd\"}.fa.fa-sort-asc:before{content:\"\\f0de\"}.fa.fa-linkedin{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-linkedin:before{content:\"\\f0e1\"}.fa.fa-rotate-left:before{content:\"\\f0e2\"}.fa.fa-legal:before{content:\"\\f0e3\"}.fa.fa-dashboard:before,.fa.fa-tachometer:before{content:\"\\f3fd\"}.fa.fa-comment-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-comment-o:before{content:\"\\f075\"}.fa.fa-comments-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-comments-o:before{content:\"\\f086\"}.fa.fa-flash:before{content:\"\\f0e7\"}.fa.fa-clipboard,.fa.fa-paste{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-paste:before{content:\"\\f328\"}.fa.fa-lightbulb-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-lightbulb-o:before{content:\"\\f0eb\"}.fa.fa-exchange:before{content:\"\\f362\"}.fa.fa-cloud-download:before{content:\"\\f381\"}.fa.fa-cloud-upload:before{content:\"\\f382\"}.fa.fa-bell-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-bell-o:before{content:\"\\f0f3\"}.fa.fa-cutlery:before{content:\"\\f2e7\"}.fa.fa-file-text-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-text-o:before{content:\"\\f15c\"}.fa.fa-building-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-building-o:before{content:\"\\f1ad\"}.fa.fa-hospital-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hospital-o:before{content:\"\\f0f8\"}.fa.fa-tablet:before{content:\"\\f3fa\"}.fa.fa-mobile-phone:before,.fa.fa-mobile:before{content:\"\\f3cd\"}.fa.fa-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-circle-o:before{content:\"\\f111\"}.fa.fa-mail-reply:before{content:\"\\f3e5\"}.fa.fa-github-alt{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-folder-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-folder-o:before{content:\"\\f07b\"}.fa.fa-folder-open-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-folder-open-o:before{content:\"\\f07c\"}.fa.fa-smile-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-smile-o:before{content:\"\\f118\"}.fa.fa-frown-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-frown-o:before{content:\"\\f119\"}.fa.fa-meh-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-meh-o:before{content:\"\\f11a\"}.fa.fa-keyboard-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-keyboard-o:before{content:\"\\f11c\"}.fa.fa-flag-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-flag-o:before{content:\"\\f024\"}.fa.fa-mail-reply-all:before{content:\"\\f122\"}.fa.fa-star-half-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-star-half-o:before{content:\"\\f089\"}.fa.fa-star-half-empty{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-star-half-empty:before{content:\"\\f089\"}.fa.fa-star-half-full{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-star-half-full:before{content:\"\\f089\"}.fa.fa-code-fork:before{content:\"\\f126\"}.fa.fa-chain-broken:before{content:\"\\f127\"}.fa.fa-shield:before{content:\"\\f3ed\"}.fa.fa-calendar-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-calendar-o:before{content:\"\\f133\"}.fa.fa-css3,.fa.fa-html5,.fa.fa-maxcdn{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-ticket:before{content:\"\\f3ff\"}.fa.fa-minus-square-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-minus-square-o:before{content:\"\\f146\"}.fa.fa-level-up:before{content:\"\\f3bf\"}.fa.fa-level-down:before{content:\"\\f3be\"}.fa.fa-pencil-square:before{content:\"\\f14b\"}.fa.fa-external-link-square:before{content:\"\\f360\"}.fa.fa-compass{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-caret-square-o-down{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-caret-square-o-down:before{content:\"\\f150\"}.fa.fa-toggle-down{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-toggle-down:before{content:\"\\f150\"}.fa.fa-caret-square-o-up{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-caret-square-o-up:before{content:\"\\f151\"}.fa.fa-toggle-up{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-toggle-up:before{content:\"\\f151\"}.fa.fa-caret-square-o-right{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-caret-square-o-right:before{content:\"\\f152\"}.fa.fa-toggle-right{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-toggle-right:before{content:\"\\f152\"}.fa.fa-eur:before,.fa.fa-euro:before{content:\"\\f153\"}.fa.fa-gbp:before{content:\"\\f154\"}.fa.fa-dollar:before,.fa.fa-usd:before{content:\"\\f155\"}.fa.fa-inr:before,.fa.fa-rupee:before{content:\"\\f156\"}.fa.fa-cny:before,.fa.fa-jpy:before,.fa.fa-rmb:before,.fa.fa-yen:before{content:\"\\f157\"}.fa.fa-rouble:before,.fa.fa-rub:before,.fa.fa-ruble:before{content:\"\\f158\"}.fa.fa-krw:before,.fa.fa-won:before{content:\"\\f159\"}.fa.fa-bitcoin,.fa.fa-btc{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-bitcoin:before{content:\"\\f15a\"}.fa.fa-file-text:before{content:\"\\f15c\"}.fa.fa-sort-alpha-asc:before{content:\"\\f15d\"}.fa.fa-sort-alpha-desc:before{content:\"\\f15e\"}.fa.fa-sort-amount-asc:before{content:\"\\f160\"}.fa.fa-sort-amount-desc:before{content:\"\\f161\"}.fa.fa-sort-numeric-asc:before{content:\"\\f162\"}.fa.fa-sort-numeric-desc:before{content:\"\\f163\"}.fa.fa-xing,.fa.fa-xing-square,.fa.fa-youtube,.fa.fa-youtube-play,.fa.fa-youtube-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-youtube-play:before{content:\"\\f167\"}.fa.fa-adn,.fa.fa-bitbucket,.fa.fa-bitbucket-square,.fa.fa-dropbox,.fa.fa-flickr,.fa.fa-instagram,.fa.fa-stack-overflow{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-bitbucket-square:before{content:\"\\f171\"}.fa.fa-tumblr,.fa.fa-tumblr-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-long-arrow-down:before{content:\"\\f309\"}.fa.fa-long-arrow-up:before{content:\"\\f30c\"}.fa.fa-long-arrow-left:before{content:\"\\f30a\"}.fa.fa-long-arrow-right:before{content:\"\\f30b\"}.fa.fa-android,.fa.fa-apple,.fa.fa-dribbble,.fa.fa-foursquare,.fa.fa-gittip,.fa.fa-gratipay,.fa.fa-linux,.fa.fa-skype,.fa.fa-trello,.fa.fa-windows{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-gittip:before{content:\"\\f184\"}.fa.fa-sun-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-sun-o:before{content:\"\\f185\"}.fa.fa-moon-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-moon-o:before{content:\"\\f186\"}.fa.fa-pagelines,.fa.fa-renren,.fa.fa-stack-exchange,.fa.fa-vk,.fa.fa-weibo{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-arrow-circle-o-right{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-arrow-circle-o-right:before{content:\"\\f35a\"}.fa.fa-arrow-circle-o-left{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-arrow-circle-o-left:before{content:\"\\f359\"}.fa.fa-caret-square-o-left{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-caret-square-o-left:before{content:\"\\f191\"}.fa.fa-toggle-left{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-toggle-left:before{content:\"\\f191\"}.fa.fa-dot-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-dot-circle-o:before{content:\"\\f192\"}.fa.fa-vimeo-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-try:before,.fa.fa-turkish-lira:before{content:\"\\f195\"}.fa.fa-plus-square-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-plus-square-o:before{content:\"\\f0fe\"}.fa.fa-openid,.fa.fa-slack,.fa.fa-wordpress{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-bank:before,.fa.fa-institution:before{content:\"\\f19c\"}.fa.fa-mortar-board:before{content:\"\\f19d\"}.fa.fa-delicious,.fa.fa-digg,.fa.fa-drupal,.fa.fa-google,.fa.fa-joomla,.fa.fa-pied-piper-alt,.fa.fa-pied-piper-pp,.fa.fa-reddit,.fa.fa-reddit-square,.fa.fa-stumbleupon,.fa.fa-stumbleupon-circle,.fa.fa-yahoo{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-spoon:before{content:\"\\f2e5\"}.fa.fa-behance,.fa.fa-behance-square,.fa.fa-steam,.fa.fa-steam-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-automobile:before{content:\"\\f1b9\"}.fa.fa-cab:before{content:\"\\f1ba\"}.fa.fa-envelope-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-envelope-o:before{content:\"\\f0e0\"}.fa.fa-deviantart,.fa.fa-soundcloud{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-file-pdf-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-pdf-o:before{content:\"\\f1c1\"}.fa.fa-file-word-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-word-o:before{content:\"\\f1c2\"}.fa.fa-file-excel-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-excel-o:before{content:\"\\f1c3\"}.fa.fa-file-powerpoint-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-powerpoint-o:before{content:\"\\f1c4\"}.fa.fa-file-image-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-image-o:before{content:\"\\f1c5\"}.fa.fa-file-photo-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-photo-o:before{content:\"\\f1c5\"}.fa.fa-file-picture-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-picture-o:before{content:\"\\f1c5\"}.fa.fa-file-archive-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-archive-o:before{content:\"\\f1c6\"}.fa.fa-file-zip-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-zip-o:before{content:\"\\f1c6\"}.fa.fa-file-audio-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-audio-o:before{content:\"\\f1c7\"}.fa.fa-file-sound-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-sound-o:before{content:\"\\f1c7\"}.fa.fa-file-video-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-video-o:before{content:\"\\f1c8\"}.fa.fa-file-movie-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-movie-o:before{content:\"\\f1c8\"}.fa.fa-file-code-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-file-code-o:before{content:\"\\f1c9\"}.fa.fa-codepen,.fa.fa-jsfiddle,.fa.fa-vine{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-life-bouy,.fa.fa-life-ring{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-life-bouy:before{content:\"\\f1cd\"}.fa.fa-life-buoy{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-life-buoy:before{content:\"\\f1cd\"}.fa.fa-life-saver{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-life-saver:before{content:\"\\f1cd\"}.fa.fa-support{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-support:before{content:\"\\f1cd\"}.fa.fa-circle-o-notch:before{content:\"\\f1ce\"}.fa.fa-ra,.fa.fa-rebel{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-ra:before{content:\"\\f1d0\"}.fa.fa-resistance{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-resistance:before{content:\"\\f1d0\"}.fa.fa-empire,.fa.fa-ge{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-ge:before{content:\"\\f1d1\"}.fa.fa-git,.fa.fa-git-square,.fa.fa-hacker-news,.fa.fa-y-combinator-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-y-combinator-square:before{content:\"\\f1d4\"}.fa.fa-yc-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-yc-square:before{content:\"\\f1d4\"}.fa.fa-qq,.fa.fa-tencent-weibo,.fa.fa-wechat,.fa.fa-weixin{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-wechat:before{content:\"\\f1d7\"}.fa.fa-send:before{content:\"\\f1d8\"}.fa.fa-paper-plane-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-paper-plane-o:before{content:\"\\f1d8\"}.fa.fa-send-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-send-o:before{content:\"\\f1d8\"}.fa.fa-circle-thin{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-circle-thin:before{content:\"\\f111\"}.fa.fa-header:before{content:\"\\f1dc\"}.fa.fa-sliders:before{content:\"\\f1de\"}.fa.fa-futbol-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-futbol-o:before{content:\"\\f1e3\"}.fa.fa-soccer-ball-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-soccer-ball-o:before{content:\"\\f1e3\"}.fa.fa-slideshare,.fa.fa-twitch,.fa.fa-yelp{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-newspaper-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-newspaper-o:before{content:\"\\f1ea\"}.fa.fa-cc-amex,.fa.fa-cc-discover,.fa.fa-cc-mastercard,.fa.fa-cc-paypal,.fa.fa-cc-stripe,.fa.fa-cc-visa,.fa.fa-google-wallet,.fa.fa-paypal{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-bell-slash-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-bell-slash-o:before{content:\"\\f1f6\"}.fa.fa-trash:before{content:\"\\f2ed\"}.fa.fa-copyright{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-eyedropper:before{content:\"\\f1fb\"}.fa.fa-area-chart:before{content:\"\\f1fe\"}.fa.fa-pie-chart:before{content:\"\\f200\"}.fa.fa-line-chart:before{content:\"\\f201\"}.fa.fa-angellist,.fa.fa-ioxhost,.fa.fa-lastfm,.fa.fa-lastfm-square{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-cc{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-cc:before{content:\"\\f20a\"}.fa.fa-ils:before,.fa.fa-shekel:before,.fa.fa-sheqel:before{content:\"\\f20b\"}.fa.fa-meanpath{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-meanpath:before{content:\"\\f2b4\"}.fa.fa-buysellads,.fa.fa-connectdevelop,.fa.fa-dashcube,.fa.fa-forumbee,.fa.fa-leanpub,.fa.fa-sellsy,.fa.fa-shirtsinbulk,.fa.fa-simplybuilt,.fa.fa-skyatlas{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-diamond{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-diamond:before{content:\"\\f3a5\"}.fa.fa-intersex:before{content:\"\\f224\"}.fa.fa-facebook-official{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-facebook-official:before{content:\"\\f09a\"}.fa.fa-pinterest-p,.fa.fa-whatsapp{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-hotel:before{content:\"\\f236\"}.fa.fa-medium,.fa.fa-viacoin,.fa.fa-y-combinator,.fa.fa-yc{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-yc:before{content:\"\\f23b\"}.fa.fa-expeditedssl,.fa.fa-opencart,.fa.fa-optin-monster{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-battery-4:before,.fa.fa-battery:before{content:\"\\f240\"}.fa.fa-battery-3:before{content:\"\\f241\"}.fa.fa-battery-2:before{content:\"\\f242\"}.fa.fa-battery-1:before{content:\"\\f243\"}.fa.fa-battery-0:before{content:\"\\f244\"}.fa.fa-object-group,.fa.fa-object-ungroup,.fa.fa-sticky-note-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-sticky-note-o:before{content:\"\\f249\"}.fa.fa-cc-diners-club,.fa.fa-cc-jcb{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-clone,.fa.fa-hourglass-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hourglass-o:before{content:\"\\f254\"}.fa.fa-hourglass-1:before{content:\"\\f251\"}.fa.fa-hourglass-2:before{content:\"\\f252\"}.fa.fa-hourglass-3:before{content:\"\\f253\"}.fa.fa-hand-rock-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-rock-o:before{content:\"\\f255\"}.fa.fa-hand-grab-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-grab-o:before{content:\"\\f255\"}.fa.fa-hand-paper-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-paper-o:before{content:\"\\f256\"}.fa.fa-hand-stop-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-stop-o:before{content:\"\\f256\"}.fa.fa-hand-scissors-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-scissors-o:before{content:\"\\f257\"}.fa.fa-hand-lizard-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-lizard-o:before{content:\"\\f258\"}.fa.fa-hand-spock-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-spock-o:before{content:\"\\f259\"}.fa.fa-hand-pointer-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-pointer-o:before{content:\"\\f25a\"}.fa.fa-hand-peace-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-hand-peace-o:before{content:\"\\f25b\"}.fa.fa-registered{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-chrome,.fa.fa-creative-commons,.fa.fa-firefox,.fa.fa-get-pocket,.fa.fa-gg,.fa.fa-gg-circle,.fa.fa-internet-explorer,.fa.fa-odnoklassniki,.fa.fa-odnoklassniki-square,.fa.fa-opera,.fa.fa-safari,.fa.fa-tripadvisor,.fa.fa-wikipedia-w{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-television:before{content:\"\\f26c\"}.fa.fa-500px,.fa.fa-amazon,.fa.fa-contao{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-calendar-plus-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-calendar-plus-o:before{content:\"\\f271\"}.fa.fa-calendar-minus-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-calendar-minus-o:before{content:\"\\f272\"}.fa.fa-calendar-times-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-calendar-times-o:before{content:\"\\f273\"}.fa.fa-calendar-check-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-calendar-check-o:before{content:\"\\f274\"}.fa.fa-map-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-map-o:before{content:\"\\f279\"}.fa.fa-commenting:before{content:\"\\f4ad\"}.fa.fa-commenting-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-commenting-o:before{content:\"\\f4ad\"}.fa.fa-houzz,.fa.fa-vimeo{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-vimeo:before{content:\"\\f27d\"}.fa.fa-black-tie,.fa.fa-edge,.fa.fa-fonticons,.fa.fa-reddit-alien{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-credit-card-alt:before{content:\"\\f09d\"}.fa.fa-codiepie,.fa.fa-fort-awesome,.fa.fa-mixcloud,.fa.fa-modx,.fa.fa-product-hunt,.fa.fa-scribd,.fa.fa-usb{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-pause-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-pause-circle-o:before{content:\"\\f28b\"}.fa.fa-stop-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-stop-circle-o:before{content:\"\\f28d\"}.fa.fa-bluetooth,.fa.fa-bluetooth-b,.fa.fa-envira,.fa.fa-gitlab,.fa.fa-wheelchair-alt,.fa.fa-wpbeginner,.fa.fa-wpforms{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-wheelchair-alt:before{content:\"\\f368\"}.fa.fa-question-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-question-circle-o:before{content:\"\\f059\"}.fa.fa-volume-control-phone:before{content:\"\\f2a0\"}.fa.fa-asl-interpreting:before{content:\"\\f2a3\"}.fa.fa-deafness:before,.fa.fa-hard-of-hearing:before{content:\"\\f2a4\"}.fa.fa-glide,.fa.fa-glide-g{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-signing:before{content:\"\\f2a7\"}.fa.fa-first-order,.fa.fa-google-plus-official,.fa.fa-pied-piper,.fa.fa-snapchat,.fa.fa-snapchat-ghost,.fa.fa-snapchat-square,.fa.fa-themeisle,.fa.fa-viadeo,.fa.fa-viadeo-square,.fa.fa-yoast{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-google-plus-official:before{content:\"\\f2b3\"}.fa.fa-google-plus-circle{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-google-plus-circle:before{content:\"\\f2b3\"}.fa.fa-fa,.fa.fa-font-awesome{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-fa:before{content:\"\\f2b4\"}.fa.fa-handshake-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-handshake-o:before{content:\"\\f2b5\"}.fa.fa-envelope-open-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-envelope-open-o:before{content:\"\\f2b6\"}.fa.fa-linode{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-address-book-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-address-book-o:before{content:\"\\f2b9\"}.fa.fa-vcard:before{content:\"\\f2bb\"}.fa.fa-address-card-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-address-card-o:before{content:\"\\f2bb\"}.fa.fa-vcard-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-vcard-o:before{content:\"\\f2bb\"}.fa.fa-user-circle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-user-circle-o:before{content:\"\\f2bd\"}.fa.fa-user-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-user-o:before{content:\"\\f007\"}.fa.fa-id-badge{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-drivers-license:before{content:\"\\f2c2\"}.fa.fa-id-card-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-id-card-o:before{content:\"\\f2c2\"}.fa.fa-drivers-license-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-drivers-license-o:before{content:\"\\f2c2\"}.fa.fa-free-code-camp,.fa.fa-quora,.fa.fa-telegram{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-thermometer-4:before,.fa.fa-thermometer:before{content:\"\\f2c7\"}.fa.fa-thermometer-3:before{content:\"\\f2c8\"}.fa.fa-thermometer-2:before{content:\"\\f2c9\"}.fa.fa-thermometer-1:before{content:\"\\f2ca\"}.fa.fa-thermometer-0:before{content:\"\\f2cb\"}.fa.fa-bathtub:before,.fa.fa-s15:before{content:\"\\f2cd\"}.fa.fa-window-maximize,.fa.fa-window-restore{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-times-rectangle:before{content:\"\\f410\"}.fa.fa-window-close-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-window-close-o:before{content:\"\\f410\"}.fa.fa-times-rectangle-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-times-rectangle-o:before{content:\"\\f410\"}.fa.fa-bandcamp,.fa.fa-eercast,.fa.fa-etsy,.fa.fa-grav,.fa.fa-imdb,.fa.fa-ravelry{font-family:\"Font Awesome 5 Brands\";font-weight:400}.fa.fa-eercast:before{content:\"\\f2da\"}.fa.fa-snowflake-o{font-family:\"Font Awesome 5 Free\";font-weight:400}.fa.fa-snowflake-o:before{content:\"\\f2dc\"}.fa.fa-spotify,.fa.fa-superpowers,.fa.fa-wpexplorer{font-family:\"Font Awesome 5 Brands\";font-weight:400}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 5
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import seedu.address.ui.AutoCompleteTextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003cAutoCompleteTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "               promptText\u003d\"Please start by typing a command here...\" minHeight\u003d\"40\" maxHeight\u003d\"40\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "huichun66": 3
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-background: white;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/resources/view/HealthWorkerListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003cBorderPane id\u003d\"borderPane\" fx:id\u003d\"borderPane\" maxHeight\u003d\"100\" maxWidth\u003d\"300\" minHeight\u003d\"100\" minWidth\u003d\"200\" prefHeight\u003d\"100\" prefWidth\u003d\"300\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"20\" right\u003d\"20\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003cleft\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003cImageView fitHeight\u003d\"64\" fitWidth\u003d\"64\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cImage url\u003d\"@../images/health_worker.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003c/left\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003cVBox fx:id\u003d\"healthWorkerInfo\" alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"90.0\" prefWidth\u003d\"104.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cLabel fx:id\u003d\"organisation\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$organisation\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"specialisations\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                   \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cInsets left\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "huichun66": 47
    }
  },
  {
    "path": "src/main/resources/view/HealthWorkerListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003cListView fx:id\u003d\"healthWorkerListView\" VBox.vgrow\u003d\"ALWAYS\" orientation\u003d\"VERTICAL\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "huichun66": 8
    }
  },
  {
    "path": "src/main/resources/view/InfoPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  \u003cWebView fx:id\u003d\"webView\"\u003e\u003c/WebView\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "         title\u003d\"Welcome to Health Hub\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003cImage url\u003d\"@/images/health_hub_32.png\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cURL value\u003d\"@WhiteTheme.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Feedback\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"feedbackMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleFeedback\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                                  text\u003d\"Feedback\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"135\" prefHeight\u003d\"135\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                           maxHeight\u003d\"135\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cHBox fx:id\u003d\"container\" id\u003d\"container\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003cVBox minWidth\u003d\"350\" prefWidth\u003d\"400\" maxWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"requestListPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003cVBox minWidth\u003d\"400\" prefWidth\u003d\"400\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"displayInfoPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003cVBox minWidth\u003d\"300\" prefWidth\u003d\"350\" maxWidth\u003d\"350\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"healthWorkerListPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusBarPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "huichun66": 29
    }
  },
  {
    "path": "src/main/resources/view/RequestListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"100\" minWidth\u003d\"100\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003cImageView fitHeight\u003d\"64\" fitWidth\u003d\"64\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cImage url\u003d\"@../images/patient.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"20\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"300\" minWidth\u003d\"270\" prefWidth\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"conditions\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"status_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "huichun66": 31
    }
  },
  {
    "path": "src/main/resources/view/RequestListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  \u003cListView fx:id\u003d\"requestListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "huichun66": 1
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\" minHeight\u003d\"135\" maxHeight\u003d\"135\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "huichun66": 2
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003cGridPane xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003cColumnConstraints halignment\u003d\"RIGHT\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  \u003cLabel fx:id\u003d\"syncStatus\" styleClass\u003d\"status-bar-info\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" styleClass\u003d\"status-bar-info\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "huichun66": 8
    }
  },
  {
    "path": "src/main/resources/view/WhiteTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": " This css file is written from scratch to convert the dark theme in AB4 to a white theme"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": " that is more appropriate for the context of our application, Health Hub."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": " Author: Hui Chun"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": " Date: 21-03-2019"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "**/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "@import url(\u0027https://fonts.googleapis.com/css?family\u003dInconsolata:400\u0027);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "@import url(\u0027https://fonts.googleapis.com/css?family\u003dLato:300,400,400i\u0027);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Arial\u0027;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/* For the command box input and result */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "#commandTextField, #resultDisplay {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Inconsolata\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/* For the requestListPanel */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "#conditions, #specialisations {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "#conditions .label {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-border-radius: 4;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-weight: 400;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".status_label {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-weight: 400;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/* For the welcome message in infoPanel */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    padding: 20px 20px 10px 20px;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".background h2 {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-style: italic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-size: 15pt;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".welcome-message {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-weight: 300;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-size: 12pt;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    margin-top: 30px;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "span.command {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-family: \u0027Inconsolata\u0027;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-size: 12pt;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    color: #079992;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".request-details {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    font-size: 11pt;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    padding: 10px 20px 10px 20px;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "i {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "   margin-right: 10px;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/* For the pink rounded border around specialisations */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": "#specialisations .label {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-background-color: #ee5253;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-border-radius: 4;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".status-bar-info  {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-weight: 400;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/* reduces the darkness of the default border style around each cell */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-border-color: #D0D0D0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-border-width: 0.25;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/* adds a light blue color for selected cells */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-background-color: #c7ecee;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/* removes cell styling for empty cells */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-border-style: none;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".alertDialog:header *.header-panel *.label{"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-weight: 400;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-fill: #292929;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".alertDialog \u003e *.label.content{"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huichun66"
        },
        "content": "   -fx-font-family: \u0027Lato\u0027;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huichun66"
        },
        "content": "   -fx-font-weight: 300;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huichun66"
        },
        "content": "   -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/* removes unwanted horizontal scroll bar */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".list-view .scroll-bar:horizontal .increment-arrow,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".list-view .scroll-bar:horizontal .decrement-arrow,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".list-view .scroll-bar:horizontal .increment-button,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huichun66"
        },
        "content": ".list-view .scroll-bar:horizontal .decrement-button {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    -fx-padding:0;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 154
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink href\u003d\"WhiteTheme.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003ch2\u003eWelcome to HealthHub!\u003c/h2\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003cdiv class\u003d\"welcome-message\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003cp\u003eAn administrative tool designed to ease the hassle of patient-doctor appointments.\u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \u003cp\u003eTo start registering a request, type\u003c/br\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003cspan class\u003d\"command\"\u003e add request n/\u0026lsaquo;patient_name\u0026rsaquo; i/\u0026lsaquo;identity_no\u0026rsaquo; p/\u0026lsaquo;phone_no\u0026rsaquo; a/\u0026lsaquo;address\u0026rsaquo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            dt/\u0026lsaquo;date_time\u0026rsaquo; c/\u0026lsaquo;condition\u0026rsaquo;.\u003c/span\u003e\u003c/br\u003e\u003c/br\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        To start registering a health care professional, type\u003c/br\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        \u003cspan class\u003d\"command\"\u003e add healthworker n/\u0026lsaquo;hw_name\u0026rsaquo; i/\u0026lsaquo;identity_no\u0026rsaquo; p/\u0026lsaquo;phone_no\u0026rsaquo; o/\u0026lsaquo;organisation\u0026rsaquo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            s/\u0026lsaquo;specialisation\u0026rsaquo;.\u003c/span\u003e\u003c/br\u003e\u003c/br\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        For more help navigating the application, type \u003cspan class\u003d\"command\"\u003ehelp\u003c/span\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "huichun66": 13
    }
  },
  {
    "path": "src/test/data/JsonHealthWorkerBookStorageTest/invalidAndValidPersonHealthWorkerBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"healthworkers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        \"email\": \"andye@example.com\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        \"name\": \"Andy Tan\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        \"phone\": \"94358253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        \"nric\": \"S8312942G\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        \"address\": \"125, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        \"tagged\": [],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        \"organization\": \"NUH\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        \"skills\": \"PHYSIOTHERAPY GENERAL_PRACTICE\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567Z\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"tagged\" : [],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"organization\": \"NUH\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"skills\": \"PHYSIOTHERAPY GENERAL_PRACTICE\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 21
    }
  },
  {
    "path": "src/test/data/JsonHealthWorkerBookStorageTest/invalidPersonHealthWorkerBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"healthworkers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567Z\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"tagged\": [\"Parkinsons\"],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"organization\": \"NUH\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 11
    }
  },
  {
    "path": "src/test/data/JsonHealthWorkerBookStorageTest/notJsonFormatHealthWorkerBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "jing1324": 1
    }
  },
  {
    "path": "src/test/data/JsonPatientBookStorageTest/invalidAndValidPatientPatientBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 13
    }
  },
  {
    "path": "src/test/data/JsonPatientBookStorageTest/invalidPatientPatientBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 8
    }
  },
  {
    "path": "src/test/data/JsonPatientBookStorageTest/notJsonFormatPatientBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "jing1324": 1
    }
  },
  {
    "path": "src/test/data/JsonRequestBookStorageTest/invalidAndValidRequestRequestBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"requests\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\": \"S9670515H\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\": \"asdfffff\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Physiotherapy \","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestStatus\" : \"PENDING\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestDate\" : \"01-01-2019 10:00:00\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"healthWorker\": \"Andy Tan\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\": \"S9274100D\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\": \"98765432\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Palliative \","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestStatus\" : \"PENDING\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestDate\" : \"02-01-2919 08:00:00\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"healthWorker\": \"Betty Meier\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 21
    }
  },
  {
    "path": "src/test/data/JsonRequestBookStorageTest/invalidRequestRequestBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"requests\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\": \"S9670515H\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Physiotherapy \","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestStatus\" : \"263597652896\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestDate\" : \"01-01-2019 10:00:00\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"healthWorker\": \"Andy Tan\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 12
    }
  },
  {
    "path": "src/test/data/JsonRequestBookStorageTest/notJsonFormatRequestBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "jing1324": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S9678912J\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S9678912J\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "jing1324": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S9678912J\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "jing1324": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"123 Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"311 Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    \"phone\" : \"94832224\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    \"phone\" : \"94824427\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    \"phone\" : \"94824452\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "\t\"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "jing1324": 9,
      "Lookuz": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableHealthWorkerBookTest/duplicatehealthworkerbook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"healthWorkers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Andy Tan\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"94358253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"andye@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8312942G\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"125, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE PHYSIOTHERAPY \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Andy Tan\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"94358253\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"andye@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8312942G\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"125, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE PHYSIOTHERAPY \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "jing1324": 20
    }
  },
  {
    "path": "src/test/data/JsonSerializableHealthWorkerBookTest/invalidhealthworkerbook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"healthWorkers\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Andy Tan\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"not a phone number\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"andye@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8312942G\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"125, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE PHYSIOTHERAPY \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableHealthWorkerBookTest/typicalhealthworkersbook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"healthWorkers\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Andy Tan\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"94358253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"andye@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8312942G\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"125, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE PHYSIOTHERAPY \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Betty Meier\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"98761232\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"betty@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8312942G\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"312, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ \"Stroke\", \"Eldercare\" ],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE ORTHOPAEDIC \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Carlie Kurz\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"95358463\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"Kurz@example.com\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S9312942G\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ \"Palliative\" ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE GYNAECOLOGY\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Paniel Meier\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"87652133\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"panda@example.com\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8412942G\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ \"Doctor\" ],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    \"skills\" : \"PHYSIOTHERAPY HAEMATOLOGY\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Ella Meyer\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"94824524\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"meyer@example.com\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S9112942G\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ \"Nurse\", \"Dementia\" ],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    \"skills\" : \"ANAESTHESIOLOGY PHYSIOTHERAPY\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Fione Kunz\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    \"phone\" : \"94822373\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"fione@example.com\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S7812942G\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ \"Alzheimers\", \"Nurse\" ],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    \"phone\" : \"94824424\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"george@example.com\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8812942G\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ \"Cancer\" ],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"organization\" : \"NUH\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"skills\" : \"GENERAL_PRACTICE \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 61,
      "Lookuz": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializablePatientBookTest/duplicatePatientBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  \"patients\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S9670515H\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"Physiotherapy Dialysis \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S9670515H\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"Physiotherapy Dialysis \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S5450367F\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"Cancer \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S5450367F\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"Cancer \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 35
    }
  },
  {
    "path": "src/test/data/JsonSerializablePatientBookTest/invalidPatientBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  \"patients\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Alice Pauline!!!#$\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S9670515H\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"Physiotherapy Dialysis \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S9274100123D\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"Stroke Eldercare \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"87652533ABCDE\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S9328723A\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"Palliative \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"82015737\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"cornelia.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S2652663Z\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"name\" : \"Elle Meyer*!@#\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"nric\" : \"S9462345E\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\" : \"Dementia \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 43
    }
  },
  {
    "path": "src/test/data/JsonSerializablePatientBookTest/typicalPatientsBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  \"patients\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S9670515H\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Physiotherapy Dialysis\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S9274100D\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Stroke Eldercare \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S9328723A\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Palliative\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"82015737\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S2652663Z\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S9462345E\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Dementia\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S5450367F\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Cancer\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\" : \"S8736498R\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Alzheimer\u0027s \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 59
    }
  },
  {
    "path": "src/test/data/JsonSerializableRequestBookTest/duplicateRequestBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"requests\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"id\": \"1234\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"patient\": {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requestdate\": \"01-01-2019 10:00:00\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"healthworker\": {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\" : \"Andy Tan\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\" : \"94358253\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"nric\": \"S8312942G\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\" : \"andye@example.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\" : \"125, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \"organisation\": \"NUH\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \"skills\" : \"GENERAL_PRACTICE ORTHOPAEDIC\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\": \"Palliative\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requestStatus\": \"PENDING\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"id\": \"1234\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"patient\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \"nric\": \"S1234567A\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requestdate\": \"01-01-2019 10:00:00\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"healthworker\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\" : \"Andy Tan\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\" : \"94358253\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \"nric\": \"S8312942G\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\" : \"andye@example.com\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\" : \"125, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \"organisation\": \"NUH\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \"skills\" : \"GENERAL_PRACTICE ORTHOPAEDIC\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    \"conditions\": \"Palliative\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requestStatus\": \"PENDING\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "huichun66": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableRequestBookTest/typicalRequestsBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"requests\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\": \"S9670515H\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Physiotherapy \","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestStatus\" : \"PENDING\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requestDate\" : \"01-01-2019 10:00:00\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"healthWorker\": \"Andy Tan\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\": \"S9274100D\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"98765432\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Palliative \","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestStatus\" : \"PENDING\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requestDate\" : \"02-01-2919 08:00:00\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"healthWorker\": \"Betty Meier\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\": \"S9328723A\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"87652533\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"wall street\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Palliative \","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestStatus\" : \"PENDING\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestDate\" : \"02-01-2919 14:00:00\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"healthWorker\": \"Carlie Kurz\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"nric\": \"S2652663Z\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"82015737\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"10th street\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"conditions\" : \"Palliative \","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestStatus\" : \"COMPLETED\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    \"requestDate\" : \"02-01-2919 18:00:00\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"healthWorker\": \"Paniel Meier\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "jing1324": 14
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.ui.AutoCompleteTextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cAutoCompleteTextField\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public CommandBoxHandle(AutoCompleteTextField commandBoxNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Enters the given prefix and selects from the autocompletion context menu."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void selectFromAutoComplete(String prefix) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(prefix));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().positionCaret(getInput().length()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // to ensure that the selection does not get stuck"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        for (int i \u003d 0; i \u003c getInput().length(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            guiRobot.type(KeyCode.BACK_SPACE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(prefix));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.type(KeyCode.DOWN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "huichun66": 20
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HealthWorkerCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Provides a handle to a health worker card in the health worker list panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class HealthWorkerCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String ORGANISATION_FIELD_ID \u003d \"#organisation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String SPECIALISATION_FIELD_ID \u003d \"#specialisations\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Label organisationLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final List\u003cLabel\u003e specialisationLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public HealthWorkerCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        organisationLabel \u003d getChildNode(ORGANISATION_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Region condContainer \u003d getChildNode(SPECIALISATION_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        specialisationLabels \u003d condContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String getOrganisation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String text \u003d organisationLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return text.substring(1, text.length() - 1); // for the round brackets"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public List\u003cString\u003e getSpecialisations() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return specialisationLabels"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns true if this handle contains {@code healthWorker}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public boolean equals(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return getName().equals(healthWorker.getName().toString())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u0026\u0026 getOrganisation().equals(healthWorker.getOrganization().toString())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u0026\u0026 getPhone().equals(healthWorker.getPhone().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 74
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HealthWorkerListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Provides a handle for {@code HealthWorkerListPanel} containing the list of {@code HealthWorkerCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class HealthWorkerListPanelHandle extends NodeHandle\u003cListView\u003cHealthWorker\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String HEALTH_WORKER_LIST_VIEW_ID \u003d \"#healthWorkerListView\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String BORDER_PANE_ID \u003d \"#borderPane\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Optional\u003cHealthWorker\u003e lastRememberedSelectedHealthWorkerCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public HealthWorkerListPanelHandle(ListView\u003cHealthWorker\u003e healthWorkerListPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        super(healthWorkerListPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns a handle to the selected {@code RequestCardHandle}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public HealthWorkerCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cHealthWorker\u003e selectedHealthWorkerList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (selectedHealthWorkerList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new AssertionError(\"Health worker list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .map(HealthWorkerCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedHealthWorkerList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cHealthWorker\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Navigates the list view to display {@code healthWorker}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void navigateToCard(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (!getRootNode().getItems().contains(healthWorker)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new IllegalArgumentException(\"Health worker does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            getRootNode().scrollTo(healthWorker);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Navigates the list view to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Selects the {@code HealthWorkerCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns the card handle of a health worker associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public HealthWorkerCardHandle getHealthWorkerCardHandle(int index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .map(HealthWorkerCardHandle::new)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .filter(handle -\u003e handle.equals(getHealthWorker(index)))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private HealthWorker getHealthWorker(int index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Card nodes that are visible in the list view are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * visible in the list view may also be in the scene graph."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return guiRobot.lookup(BORDER_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Remembers the selected {@code HealthWorkerCard} in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void rememberSelectedHealthWorkerCard() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cHealthWorker\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            lastRememberedSelectedHealthWorkerCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            lastRememberedSelectedHealthWorkerCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns true if the selected {@code HealthWorkerCard} is different from the value remembered by"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * the most recent {@code rememberSelectedHealthWorkerCard()} call."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public boolean isSelectedHealthWorkerCardChanged() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cHealthWorker\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            return lastRememberedSelectedHealthWorkerCard.isPresent();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            return !lastRememberedSelectedHealthWorkerCard.isPresent()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    || !lastRememberedSelectedHealthWorkerCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 160
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/InfoPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javax.xml.transform.Transformer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javax.xml.transform.TransformerConfigurationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javax.xml.transform.TransformerException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javax.xml.transform.TransformerFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javax.xml.transform.dom.DOMSource;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javax.xml.transform.stream.StreamResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * A handler for the {@code InfoPanel} of the UI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class InfoPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String WEB_VIEW_ID \u003d \"#webView\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private String loadedContent \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public InfoPanelHandle(Node infoPanelNode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        super(infoPanelNode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        WebView webView \u003d getChildNode(WEB_VIEW_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        WebEngine engine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newState \u003d\u003d Worker.State.RUNNING) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                Document doc \u003d engine.getDocument();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                setLoadedContent(doc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * A setter method to set the loaded content string variable that will be generated"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * from transforming the document object model (DOM) source."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @param doc DOM object from web engine"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void setLoadedContent(Document doc) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            DOMSource domSource \u003d new DOMSource(doc);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            StringWriter writer \u003d new StringWriter();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            StreamResult result \u003d new StreamResult(writer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            TransformerFactory tf \u003d TransformerFactory.newInstance();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Transformer transformer \u003d tf.newTransformer();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            transformer.transform(domSource, result);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            this.loadedContent \u003d writer.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } catch (TransformerConfigurationException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } catch (TransformerException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns the loaded page content."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String getLoadedContent() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return this.loadedContent;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(WEB_VIEW_ID));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedUrl.equals(getLoadedUrl());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "huichun66": 57
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final RequestListPanelHandle requestListPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final InfoPanelHandle infoPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final HealthWorkerListPanelHandle healthWorkerListPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requestListPanel \u003d new RequestListPanelHandle(getChildNode(RequestListPanelHandle.REQUEST_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        infoPanel \u003d new InfoPanelHandle(getChildNode(InfoPanelHandle.WEB_VIEW_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        healthWorkerListPanel \u003d new HealthWorkerListPanelHandle(getChildNode("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                HealthWorkerListPanelHandle.HEALTH_WORKER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public RequestListPanelHandle getRequestListPanel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return requestListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public InfoPanelHandle getInfoPanel() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return infoPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public HealthWorkerListPanelHandle getHealthWorkerListPanel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return healthWorkerListPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "huichun66": 19
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RequestCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Provides a handle to a request card in the request list panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class RequestCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String NRIC_FIELD_ID \u003d \"#nric\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String CONDITIONS_FIELD_ID \u003d \"#conditions\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Label nricLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final List\u003cLabel\u003e conditionLabels;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public RequestCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        nricLabel \u003d getChildNode(NRIC_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Region condContainer \u003d getChildNode(CONDITIONS_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        conditionLabels \u003d condContainer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return nricLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public List\u003cString\u003e getConditions() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return conditionLabels"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns true if this handle contains {@code request}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public boolean equals(Request request) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return getName().equals(request.getName().toString())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                \u0026\u0026 getPhone().equals(request.getPhone().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "huichun66": 25
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RequestListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Provides a handle for {@code RequestListPanel} containing the list of {@code RequestCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class RequestListPanelHandle extends NodeHandle\u003cListView\u003cRequest\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String REQUEST_LIST_VIEW_ID \u003d \"#requestListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Optional\u003cRequest\u003e lastRememberedSelectedRequestCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public RequestListPanelHandle(ListView\u003cRequest\u003e requestListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        super(requestListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns a handle to the selected {@code RequestCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public RequestCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cRequest\u003e selectedRequestList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (selectedRequestList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new AssertionError(\"Request list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .map(RequestCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedRequestList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cRequest\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Navigates the list view to display {@code request}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void navigateToCard(Request request) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        if (!getRootNode().getItems().contains(request)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            getRootNode().scrollTo(request);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the list view to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Selects the {@code RequestCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns the card handle of a request associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public RequestCardHandle getRequestCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .map(RequestCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                .filter(handle -\u003e handle.equals(getRequest(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Request getRequest(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Remembers the selected {@code RequestCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void rememberSelectedRequestCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cRequest\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            lastRememberedSelectedRequestCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            lastRememberedSelectedRequestCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public boolean isSelectedRequestCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        List\u003cRequest\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            return lastRememberedSelectedRequestCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            return !lastRememberedSelectedRequestCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    || !lastRememberedSelectedRequestCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 124,
      "huichun66": 35
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusBarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Labeled syncStatusNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Labeled saveLocationNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "huichun66": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WebViewUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods for dealing with {@code WebView}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class WebViewUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page in the {@code webView}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static URL getLoadedUrl(WebView webView) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            return new URL(webView.getEngine().getLocation());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * If the {@code infoPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is successfully loaded."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void waitUntilBrowserLoaded(InfoPanelHandle infoPanelHandle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        new GuiRobot().waitForEvent(infoPanelHandle::isLoaded);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "huichun66": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.storage.JsonHealthWorkerBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.storage.JsonRequestBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING_HEALTHWORKERBOOK \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"healthWorkerData.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING_REQUESTBOOK \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"requestData.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    protected Supplier\u003cReadOnlyHealthWorkerBook\u003e initialHealthWorkerBookSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    protected Supplier\u003cReadOnlyRequestBook\u003e initialRequestBookSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    protected Path saveHealthWorkerBookLocation \u003d SAVE_LOCATION_FOR_TESTING_HEALTHWORKERBOOK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    protected Path saveRequestBookLocation \u003d SAVE_LOCATION_FOR_TESTING_REQUESTBOOK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyHealthWorkerBook\u003e initialHealthWorkerBookSupplier, Path healthWorkerBookPath,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                   Supplier\u003cReadOnlyRequestBook\u003e initialRequestBookSupplier, Path requestBookPath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.initialHealthWorkerBookSupplier \u003d initialHealthWorkerBookSupplier;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.initialRequestBookSupplier \u003d initialRequestBookSupplier;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.saveHealthWorkerBookLocation \u003d healthWorkerBookPath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        this.saveRequestBookLocation \u003d requestBookPath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (initialHealthWorkerBookSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            JsonHealthWorkerBookStorage jsonHealthWorkerBookStorage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                    new JsonHealthWorkerBookStorage(healthWorkerBookPath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                jsonHealthWorkerBookStorage.saveHealthWorkerBook(initialHealthWorkerBookSupplier.get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        if (initialRequestBookSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            JsonRequestBookStorage jsonRequestBookStorage \u003d new JsonRequestBookStorage(requestBookPath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                jsonRequestBookStorage.saveRequestBook(initialRequestBookSupplier.get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        userPrefs.setHealthWorkerBookFilePath(saveHealthWorkerBookLocation);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        userPrefs.setRequestBookFilePath(saveRequestBookLocation);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //TODO: implement requestBook and HealthworkerBook for tests"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //  try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //    return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //} catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //   throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //} catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //  throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //  return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // TODO: Fix HealthWorkerBook implementation"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model copy \u003d new ModelManager(new HealthWorkerBook(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new RequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "jing1324": 52,
      "Lookuz": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/jsonfilegenerator/HealthWorkerBookJsonGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.jsonfilegenerator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.storage.HealthWorkerBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.storage.JsonHealthWorkerBookStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.TypicalHealthWorkers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * This is a executable program that generates a JSON file of typical HealthWorkers."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * This can be modified to generate a JSON file of any kind of book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "*/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class HealthWorkerBookJsonGenerator {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Main functions creates a health worker book out of HealthWorkers found in TypicalHealthWorker file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * and saves it into a json file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param args Leave it empty"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        String filepath \u003d \"toberenamed.json\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorkerBook healthWorkerBook \u003d TypicalHealthWorkers.getTypicalHealthWorkerBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        System.out.println(healthWorkerBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Path healthWorkerBookFilePath \u003d Paths.get(filepath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorkerBookStorage storage \u003d new JsonHealthWorkerBookStorage(healthWorkerBookFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            storage.saveHealthWorkerBook(healthWorkerBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            System.out.println(\"new file created\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            System.out.println(\"Problems with IO\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 46,
      "Lookuz": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/jsonfilegenerator/RequestBookJsonGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.jsonfilegenerator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.healthworker.Request;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.storage.JsonRequestBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.storage.RequestBookStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.testutil.TypicalRequests;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * This is a executable program that generates a JSON file of typical Requests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": " * This can be modified to generate a JSON file of any kind of book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class RequestBookJsonGenerator {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Main functions creates a health worker book out of Requests found in TypicalRequest file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * and saves it into a json file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * @param args Leave it empty"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        String filepath \u003d \"toberenamed.json\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        RequestBook requestBook \u003d TypicalRequests.getTypicalRequestBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Path requestBookFilePath \u003d Paths.get(filepath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        RequestBookStorage storage \u003d new JsonRequestBookStorage(requestBookFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            storage.saveRequestBook(requestBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            System.out.println(\"new file created\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            System.out.println(\"Problems with IO\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 50,
      "huichun66": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONDITION_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODE_REQUEST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ANDY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_ANDY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_ANDY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_ANDY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILLS_DESC_ANDY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION_PHYSIO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ALICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_ALICE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_ALICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_ALICE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CommandMode.MODE_HEALTHWORKER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.ListRequestCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.RequestStatus;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonHealthWorkerBookStorage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonRequestBookStorage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonRequestBookStorage requestBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonRequestBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonHealthWorkerBookStorage jsonHealthWorkerBookStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonHealthWorkerBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            requestBookStorage, jsonHealthWorkerBookStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        long now \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String invalidCommand \u003d \"wnfookdasd\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_commandExecutionError_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        long now \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseException(deleteCommand, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                DeleteCommandParser.INVALID_COMMAND_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        long now \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD + \" request\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(listCommand, ListRequestCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonRequestBookStorage requestBookStorage \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            new JsonRequestBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonHealthWorkerBookStorage jsonHealthWorkerBookStorage \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            new JsonHealthWorkerBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            requestBookStorage, jsonHealthWorkerBookStorage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Saving Health Worker"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String addHealthWorkerCommand \u003d AddCommand.COMMAND_WORD + \" \" + MODE_HEALTHWORKER + NAME_DESC_ANDY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + PHONE_DESC_ANDY + NRIC_DESC_ANDY + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker expectedHealthWorker \u003d new HealthWorkerBuilder(ANDY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.addHealthWorker(expectedHealthWorker);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandBehavior(CommandException.class, addHealthWorkerCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        long now \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertHistoryCorrect(addHealthWorkerCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Saving Request"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String addRequestCommand \u003d AddCommand.COMMAND_WORD + \" \" + MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_ALICE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + ADDRESS_DESC_ALICE + CONDITION_DESC_ALICE + DATE_DESC_ALICE + NRIC_DESC_ALICE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Request expectedRequest \u003d new Request(new Name(VALID_NAME_ALICE), new Nric(VALID_NRIC_ALICE),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new Phone(VALID_PHONE_ALICE), new Address(VALID_ADDRESS_ALICE), new RequestDate(VALID_DATE_ALICE),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                SampleDataUtil.getConditionSet(VALID_CONDITION_PHYSIO), new RequestStatus(VALID_STATUS_ALICE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.addRequest(expectedRequest);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.commitRequestBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        now \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandBehavior(CommandException.class, addRequestCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertHistoryCorrect(addRequestCommand, HistoryCommand.COMMAND_WORD, addHealthWorkerCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredHealthWorkerList().remove(0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHealthWorkerBook(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * A stub HealthWorkerBookStorage class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static class JsonHealthWorkerBookIoExceptionThrowingStub extends JsonHealthWorkerBookStorage {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        private JsonHealthWorkerBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * A stub RequestBookStorage class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static class JsonRequestBookIoExceptionThrowingStub extends JsonRequestBookStorage {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        private JsonRequestBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void saveRequestBook(ReadOnlyRequestBook requestBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 160,
      "jing1324": 3,
      "Lookuz": 85,
      "huichun66": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPersonCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class AddPersonCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            model.getHealthWorkerBook(), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(new AddPersonCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(new AddPersonCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_HEALTHWORKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_REQUEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.EditRequestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.CommandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.EditHealthWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditRequestDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"94672740\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"81812288\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"01-10-2018 10:00:00\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"02-10-2018 10:00:00\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S9876543Z\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // Default strings for Health Worker objects"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_NAME_ANDY \u003d \"Andy Tan\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_NAME_BETTY \u003d \"Health Worker B\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_NRIC_ANDY \u003d \"S8312942G\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_NRIC_BETTY \u003d \"S9898222A\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_PHONE_ANDY \u003d \"94358253\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_PHONE_BETTY \u003d \"99991111\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_ORGANIZATION_ANDY \u003d \"NUH\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_ORGANIZATION_BETTY \u003d \"Clinic B\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Default strings for Patient objects"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_ALICE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BENSON \u003d \"Benson Meier\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_DATE_ALICE \u003d \"01-01-2019 10:00:00\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_DATE_BENSON \u003d \"02-01-2919 08:00:00\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_STATUS_ALICE \u003d \"PENDING\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_STATUS_BENSON \u003d \"PENDING\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_ADDRESS_ALICE \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_ADDRESS_BENSON \u003d \"311, Clementi Ave 2, #02-25\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_ALICE \u003d \"94351253\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BENSON \u003d \"98765432\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_NRIC_ALICE \u003d \"S9670515H\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_NRIC_BENSON \u003d \"S9274100D\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CONDITION_PHYSIO \u003d \"Physiotherapy\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CONDITION_DIALYSIS \u003d \"Dialysis\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String VALID_CONDITION_PALLIATIVE \u003d \"Palliative\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // Default descriptions for Health Worker objects"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MODE_HEALTHWORKER \u003d \" \" + PREFIX_ADD_HEALTHWORKER;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_MODE \u003d \" \" + \"invalid\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String NAME_DESC_ANDY \u003d \" \" + PREFIX_NAME + VALID_NAME_ANDY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String NAME_DESC_BETTY \u003d \" \" + PREFIX_NAME + VALID_NAME_BETTY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String NRIC_DESC_ANDY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_ANDY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String NRIC_DESC_BETTY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BETTY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String PHONE_DESC_ANDY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_ANDY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String PHONE_DESC_BETTY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BETTY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String ORGANIZATION_DESC_ANDY \u003d \" \" + PREFIX_ORGANIZATION + VALID_ORGANIZATION_ANDY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String ORGANIZATION_DESC_BETTY \u003d \" \" + PREFIX_ORGANIZATION + VALID_ORGANIZATION_BETTY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String SKILLS_DESC_ANDY \u003d \" \" + PREFIX_SKILLS + Specialisation.GENERAL_PRACTICE.name()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            + \" \" + PREFIX_SKILLS + Specialisation.PHYSIOTHERAPY.name();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // Default descriptions for Request objects"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String MODE_REQUEST \u003d \" \" + PREFIX_ADD_REQUEST;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String NAME_DESC_ALICE \u003d \" \" + PREFIX_NAME + VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String NAME_DESC_BENSON \u003d \" \" + PREFIX_NAME + VALID_NAME_BENSON;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String PHONE_DESC_ALICE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_ALICE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String PHONE_DESC_BENSON \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BENSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String ADDRESS_DESC_ALICE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_ALICE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String ADDRESS_DESC_BENSON \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BENSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String STATUS_DESC_ALICE \u003d \" \" + PREFIX_STATUS + VALID_STATUS_ALICE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String DATE_DESC_ALICE \u003d \" \" + PREFIX_DATE + VALID_DATE_ALICE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String DATE_DESC_BENSON \u003d \" \" + PREFIX_DATE + VALID_DATE_BENSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String NRIC_DESC_ALICE \u003d \" \" + PREFIX_NRIC + VALID_NRIC_ALICE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String NRIC_DESC_BENSON \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BENSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String CONDITION_DESC_ALICE \u003d \" \" + PREFIX_CONDITION + VALID_CONDITION_PHYSIO;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String CONDITION_DESC_BENSON \u003d \" \" + PREFIX_CONDITION + VALID_CONDITION_PALLIATIVE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_ORGANIZATION_DESC \u003d \" \" + PREFIX_ORGANIZATION + \"ABC!\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"A12345678\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_SKILLS_DESC \u003d \" \" + PREFIX_SKILLS + \"general_practice\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_CONDITION_DESC \u003d \" \" + PREFIX_CONDITION + \" \";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"14th march\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final EditHealthWorkerCommand.EditHealthWorkerDescriptor DESC_ANDY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final EditHealthWorkerCommand.EditHealthWorkerDescriptor DESC_BETTY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditRequestCommand.EditRequestDescriptor REQ_DESC_ALICE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditRequestCommand.EditRequestDescriptor REQ_DESC_BOB;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        REQ_DESC_ALICE \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditRequestDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .withDate(VALID_DATE_AMY).withAddress(VALID_ADDRESS_AMY).withConditions(VALID_CONDITION_PHYSIO)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        REQ_DESC_BOB \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditRequestDescriptorBuilder().withAddress(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .withDate(VALID_DATE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .withConditions(VALID_CONDITION_PHYSIO).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        DESC_ANDY \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_ANDY)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_ANDY)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withNric(VALID_NRIC_ANDY)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withOrganization(VALID_ORGANIZATION_ANDY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withSkills(Specialisation.GENERAL_PRACTICE.name(), Specialisation.PHYSIOTHERAPY.name()).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        DESC_BETTY \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_BETTY)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withNric(VALID_NRIC_BETTY)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withOrganization(VALID_ORGANIZATION_BETTY)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withSkills(Specialisation.GENERAL_PRACTICE.name(), Specialisation.ORTHOPAEDIC.name()).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //TODO rewrite with requestbook and healthworkerbook"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "          //  command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            //throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //} catch (CommandException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "          //  assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": "           // assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            //assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            //assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            //assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Deletes the first healthworker in {@code model}\u0027s filtered list from {@code model}\u0027s healthworker book."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static void deleteFirstHealthWorker(Model model) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorker firstHealthWorker \u003d model.getFilteredHealthWorkerList().get(0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.deleteHealthWorker(firstHealthWorker);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.commit(CommandType.HEALTHWORKER_COMMAND);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Deletes the first request in {@code model}\u0027s filtered list from {@code model}\u0027s request book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static void deleteFirstRequest(Model model) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Request firstRequest \u003d model.getFilteredRequestList().get(0);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.deleteRequest(firstRequest);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.commit(CommandType.REQUEST_COMMAND);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 116,
      "jing1324": 35,
      "Lookuz": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterHealthWorkerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_HEALTHWORKER_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ANDY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_ANDY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BETTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ELLA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.PANIEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterHealthWorkerCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class FilterHealthWorkerCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cPredicate\u003e firstList \u003d Arrays.asList(x -\u003e ((HealthWorker) x).getName().equals(VALID_NAME_ANDY));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cPredicate\u003e secondList \u003d Arrays.asList(x -\u003e ((HealthWorker) x).getName().equals(VALID_PHONE_BETTY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterHealthWorkerCommand firstCommand \u003d new FilterHealthWorkerCommand(firstList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterHealthWorkerCommand secondCommand \u003d new FilterHealthWorkerCommand(secondList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterHealthWorkerCommand firstCommandCopy \u003d new FilterHealthWorkerCommand(firstList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different predicates -\u003e return false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(firstCommand.equals(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void reducePredicates() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e firstPredicate \u003d x -\u003e x.getName().contains(VALID_NAME_ANDY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e secondPredicate \u003d x -\u003e x.hasSkill(Specialisation.GENERAL_PRACTICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // combine multiple predicates"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateFilteredHealthWorkerList(FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .reducePredicates(Arrays.asList(firstPredicate, secondPredicate)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Arrays.asList(ANDY), expectedModel.getFilteredHealthWorkerList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e thirdPredicate \u003d x -\u003e x.getOrganization().contains(VALID_ORGANIZATION_ANDY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateFilteredHealthWorkerList(FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .reducePredicates(Arrays.asList(firstPredicate, secondPredicate, thirdPredicate)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Arrays.asList(ANDY), expectedModel.getFilteredHealthWorkerList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_singleParameter() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_HEALTHWORKER_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e predicate \u003d x -\u003e x.hasSkill(Specialisation.PHYSIOTHERAPY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterHealthWorkerCommand command \u003d new FilterHealthWorkerCommand(Arrays.asList(predicate));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateFilteredHealthWorkerList(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Arrays.asList(ANDY, PANIEL, ELLA), model.getFilteredHealthWorkerList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_HEALTHWORKER_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicate \u003d x -\u003e x.getName().contains(\"Me\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        command \u003d new FilterHealthWorkerCommand(Arrays.asList(predicate));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateFilteredHealthWorkerList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Arrays.asList(BETTY, PANIEL, ELLA), model.getFilteredHealthWorkerList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_multipleParameters() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_HEALTHWORKER_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e firstPredicate \u003d x -\u003e x.hasSkill(Specialisation.PHYSIOTHERAPY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e secondPredicate \u003d x -\u003e x.getName().contains(\"Me\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterHealthWorkerCommand command \u003d new FilterHealthWorkerCommand(Arrays"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .asList(firstPredicate, secondPredicate));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateFilteredHealthWorkerList(FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .reducePredicates(Arrays.asList(firstPredicate, secondPredicate)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Arrays.asList(PANIEL, ELLA), model.getFilteredHealthWorkerList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 2,
      "Lookuz": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListHealthWorkerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListHealthWorkerCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class ListHealthWorkerCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getHealthWorkerBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(new ListHealthWorkerCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                ListHealthWorkerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // TODO: Hui Chun - Integration test once UI is implemented"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // assertCommandSuccess(new ListHealthWorkerCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //        ListHealthWorkerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "jing1324": 2,
      "Lookuz": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstHealthWorker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        deleteFirstHealthWorker(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        deleteFirstRequest(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        deleteFirstHealthWorker(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        deleteFirstRequest(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.redo();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.redo();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jing1324": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index lastIndex \u003d Index.fromOneBased(model.getFilteredRequestList().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertExecutionSuccess(lastIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // out of bounds index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredRequestList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.setSelectedRequest(model.getFilteredRequestList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "jing1324": 2,
      "Lookuz": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetReminderCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": " *  Unit test for the SetReminderCommand class. Asserts that command execution is successful,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": " *  but does not assert that details of the reminder on the UI is consistent."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": " *  @author Hui Chun"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class SetReminderCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void execute_setReminder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        SetReminderCommand command \u003d new SetReminderCommand(\"00:00:01\", \"for testing purposes\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Date duration \u003d SetReminderCommand.FORMATTER.parse(\"00:00:01\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Calendar c1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Calendar c2 \u003d SetReminderCommand.dateToCalendar(duration);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Calendar cTotal \u003d (Calendar) c1.clone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            cTotal.add(Calendar.HOUR_OF_DAY, c2.get(Calendar.HOUR_OF_DAY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            cTotal.add(Calendar.MINUTE, c2.get(Calendar.MINUTE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            cTotal.add(Calendar.SECOND, c2.get(Calendar.SECOND));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            assertCommandSuccess(command, model, history, String.format(SetReminderCommand.MESSAGE_REMINDER_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    SetReminderCommand.DISPLAY_FORMATTER.format(cTotal.getTime())), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Thread.sleep(1000);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } catch (ParseException parseException) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            // do nth as the test will fail if parse fails"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            // sleep for one second when showing the alert dialog during testing mode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstHealthWorker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        deleteFirstHealthWorker(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        deleteFirstRequest(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        deleteFirstHealthWorker(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        deleteFirstRequest(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "jing1324": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/healthworker/AddHealthWorkerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.AddHealthWorkerCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.CommandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class AddHealthWorkerCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                AddHealthWorkerCommand(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        ModelStubAcceptingHealthWorkerAdded modelStub \u003d new"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                ModelStubAcceptingHealthWorkerAdded();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker validWorker \u003d new HealthWorkerBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        CommandResult commandResult \u003d new AddHealthWorkerCommand(validWorker)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(String.format(AddHealthWorkerCommand.MESSAGE_SUCCESS, validWorker),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Arrays.asList(validWorker), modelStub.healthWorkersAdded);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Duplicate health worker"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker newValidWorker \u003d new HealthWorkerBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        thrown.expectMessage(AddHealthWorkerCommand.DUPLICATE_HEALTH_WORKER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        new AddHealthWorkerCommand(newValidWorker).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        AddHealthWorkerCommand addAndyCommand \u003d new AddHealthWorkerCommand(ANDY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        AddHealthWorkerCommand addBettyCommand \u003d new AddHealthWorkerCommand(BETTY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(addAndyCommand.equals(addAndyCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(addBettyCommand.equals(new AddHealthWorkerCommand(BETTY)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(addAndyCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null command -\u003e return false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(addAndyCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different health workers -\u003e return false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(addAndyCommand.equals(addBettyCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Model Stub class for accepting HealthWorker objects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private class ModelStubAcceptingHealthWorkerAdded extends ModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        private ArrayList\u003cHealthWorker\u003e healthWorkersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void addHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            requireNonNull(healthWorker);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            this.healthWorkersAdded.add(healthWorker);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public boolean hasHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            requireNonNull(healthWorker);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return this.healthWorkersAdded.stream().anyMatch("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    healthWorker::isSameHealthWorker);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void commitHealthWorkerBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "           // called by {@code AddHealthWorkerCommand#execute()}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void commit(CommandType commandType) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            // called by {@code AddHealthWorkerCommand#execute()}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected class ModelStub implements Model {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Implemented methods supporting Health Worker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // @author Lookaz"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public boolean hasHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void deleteHealthWorker(HealthWorker target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void addHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setHealthWorker(HealthWorker target, HealthWorker editedWorker) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setSelectedHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public ReadOnlyProperty\u003cHealthWorker\u003e selectedHealthWorkerProperty() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public ObservableList\u003cHealthWorker\u003e getFilteredHealthWorkerList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void updateFilteredHealthWorkerList(Predicate\u003cHealthWorker\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public ReadOnlyHealthWorkerBook getHealthWorkerBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        public Path getHealthWorkerBookFilePath() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void commitHealthWorkerBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * Returns the user prefs\u0027 request book file path."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public Path getRequestBookFilePath() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * Returns the RequestBook"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public ReadOnlyRequestBook getRequestBook() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public ObservableList\u003cRequest\u003e getFilteredRequestList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * Returns true if a request with the same identity as {@code request} exists in the address"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * @param request"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public boolean hasRequest(Request request) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void updateRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * Deletes the given request."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * The request must exist in the request book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * @param target"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void deleteRequest(Request target) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void updateFilteredRequestList(Predicate\u003cRequest\u003e predicate) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * Adds the given request."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * {@code request} must not already exist in the request book."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void addRequest(Request request) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyRequestBook newData) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * Replaces the given request {@code target} with {@code editedRequest}."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * {@code target} must exist in the request book."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * The request identity of {@code editedRequest} must not be the same as another existing"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * request in the request book."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * @param target"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         * @param editedRequest"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void setSelectedRequest(Request request) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public ReadOnlyProperty\u003cRequest\u003e selectedRequestProperty() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void commitRequestBook() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void commit(CommandType commandType) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "jing1324": 39,
      "Lookuz": 288,
      "huichun66": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/healthworker/DeleteHealthWorkerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.DeleteHealthWorkerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class DeleteHealthWorkerCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_validIndex() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker toDelete \u003d model.getFilteredHealthWorkerList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteHealthWorkerCommand deleteHealthWorkerCommand \u003d new DeleteHealthWorkerCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteHealthWorkerCommand.MESSAGE_DELETE_HEALTHWORKER_SUCCESS, toDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getHealthWorkerBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.deleteHealthWorker(toDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(deleteHealthWorkerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_invalidIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredHealthWorkerList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        DeleteHealthWorkerCommand deleteHealthWorkerCommand \u003d new DeleteHealthWorkerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandFailure(deleteHealthWorkerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // TODO: add tests for undo/redo after undo/redo addressbook methods are implemented"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteHealthWorkerCommand deleteFirstCommand \u003d new DeleteHealthWorkerCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteHealthWorkerCommand deleteSecondCommand \u003d new DeleteHealthWorkerCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteHealthWorkerCommand deleteFirstCommandCopy \u003d new DeleteHealthWorkerCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Updates {@code model}\u0027s filtered HealthWorker list to show no one."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private void showNoHealthWorker(Model model) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        model.updateFilteredHealthWorkerList(p -\u003e false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(model.getFilteredHealthWorkerList().isEmpty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "jing1324": 3,
      "Lookuz": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/healthworker/EditHealthWorkerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ANDY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BETTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BETTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BETTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand.EditHealthWorkerDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.HealthWorkerCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.EditHealthWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class EditHealthWorkerCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_allFieldsSpecified() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedHealthWorker \u003d new HealthWorkerBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder(editedHealthWorker).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(EditHealthWorkerCommand.MESSAGE_EDIT_HEALTHWORKER_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                editedHealthWorker);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new HealthWorkerBook(model.getHealthWorkerBook()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.setHealthWorker(model.getFilteredHealthWorkerList().get(0), editedHealthWorker);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(editHealthWorkerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_someFieldsSpecified() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index indexLastHealthWorker \u003d Index.fromOneBased(model.getFilteredHealthWorkerList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker lastHealthWorker \u003d model.getFilteredHealthWorkerList().get(indexLastHealthWorker.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedHealthWorker \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(lastHealthWorker)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withName(VALID_NAME_BETTY).withPhone(VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_BETTY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(indexLastHealthWorker,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(EditHealthWorkerCommand.MESSAGE_EDIT_HEALTHWORKER_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                editedHealthWorker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            new HealthWorkerBook(model.getHealthWorkerBook()), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.setHealthWorker(lastHealthWorker, editedHealthWorker);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(editHealthWorkerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_noFieldsSpecified() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(INDEX_FIRST, new"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                EditHealthWorkerDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker editedHealthWorker \u003d model.getFilteredHealthWorkerList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(EditHealthWorkerCommand.MESSAGE_EDIT_HEALTHWORKER_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                editedHealthWorker);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            new HealthWorkerBook(model.getHealthWorkerBook()), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(editHealthWorkerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_filteredList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker healthWorkerInFilteredList \u003d model.getFilteredHealthWorkerList().get(INDEX_FIRST"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedHealthWorker \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(healthWorkerInFilteredList)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withName(VALID_NAME_BETTY)).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(INDEX_FIRST, new"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_BETTY).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(EditHealthWorkerCommand.MESSAGE_EDIT_HEALTHWORKER_SUCCESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                editedHealthWorker);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            new HealthWorkerBook(model.getHealthWorkerBook()), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.setHealthWorker(model.getFilteredHealthWorkerList().get(0), editedHealthWorker);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(editHealthWorkerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_duplicateHealthWorker() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker firstHealthWorker \u003d model.getFilteredHealthWorkerList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder(firstHealthWorker).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandFailure(editHealthWorkerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                HealthWorkerCommand.DUPLICATE_HEALTH_WORKER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_duplicateHealthWorkerFilteredList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker healthWorkerInList \u003d model.getHealthWorkerBook().getHealthWorkerList().get(INDEX_SECOND"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new EditHealthWorkerDescriptorBuilder(healthWorkerInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandFailure(editHealthWorkerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                EditHealthWorkerCommand.DUPLICATE_HEALTH_WORKER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_invalidIndex() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(model.getFilteredHealthWorkerList().size() + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_BETTY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(outOfBounds, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandFailure(editHealthWorkerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_undoRedo() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedHealthWorker \u003d new HealthWorkerBuilder().build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker toEdit \u003d model.getFilteredHealthWorkerList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder(editedHealthWorker).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            new HealthWorkerBook(model.getHealthWorkerBook()), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.setHealthWorker(toEdit, editedHealthWorker);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel.commitHealthWorkerBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editHealthWorkerCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // undo"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // CommandTestUtil.assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //      UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // redo"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public void execute_undoRedo_invalidIndex() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //TODO: to be reestablished once undo and redo are done"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //Index outOfBounds \u003d Index.fromOneBased(model.getFilteredHealthWorkerList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_BETTY)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //      .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(outOfBounds, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //assertCommandFailure(editHealthWorkerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    // Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public void execute_undoRedo_filteredList() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //TODO: same as above"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //HealthWorker editedHealthWorker \u003d new HealthWorkerBuilder().build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder(editedHealthWorker).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //  new HealthWorkerBook(model.getHealthWorkerBook()), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //HealthWorker toEdit \u003d model.getFilteredHealthWorkerList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //expectedModel.setHealthWorker(toEdit, editedHealthWorker);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //editHealthWorkerCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //assertNotEquals(model.getFilteredHealthWorkerList().get(INDEX_FIRST.getZeroBased()), toEdit);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //  assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditHealthWorkerCommand standardCommand \u003d new EditHealthWorkerCommand(INDEX_FIRST, DESC_ANDY);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptor(DESC_ANDY);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d new EditHealthWorkerCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(editHealthWorkerCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(standardCommand.equals(1));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different index -\u003e return false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditHealthWorkerCommand(INDEX_SECOND, DESC_ANDY)));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different descriptor -\u003e return false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditHealthWorkerCommand(INDEX_FIRST, DESC_BETTY)));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "jing1324": 58,
      "Lookuz": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/healthworker/EditHealthWorkerDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.commands.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ANDY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BETTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BETTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_BETTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.EditHealthWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class EditHealthWorkerDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same values-\u003e return true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand.EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .EditHealthWorkerDescriptor(DESC_ANDY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(DESC_ANDY.equals(descriptor));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(DESC_ANDY.equals(DESC_ANDY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(DESC_ANDY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(DESC_ANDY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder(DESC_ANDY).withName(VALID_NAME_BETTY).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(DESC_ANDY.equals(descriptor));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different NRIC -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder(DESC_ANDY).withNric(VALID_NRIC_BETTY).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(DESC_ANDY.equals(descriptor));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different organization -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder(DESC_ANDY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withOrganization(VALID_ORGANIZATION_BETTY).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(DESC_ANDY.equals(descriptor));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different skills -\u003e return false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder(DESC_ANDY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withSkills(Specialisation.ORTHOPAEDIC.name()).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(DESC_ANDY.equals(descriptor));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/request/AddRequestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.CommandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.RequestBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalRequests;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "class AddRequestCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullRequest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AddRequestCommand(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_requestAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingRequestAdded modelStub \u003d new ModelStubAcceptingRequestAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Request validRequest \u003d new RequestBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddRequestCommand(validRequest).execute(modelStub,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddRequestCommand.MESSAGE_SUCCESS, validRequest),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(validRequest), modelStub.requestsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateRequest_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Request validRequest \u003d new RequestBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddRequestCommand addRequestCommand \u003d new AddRequestCommand(validRequest);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRequest(validRequest);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            AddRequestCommand.MESSAGE_DUPLICATE_REQUEST, () -\u003e addRequestCommand.execute"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                (modelStub, commandHistory));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddRequestCommand addAliceRequest \u003d new AddRequestCommand(TypicalRequests.ALICE_REQUEST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddRequestCommand addBensonRequest \u003d new AddRequestCommand(TypicalRequests.BENSON_REQUEST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceRequest.equals(addAliceRequest));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddRequestCommand addAliceRequestCopy \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            new AddRequestCommand(TypicalRequests.ALICE_REQUEST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceRequest.equals(addAliceRequestCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceRequest.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceRequest.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // differnt request -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceRequest.equals(addBensonRequest));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    protected class ModelStub implements Model {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyHealthWorkerBook getHealthWorkerBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        public Path getHealthWorkerBookFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteHealthWorker(HealthWorker target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setHealthWorker(HealthWorker target, HealthWorker editedWorker) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void setSelectedHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public ReadOnlyProperty\u003cHealthWorker\u003e selectedHealthWorkerProperty() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cHealthWorker\u003e getFilteredHealthWorkerList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredHealthWorkerList(Predicate\u003cHealthWorker\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void commitHealthWorkerBook() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getRequestBookFilePath() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyRequestBook getRequestBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cRequest\u003e getFilteredRequestList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasRequest(Request request) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteRequest(Request target) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredRequestList(Predicate\u003cRequest\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addRequest(Request request) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyRequestBook newData) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void setSelectedRequest(Request request) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public ReadOnlyProperty\u003cRequest\u003e selectedRequestProperty() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitRequestBook() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        } @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void commit(CommandType commandType) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithRequest extends ModelStub {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Request request;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithRequest(Request request) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(request);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            this.request \u003d request;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasRequest(Request request) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(request);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.request.isSameRequest(request);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingRequestAdded extends ModelStub {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cRequest\u003e requestsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasRequest(Request request) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(request);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return requestsAdded.stream().anyMatch(request::isSameRequest);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addRequest(Request request) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(request);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            requestsAdded.add(request);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitRequestBook() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddRequestCommand#execute()}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyRequestBook getRequestBook() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RequestBook();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        public void commit(CommandType commandType) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            // called by {@code AddRequestCommand#execute()}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 261,
      "jing1324": 51,
      "huichun66": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/request/AssignRequestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.request.AssignRequestCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "class AssignRequestCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Request validRequest \u003d model.getFilteredRequestList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index validRequestIndex \u003d Index.fromOneBased(model.getFilteredRequestList().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index validHealthWorkerIndex \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index.fromOneBased(model.getFilteredHealthWorkerList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index outOfBoundRequestIndex \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index.fromOneBased(model.getFilteredRequestList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index outOfBoundHealthWorkerIndex \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index.fromOneBased(model.getFilteredHealthWorkerList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullHealthworker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cIndex\u003e validRequestIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        validRequestIds.add(validRequestIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AssignRequestCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            null, validRequestIds));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullRequestIds_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignRequestCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            validHealthWorkerIndex, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_requestAssignedToHealthworker_successful() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cRequest\u003e requestsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Request toAssign \u003d new Request(validRequest);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requestsToAdd.add(toAssign);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker healthWorkerToAssign \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            model.getFilteredHealthWorkerList().get(validHealthWorkerIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        HealthWorker assignedHealthWorker \u003d new HealthWorker(healthWorkerToAssign);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        toAssign.setHealthWorker(assignedHealthWorker);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cIndex\u003e requestIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requestIds.add(INDEX_FIRST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AssignRequestCommand assignRequestCommand \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            new AssignRequestCommand(validHealthWorkerIndex, requestIds);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            assignedHealthWorker);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHealthWorkerBook(), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // todo needs model.updateHealthworker()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateRequest(validRequest, toAssign);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitRequestBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(toAssign.getHealthStaff(), assignedHealthWorker.getName().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(assignRequestCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_orderIndexTooLarge_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cIndex\u003e requestIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requestIds.add(outOfBoundRequestIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AssignRequestCommand assignRequestCommand \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new AssignRequestCommand(validHealthWorkerIndex, requestIds);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e assignRequestCommand.execute(model,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            commandHistory), Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_healthWorkerIndexTooLarge_throwsCommandException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cIndex\u003e requestIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requestIds.add(validRequestIndex);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        AssignRequestCommand assignRequestCommand \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            new AssignRequestCommand(outOfBoundHealthWorkerIndex, requestIds);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e assignRequestCommand.execute(model, commandHistory),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Messages.MESSAGE_INVALID_HEALTHWORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_completedRequest_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cIndex\u003e requestIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requestIds.add(validRequestIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Request req \u003d model.getFilteredRequestList().get(validRequestIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Request newRequest \u003d new Request(req);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        newRequest.complete();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setRequest(req, newRequest);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        AssignRequestCommand assignRequestCommand \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            new AssignRequestCommand(validHealthWorkerIndex, requestIds);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e assignRequestCommand.execute(model,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            commandHistory), Messages.MESSAGE_REQUEST_COMPLETED_CANNOT_ASSIGN);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cIndex\u003e indexOne \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        indexOne.add(INDEX_FIRST);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cIndex\u003e indexTwo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        indexTwo.add(INDEX_SECOND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AssignRequestCommand firstCommand \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            new AssignRequestCommand(validHealthWorkerIndex, indexOne);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AssignRequestCommand secondCommand \u003d new AssignRequestCommand(validHealthWorkerIndex,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            indexTwo);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns equal"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(firstCommand, firstCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns equal"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        AssignRequestCommand firstCommandCopy \u003d new AssignRequestCommand(validHealthWorkerIndex,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            indexOne);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(firstCommand, firstCommandCopy);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns not equal"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(firstCommand, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns not equal"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(firstCommand, null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e not equal"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(firstCommand, secondCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 152,
      "jing1324": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/request/DeleteRequestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class DeleteRequestCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndex() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Request toDelete \u003d model.getFilteredRequestList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteRequestCommand deleteRequestCommand \u003d new DeleteRequestCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(DeleteRequestCommand.MESSAGE_DELETE_REQUEST_SUCCESS, toDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getHealthWorkerBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteRequest(toDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitRequestBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteRequestCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndex() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRequestList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteRequestCommand deleteRequestCommand \u003d new DeleteRequestCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteRequestCommand, model, commandHistory, Messages"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteRequestCommand deleteFirstCommand \u003d new DeleteRequestCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteRequestCommand deleteSecondCommand \u003d new DeleteRequestCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteRequestCommand deleteRequestCommand \u003d new DeleteRequestCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteRequestCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different request -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "jing1324": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/request/EditRequestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REQ_DESC_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REQ_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ANDY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.request.RequestCommand.MESSAGE_DUPLICATE_REQUEST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.ALICE_REQUEST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.BENSON_REQUEST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.EditRequestDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.RequestBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "class EditRequestCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String defaultAddress \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    void execute_oneFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Request editedRequest \u003d new RequestBuilder(ALICE_REQUEST).withAddress(defaultAddress).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand.EditRequestDescriptor descriptor \u003d new EditRequestDescriptorBuilder(editedRequest).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand editRequestCommand \u003d new EditRequestCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(EditRequestCommand.MESSAGE_EDIT_REQUEST_SUCCESS, editedRequest);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHealthWorkerBook(), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateRequest(model.getFilteredRequestList().get(0), editedRequest);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.commitRequestBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(editRequestCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Request editedRequest \u003d new RequestBuilder(ALICE_REQUEST).withName(VALID_NAME_BENSON)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BENSON).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand.EditRequestDescriptor descriptor \u003d new EditRequestDescriptorBuilder(editedRequest).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand editRequestCommand \u003d new EditRequestCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(EditRequestCommand.MESSAGE_EDIT_REQUEST_SUCCESS, editedRequest);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHealthWorkerBook(), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateRequest(model.getFilteredRequestList().get(0), editedRequest);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.commitRequestBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(editRequestCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Request editedRequest \u003d new RequestBuilder(BENSON_REQUEST).withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withHealthWorker(VALID_NAME_ANDY).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand.EditRequestDescriptor descriptor \u003d new EditRequestDescriptorBuilder(editedRequest).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand editRequestCommand \u003d new EditRequestCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(EditRequestCommand.MESSAGE_EDIT_REQUEST_SUCCESS, editedRequest);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHealthWorkerBook(), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateRequest(model.getFilteredRequestList().get(0), editedRequest);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.commitRequestBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(editRequestCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_duplicateRequest_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Request editedRequest \u003d new RequestBuilder(ALICE_REQUEST).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand.EditRequestDescriptor descriptor \u003d new EditRequestDescriptorBuilder(editedRequest).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand editRequestCommand \u003d new EditRequestCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DUPLICATE_REQUEST;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHealthWorkerBook(), model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateRequest(model.getFilteredRequestList().get(0), editedRequest);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.commitRequestBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandFailure(editRequestCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Request editedRequest \u003d new RequestBuilder(BENSON_REQUEST).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand.EditRequestDescriptor descriptor \u003d new EditRequestDescriptorBuilder(editedRequest).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand editRequestCommand \u003d new EditRequestCommand(Index.fromZeroBased(100), descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandFailure(editRequestCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        final EditRequestCommand standardCommand \u003d new EditRequestCommand(INDEX_FIRST, REQ_DESC_ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditRequestCommand.EditRequestDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditRequestCommand.EditRequestDescriptor(REQ_DESC_ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditRequestCommand commandWithSameValues \u003d new EditRequestCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            copyDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new AddRequestCommand(ALICE_REQUEST)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditRequestCommand(INDEX_SECOND, REQ_DESC_ALICE)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditRequestCommand(INDEX_FIRST, REQ_DESC_BOB)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditRequestCommand editRequestCommand \u003d new EditRequestCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditRequestCommand.EditRequestDescriptor());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Request editedRequest \u003d model.getFilteredRequestList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Patient patient \u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //     new PatientBuilder(ALICE).withConditionTags(VALID_CONDITION_PHYSIO).withEmail(Email.DEFAULT_EMAIL)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //         .withConditionTags(VALID_CONDITION_PHYSIO).withNric(VALID_NRIC_ALICE).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // editedRequest \u003d new RequestBuilder(editedRequest).withPatient(patient).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditRequestCommand.MESSAGE_EDIT_REQUEST_SUCCESS,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            editedRequest);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHealthWorkerBook(), model.getRequestBook(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitRequestBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // assertCommandSuccess(editRequestCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //TODO: David - Make changes to remove Patient class"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "jing1324": 2,
      "Lookuz": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/request/FilterRequestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_REQUEST_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REQUESTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.ALICE_REQUEST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.BENSON_REQUEST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.CARL_REQUEST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.DANIEL_REQUEST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.RequestPredicateUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestNameContainsKeywordPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Contains integration tests (interaction with Model) for {@code FilterRequestCommand}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class FilterRequestCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if at least one of the prefixes contain non-empty {@code Optional} values in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * the given {@code ArgumentMultiMap}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                                              Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e firstPredicate \u003d new RequestNameContainsKeywordPredicate(\"first\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e secondPredicate \u003d new RequestNameContainsKeywordPredicate(\"second\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand findFirstRequestCommand \u003d new FilterRequestCommand(firstPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand findSecondRequestCommand \u003d new FilterRequestCommand(secondPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(findFirstRequestCommand, findFirstRequestCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand findFirstRequestCommandCopy \u003d new FilterRequestCommand(firstPredicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(findFirstRequestCommand, findFirstRequestCommandCopy);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(findFirstRequestCommand, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(findFirstRequestCommand, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(findFirstRequestCommand, findSecondRequestCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_singlePrefixSingleKeyword_oneOrderFound() throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d preparePredicate(\" n/alice\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE_REQUEST), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_singlePrefixSingleKeyword_singleRequestFound() throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d preparePredicate(\" dt/02-01-2919 14:00:00\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL_REQUEST), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_singlePrefixMultipleKeywords_singleRequestFound() throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d preparePredicate(\" p/94351253\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE_REQUEST), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multiplePrefixSingleKeywords_singleRequestFound() throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d preparePredicate(\" p/82015737 c/Palliative\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL_REQUEST), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multiplePrefixSingleKeywords_zeroRequestsFound() throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d preparePredicate(\" dt/01-01-2019 10:00:00 c/Palliative\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multiplePrefixMultipleKeywords_zeroRequestsFound() throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            preparePredicate(\" c/Cancer a/Jurong\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_singleRepeatedPrefixSingleKeywordTakeLast_multipleRequestsFound() throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d preparePredicate(\" c/Dialysis c/Physiotherapy\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE_REQUEST), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_singlePrefixSingleKeyword_multipleOrdersFound() throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d preparePredicate(\" c/Palliative\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(BENSON_REQUEST, CARL_REQUEST, DANIEL_REQUEST),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            model.getFilteredRequestList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allSupportedPrefixesSingleKeyword_oneOrderFound() throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            preparePredicate(\" n/alice p/94351253 a/Jurong West Ave 6 dt/01-01-2019 10:00:00 \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"c/Physiotherapy\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE_REQUEST), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allSupportedPrefixesSingleKeyword_zeroRequestFound() throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUESTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            preparePredicate(\" n/alice dt/01-10-2018 10:00:00 c/Chicken Pox p/1223214 a/Block 38\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand command \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRequestList(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRequestList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses {@code userInput} into a {@code FilterRequestCommand}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private Predicate\u003cRequest\u003e preparePredicate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d parseStringInput(userInput);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_NRIC, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            PREFIX_DATE, PREFIX_CONDITION)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_REQUEST_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                FilterRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return new RequestPredicateUtil().parsePredicate(argMultimap);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArgumentMultimap parseStringInput(String userInput) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return ArgumentTokenizer.tokenize(userInput, PREFIX_NAME, PREFIX_PHONE, PREFIX_NRIC,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            PREFIX_ADDRESS, PREFIX_DATE, PREFIX_CONDITION);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 181,
      "jing1324": 3,
      "Lookuz": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/request/ListRequestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains unit tests for ListRequestCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListRequestCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getHealthWorkerBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            model.getRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListRequestCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            ListRequestCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO Hui Chun - integration test once the panel displays requests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // showRequestAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // assertCommandSuccess(new ListRequestCommand, model, commandHistory, ListRequestCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // .MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "jing1324": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/request/SelectRequestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class SelectRequestCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastRequestIndex \u003d Index.fromOneBased(model.getFilteredRequestList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastRequestIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredRequestList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_REQUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO show request at index - Hui Chun"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectRequestCommand selectFirstCommand \u003d new SelectRequestCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectRequestCommand selectSecondCommand \u003d new SelectRequestCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectRequestCommand selectFirstCommandCopy \u003d new SelectRequestCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectRequestCommand} with the given {@code index},"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected request is set to the request at {@code index} in the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * filtered request list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectRequestCommand selectCommand \u003d new SelectRequestCommand(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectRequestCommand.MESSAGE_SELECT_REQUEST_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            index.getOneBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedRequest(model.getFilteredRequestList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectRequestCommand} with the given {@code index}, and checks that a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CommandException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectRequestCommand selectCommand \u003d new SelectRequestCommand(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 90,
      "jing1324": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONDITION_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONDITION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORGANIZATION_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SKILLS_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODE_HEALTHWORKER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODE_REQUEST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ANDY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BENSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BETTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_ANDY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BETTY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_ANDY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_BETTY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_ALICE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_ANDY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BENSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BETTY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILLS_DESC_ANDY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ANDY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_ANDY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_ANDY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_ANDY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.AddCommandParser.INVALID_COMMAND_USAGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.ALICE_REQUEST;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.AddHealthWorkerCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.AddRequestCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_invalidCommandMode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing command mode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ANDY + PHONE_DESC_ANDY + ORGANIZATION_DESC_ANDY + NRIC_DESC_ANDY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + SKILLS_DESC_ANDY, String.format(MESSAGE_INVALID_COMMAND_FORMAT, INVALID_COMMAND_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid command mode"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, INVALID_MODE + NAME_DESC_ANDY + PHONE_DESC_ANDY + ORGANIZATION_DESC_ANDY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + SKILLS_DESC_ANDY, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                INVALID_COMMAND_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_addHealthWorker_validFields() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker expectedWorker \u003d new HealthWorkerBuilder(ANDY).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODE_HEALTHWORKER"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + NAME_DESC_ANDY + PHONE_DESC_ANDY + ORGANIZATION_DESC_ANDY + NRIC_DESC_ANDY + SKILLS_DESC_ANDY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddHealthWorkerCommand(expectedWorker));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_HEALTHWORKER + NAME_DESC_BETTY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + NAME_DESC_ANDY + PHONE_DESC_ANDY + ORGANIZATION_DESC_ANDY + NRIC_DESC_ANDY + SKILLS_DESC_ANDY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddHealthWorkerCommand(expectedWorker));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_BETTY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ORGANIZATION_DESC_ANDY + NRIC_DESC_ANDY + SKILLS_DESC_ANDY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddHealthWorkerCommand(expectedWorker));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple NRIC - last NRIC accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ORGANIZATION_DESC_ANDY + NRIC_DESC_BETTY + NRIC_DESC_ANDY + SKILLS_DESC_ANDY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddHealthWorkerCommand(expectedWorker));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple organizations - last organization accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ORGANIZATION_DESC_BETTY + ORGANIZATION_DESC_ANDY + NRIC_DESC_ANDY + SKILLS_DESC_ANDY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddHealthWorkerCommand(expectedWorker));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_addHealthWorker_missingFields() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Missing prefix tests"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHealthWorkerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \" \" + VALID_NAME_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + VALID_PHONE_ANDY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing organization prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + VALID_ORGANIZATION_ANDY + SKILLS_DESC_ANDY, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + VALID_NRIC_ANDY + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing skills prefix"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + ORGANIZATION_DESC_ANDY, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_addHealthWorker_invalidFields() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + INVALID_NAME_DESC + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + INVALID_NRIC_DESC + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid organization"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + INVALID_ORGANIZATION_DESC + SKILLS_DESC_ANDY, Organization.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid skills"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NRIC_DESC_ANDY + ORGANIZATION_DESC_ANDY + INVALID_SKILLS_DESC, Specialisation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_addRequest_validFields() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // whitespace preamble"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_ALICE"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + ADDRESS_DESC_ALICE + CONDITION_DESC_ALICE + DATE_DESC_ALICE + NRIC_DESC_ALICE,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddRequestCommand(ALICE_REQUEST));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple names, last accepted"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_REQUEST + NAME_DESC_BENSON + NAME_DESC_ALICE + PHONE_DESC_ALICE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ADDRESS_DESC_ALICE + CONDITION_DESC_ALICE + DATE_DESC_ALICE + NRIC_DESC_ALICE,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddRequestCommand(ALICE_REQUEST));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple phones, last accepted"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_BENSON + PHONE_DESC_ALICE"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ADDRESS_DESC_ALICE + CONDITION_DESC_ALICE + DATE_DESC_ALICE + NRIC_DESC_ALICE,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddRequestCommand(ALICE_REQUEST));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple address, last accepted"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_ALICE + ADDRESS_DESC_BENSON"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ADDRESS_DESC_ALICE + CONDITION_DESC_ALICE + DATE_DESC_ALICE + NRIC_DESC_ALICE,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new AddRequestCommand(ALICE_REQUEST));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple dates, last accepted"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_ALICE"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ADDRESS_DESC_ALICE + CONDITION_DESC_ALICE + DATE_DESC_BENSON + DATE_DESC_ALICE"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + NRIC_DESC_ALICE, new AddRequestCommand(ALICE_REQUEST));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_addRequest_missingFields() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRequestCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing name"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + PHONE_DESC_ALICE + ADDRESS_DESC_ALICE + CONDITION_DESC_ALICE"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + DATE_DESC_ALICE + NRIC_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing phone"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ANDY + ADDRESS_DESC_ALICE + CONDITION_DESC_ALICE"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + DATE_DESC_ALICE + NRIC_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing address"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ANDY + PHONE_DESC_ALICE + CONDITION_DESC_ALICE"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + DATE_DESC_ALICE + NRIC_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing condition"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ANDY + PHONE_DESC_ALICE + ADDRESS_DESC_ALICE"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + DATE_DESC_ALICE + NRIC_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing date"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ANDY + PHONE_DESC_ALICE + ADDRESS_DESC_ALICE"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + CONDITION_DESC_ALICE + NRIC_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing Nric"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ANDY + PHONE_DESC_ALICE + ADDRESS_DESC_ALICE"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + CONDITION_DESC_ALICE + DATE_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_addRequest_invalidFields() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + INVALID_NAME_DESC + PHONE_DESC_ALICE + ADDRESS_DESC_ALICE"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + CONDITION_DESC_ALICE + DATE_DESC_ALICE + NRIC_DESC_ALICE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ALICE + INVALID_PHONE_DESC + ADDRESS_DESC_ALICE"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + CONDITION_DESC_ALICE + DATE_DESC_ALICE + NRIC_DESC_ALICE, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_ALICE + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + CONDITION_DESC_ALICE + DATE_DESC_ALICE + NRIC_DESC_ALICE, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid condition"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_ALICE + ADDRESS_DESC_ALICE"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + INVALID_CONDITION_DESC + DATE_DESC_ALICE + NRIC_DESC_ALICE, Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_ALICE + ADDRESS_DESC_ALICE"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + CONDITION_DESC_ALICE + INVALID_DATE_DESC + NRIC_DESC_ALICE, RequestDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + NAME_DESC_ALICE + PHONE_DESC_ALICE + ADDRESS_DESC_ALICE"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + CONDITION_DESC_ALICE + DATE_DESC_ALICE + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "Lookuz": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void checkMode() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Empty String"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(ArgumentTokenizer.checkMode(\"\"), CommandMode.INVALID);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null string"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                ArgumentTokenizer.checkMode(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // 1 -\u003e HealthWorker command mode"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ArgumentTokenizer.checkMode(\"1 n/\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.HEALTH_WORKER));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // alternative command modes for health worker"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ArgumentTokenizer.checkMode(\"healthworker\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.HEALTH_WORKER));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ArgumentTokenizer.checkMode(\"h\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.HEALTH_WORKER));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // alternative command modes for request"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ArgumentTokenizer.checkMode(\"request\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.REQUEST));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ArgumentTokenizer.checkMode(\"r\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.REQUEST));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid alternative command modes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ArgumentTokenizer.checkMode(\"health_worker\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.HEALTH_WORKER));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ArgumentTokenizer.checkMode(\"req\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.REQUEST));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // 3 -\u003e Request command mode"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ArgumentTokenizer.checkMode(\"2 n/\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.REQUEST));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Invalid number"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ArgumentTokenizer.checkMode(\"0 n/\")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.INVALID));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // actual Health Worker, expected invalid -\u003e return false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ArgumentTokenizer.checkMode(\"1 n/\")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.INVALID));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // actual Patient, expected Health Worker -\u003e return false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ArgumentTokenizer.checkMode(\"2 n/\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.HEALTH_WORKER));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Leading white space"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ArgumentTokenizer.checkMode(\"   1 n/\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .equals(CommandMode.HEALTH_WORKER));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void trimMode() throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ArgumentTokenizer.trimMode(null));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(ArrayIndexOutOfBoundsException.class, () -\u003e ArgumentTokenizer.trimMode(\"\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // single word"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(ArrayIndexOutOfBoundsException.class, () -\u003e ArgumentTokenizer.trimMode(\"first\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // two words"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(ArgumentTokenizer.trimMode(\"first second\"), \"second\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // sentence"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(ArgumentTokenizer.trimMode(\"first second third fourth\"), \"second third fourth\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "Lookuz": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandModeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class CommandModeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void checkMode_healthWorker() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"1\"), CommandMode.HEALTH_WORKER);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"healthworker\"), CommandMode.HEALTH_WORKER);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"h\"), CommandMode.HEALTH_WORKER);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void checkMode_request() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"2\"), CommandMode.REQUEST);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"request\"), CommandMode.REQUEST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"r\"), CommandMode.REQUEST);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void checkMode_invalid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"0\"), CommandMode.INVALID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"a\"), CommandMode.INVALID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertEquals(ArgumentTokenizer.checkMode(\"\"), CommandMode.INVALID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODE_HEALTHWORKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CommandMode.MODE_REQUEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.DeleteCommandParser.INVALID_COMMAND_USAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.DeleteHealthWorkerCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.DeleteRequestCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * same path through the DeletePersonCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_invalidMode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, INVALID_MODE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                INVALID_COMMAND_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_validInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_HEALTHWORKER + \" 1\", new DeleteHealthWorkerCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, \"healthworker\" + \" 1\", new DeleteHealthWorkerCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_invalidInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // non numeric"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \" a\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \" -1\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_emptyFields() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                DeleteHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_validInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, MODE_REQUEST + \" 1\", new DeleteRequestCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, \"request\" + \" 1\", new DeleteRequestCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_invalidInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // non numeric"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \" a\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \" -1\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_emptyFields() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                DeleteRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "Lookuz": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORGANIZATION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SKILLS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ANDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BETTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_ANDY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_ANDY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_ANDY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BETTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILLS_DESC_ANDY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ANDY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_ANDY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_ANDY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_ANDY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BETTY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand.EditHealthWorkerDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.EditRequestCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.EditRequestCommand.EditRequestDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.EditHealthWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.EditRequestDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String MODE_HEALTHWORKER \u003d CommandMode.MODE_HEALTHWORKER + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String MODE_REQUEST \u003d CommandMode.MODE_REQUEST + \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String INVALID_EDIT_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommandParser.INVALID_COMMAND_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String INVALID_HEALTHWORKER_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditHealthWorkerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String INVALID_REQUEST_FORMAT \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRequestCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_missingParts() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + VALID_NAME_AMY, INVALID_HEALTHWORKER_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\", EditHealthWorkerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, \"\", INVALID_EDIT_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_missingParts() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + VALID_NAME_AMY, INVALID_REQUEST_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1\", EditRequestCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, \"\", INVALID_EDIT_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_invalidPreamble() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"-5\" + NAME_DESC_AMY, INVALID_HEALTHWORKER_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"0\" + NAME_DESC_AMY, INVALID_HEALTHWORKER_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1 some random string\", INVALID_HEALTHWORKER_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1 d/ string\", INVALID_HEALTHWORKER_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                EditHealthWorkerCommand.MESSAGE_NOT_EDITED));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_invalidPreamble() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"-5\" + NAME_DESC_AMY, INVALID_REQUEST_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"0\" + NAME_DESC_AMY, INVALID_REQUEST_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1 some random string\", INVALID_REQUEST_FORMAT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1 d/ string\", INVALID_REQUEST_FORMAT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                EditRequestCommand.MESSAGE_NOT_EDITED));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_invalidValue() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid phone followed by valid name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_PHONE_DESC + NAME_DESC_ANDY,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_NAME_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_invalidValue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid phone followed by valid name"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1\" + INVALID_PHONE_DESC + NAME_DESC_ANDY,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \"1\" + INVALID_NAME_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_allFields() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String userInput \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NAME_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_allFields() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // TODO: Some fields missing for EditRequestDescriptorBuilder"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_someFields() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String userInput \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_someFields() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String userInput \u003d MODE_REQUEST + targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestDescriptor descriptor \u003d new EditRequestDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand expectedCommand \u003d new EditRequestCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_repeatedFields() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String userInput \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_repeatedFields() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String userInput \u003d MODE_REQUEST + targetIndex.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestDescriptor descriptor \u003d new EditRequestDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditRequestCommand expectedCommand \u003d new EditRequestCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String userInput \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        userInput \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseEditHealthWorker_invalidFields() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\", EditHealthWorkerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid field descriptions"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_ORGANIZATION_DESC,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Organization.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_SKILLS_DESC,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Specialisation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid input followed by invalid input"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + PHONE_DESC_ANDY + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple invalid fields, only first is captured"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \"1\" + INVALID_NAME_DESC + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseEditHealthWorker_validFields() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // some fields specified"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + NAME_DESC_ANDY + PHONE_DESC_BETTY;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_ANDY)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY).build();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // all fields specified"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + NAME_DESC_ANDY + PHONE_DESC_BETTY + NRIC_DESC_ANDY"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_ANDY)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY).withNric(VALID_NRIC_ANDY).withOrganization(VALID_ORGANIZATION_ANDY)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withSkills(Specialisation.GENERAL_PRACTICE.name(), Specialisation.PHYSIOTHERAPY.name()).build();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + NAME_DESC_ANDY;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_ANDY).build();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid phone"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + PHONE_DESC_ANDY;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder().withPhone(VALID_PHONE_ANDY).build();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + ORGANIZATION_DESC_ANDY;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder().withOrganization(VALID_ORGANIZATION_ANDY).build();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid skills"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + SKILLS_DESC_ANDY;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder().withSkills(Specialisation.GENERAL_PRACTICE.name(),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Specialisation.PHYSIOTHERAPY.name()).build();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid nric"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + NRIC_DESC_ANDY;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder().withNric(VALID_NRIC_ANDY).build();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // multiple fields specified, accepts last"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + NAME_DESC_BETTY + NAME_DESC_ANDY + PHONE_DESC_BETTY;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder().withName(VALID_NAME_ANDY)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY).build();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid field followed by valid field"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        input \u003d MODE_HEALTHWORKER + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_ANDY;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptorBuilder().withPhone(VALID_PHONE_ANDY).build();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedCommand \u003d new EditHealthWorkerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "Lookuz": 242
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_HEALTHWORKER_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_REQUEST_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODE_HEALTHWORKER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ANDY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_ANDY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILLS_DESC_ANDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ANDY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_ANDY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CommandMode.MODE_REQUEST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthStaff;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.FilterHealthWorkerCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.FilterRequestCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.RequestAddressContainsKeywordPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.RequestConditionContainsKeywordPredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.request.RequestNameContainsKeywordPredicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalHealthWorkerBook(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            getTypicalRequestBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // empty args"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                FilterCommandParser.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // health worker command mode present, empty fields"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, \"h\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                FilterHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // request command mode present, empty fields"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, \"r\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                FilterRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_emptyCommandMode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ANDY, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                FilterCommandParser.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseHealthWorkerPredicates_invalidInput() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e FilterCommandParser.parseHealthWorkerPredicates(\"\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid prefixes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e FilterCommandParser.parseHealthWorkerPredicates(\"r/John\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no prefixes"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e FilterCommandParser.parseHealthWorkerPredicates(\"John\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseRequestPredicates_invalidInput() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e FilterCommandParser.parseRequestPredicates(\"\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid prefixes"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e FilterCommandParser.parseRequestPredicates(\"r/John\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no prefixes"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e FilterCommandParser.parseRequestPredicates(\"John\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseHealthWorkerPredicates_validInput() throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e firstPredicate \u003d x -\u003e x.getName().contains(VALID_NAME_ANDY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e secondPredicate \u003d x -\u003e x.getOrganization().contains(VALID_ORGANIZATION_ANDY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e thirdPredicate \u003d x -\u003e x.getSkills().containsAll(Arrays.asList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Specialisation.GENERAL_PRACTICE, Specialisation.PHYSIOTHERAPY));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // filter by name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cPredicate\u003e predicateList \u003d Arrays.asList(firstPredicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cPredicate\u003e newPredicateList \u003d FilterCommandParser.parseHealthWorkerPredicates(NAME_DESC_ANDY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(getTypicalHealthStaff().stream().filter(FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .reducePredicates(predicateList)).collect(Collectors.toList()), getTypicalHealthStaff()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .stream().filter(FilterHealthWorkerCommand.reducePredicates(newPredicateList))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // filter by organization"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicateList \u003d Arrays.asList(secondPredicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        newPredicateList \u003d FilterCommandParser.parseHealthWorkerPredicates(ORGANIZATION_DESC_ANDY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(getTypicalHealthStaff().stream().filter(FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .reducePredicates(predicateList)).collect(Collectors.toList()), getTypicalHealthStaff()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .stream().filter(FilterHealthWorkerCommand.reducePredicates(newPredicateList))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // filter by skills"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicateList \u003d Arrays.asList(thirdPredicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        newPredicateList \u003d FilterCommandParser.parseHealthWorkerPredicates(SKILLS_DESC_ANDY);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(getTypicalHealthStaff().stream().filter(FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .reducePredicates(predicateList)).collect(Collectors.toList()), getTypicalHealthStaff()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .stream().filter(FilterHealthWorkerCommand.reducePredicates(newPredicateList))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // filter by multiple"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicateList \u003d Arrays.asList(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        newPredicateList \u003d FilterCommandParser.parseHealthWorkerPredicates(NAME_DESC_ANDY"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + ORGANIZATION_DESC_ANDY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(getTypicalHealthStaff().stream().filter(FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .reducePredicates(predicateList)).collect(Collectors.toList()), getTypicalHealthStaff()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .stream().filter(FilterHealthWorkerCommand.reducePredicates(newPredicateList))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // filter"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseRequestPredicates_validInput() throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // name predicate"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cRequest\u003e firstPredicate \u003d new RequestNameContainsKeywordPredicate(\"first\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cRequest\u003e secondPredicate \u003d FilterCommandParser.parseRequestPredicates(\" n/first\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // phone predicate"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        firstPredicate \u003d preparePredicate(\" p/90900090\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        secondPredicate \u003d FilterCommandParser.parseRequestPredicates(\" p/90900090\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // address predicate"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        firstPredicate \u003d preparePredicate(\" a/block 123\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        secondPredicate \u003d FilterCommandParser.parseRequestPredicates(\" a/block 123\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // conditions predicate"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        firstPredicate \u003d preparePredicate(\" c/AIDS\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        secondPredicate \u003d FilterCommandParser.parseRequestPredicates(\" c/AIDS\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // datetime predicate"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        firstPredicate \u003d preparePredicate(\" dt/02-01-2919 14:00:00\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        secondPredicate \u003d FilterCommandParser.parseRequestPredicates(\" dt/02-01-2919 14:00:00\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_invalidInput() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing prefixes"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \" \" + VALID_NAME_ANDY, String.format"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                (MESSAGE_INVALID_COMMAND_FORMAT, FilterHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid prefixes"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_HEALTHWORKER + \" \" + ADDRESS_DESC_AMY, String.format"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                (MESSAGE_INVALID_COMMAND_FORMAT, FilterHealthWorkerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_invalidInput() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // missing prefixes"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \" \" + VALID_NAME_ANDY, String.format"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                (MESSAGE_INVALID_COMMAND_FORMAT, FilterRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid prefixes"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, MODE_REQUEST + \" \" + ORGANIZATION_DESC_ANDY, String.format"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                (MESSAGE_INVALID_COMMAND_FORMAT, FilterRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_healthWorker_validInput() throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_HEALTHWORKER_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e firstPredicate \u003d x -\u003e x.getName().contains(VALID_NAME_ANDY);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e secondPredicate \u003d x -\u003e x.getOrganization().contains(VALID_ORGANIZATION_ANDY);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cHealthWorker\u003e thirdPredicate \u003d x -\u003e x.getSkills().containsAll(Arrays.asList("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Specialisation.GENERAL_PRACTICE, Specialisation.PHYSIOTHERAPY));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterHealthWorkerCommand command \u003d (FilterHealthWorkerCommand) parser.parse(MODE_HEALTHWORKER"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                + NAME_DESC_ANDY + ORGANIZATION_DESC_ANDY + SKILLS_DESC_ANDY);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedModel.updateFilteredHealthWorkerList(FilterHealthWorkerCommand"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .reducePredicates(Arrays.asList(firstPredicate, secondPredicate, thirdPredicate)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Arrays.asList(ANDY), model.getFilteredHealthWorkerList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_request_validInput() throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // name predicate"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Predicate\u003cRequest\u003e predicate \u003d new RequestNameContainsKeywordPredicate(\"first\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        FilterRequestCommand filterRequestCommand \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(parser.parse(MODE_REQUEST + \" n/first\"), filterRequestCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // phone predicate"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicate \u003d preparePredicate(\" p/98765432\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filterRequestCommand \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(parser.parse(MODE_REQUEST + \" p/98765432\"), filterRequestCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // address predicate"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicate \u003d new RequestAddressContainsKeywordPredicate(\"block 123\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filterRequestCommand \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(parser.parse(MODE_REQUEST + \" a/block 123\"), filterRequestCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // conditions predicate"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicate \u003d new RequestConditionContainsKeywordPredicate(\"AIDS\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filterRequestCommand \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(parser.parse(MODE_REQUEST + \" c/AIDS\"), filterRequestCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // datetime predicate"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicate \u003d preparePredicate(\" dt/02-01-2919 14:00:00\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        filterRequestCommand \u003d new FilterRequestCommand(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(parser.parse(MODE_REQUEST + \" dt/02-01-2919 14:00:00\"), filterRequestCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Parses {@code userInput} into a {@code FilterRequestCommand}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Adapted from FilterRequestCommandTest for use in testing filter request commands."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private Predicate\u003cRequest\u003e preparePredicate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d parseStringInput(userInput);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        if (!FilterCommandParser.anyPrefixPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_NRIC, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_DATE, PREFIX_CONDITION) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_REQUEST_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    FilterRequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new RequestPredicateUtil().parsePredicate(argMultimap);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Adapted from FilterRequestCommandTest for use in testing filter request commands."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private ArgumentMultimap parseStringInput(String userInput) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return ArgumentTokenizer.tokenize(userInput, PREFIX_NAME, PREFIX_PHONE, PREFIX_NRIC,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_DATE, PREFIX_CONDITION);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 2,
      "Lookuz": 269
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/HealthHubParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ANDY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_ANDY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_ANDY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_ANDY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILLS_DESC_ANDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CommandMode.MODE_HEALTHWORKER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CommandMode.MODE_REQUEST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.AddHealthWorkerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.DeleteHealthWorkerCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.ListHealthWorkerCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.AssignRequestCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.ClearRequestCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.CompleteRequestCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.DeleteRequestCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.FilterRequestCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.ListRequestCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.SelectRequestCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.EditHealthWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class HealthHubParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final HealthHubParser parser \u003d new HealthHubParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_complete() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(CompleteRequestCommand.COMMAND_WORD + \" 1\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            instanceof CompleteRequestCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker healthWorker \u003d new HealthWorkerBuilder(ANDY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        AddHealthWorkerCommand addHealthWorkerCommand \u003d (AddHealthWorkerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                AddCommand.COMMAND_WORD + \" \" + MODE_HEALTHWORKER + NAME_DESC_ANDY + PHONE_DESC_ANDY"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + ORGANIZATION_DESC_ANDY + NRIC_DESC_ANDY + SKILLS_DESC_ANDY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(new AddHealthWorkerCommand(healthWorker), addHealthWorkerCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clearRequest() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearRequestCommand.COMMAND_WORD) instanceof ClearRequestCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_assignRequest() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(AssignRequestCommand.COMMAND_WORD + \" hw/1 r/1\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            instanceof AssignRequestCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_findRequest() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(parser.parseCommand(FilterCommand.COMMAND_WORD + \" \" + MODE_REQUEST + \" n/alice\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            instanceof FilterRequestCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_selectRequest() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(SelectRequestCommand.COMMAND_WORD + \" 1\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            instanceof SelectRequestCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_deleteRequest() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(parser.parseCommand(DeleteCommand.COMMAND_WORD + \" \" + MODE_REQUEST + \" 3\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            instanceof DeleteRequestCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_listRequest() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \" + MODE_REQUEST) instanceof ListRequestCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // TODO: Test to be replaced with clearing of healthworker/request objects instead of AB4 person."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        DeleteHealthWorkerCommand command \u003d (DeleteHealthWorkerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + MODE_HEALTHWORKER + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(new DeleteHealthWorkerCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        DeleteRequestCommand secondCommand \u003d (DeleteRequestCommand) parser.parseCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + MODE_REQUEST + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(new DeleteRequestCommand(INDEX_FIRST), secondCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker healthWorker \u003d new HealthWorkerBuilder(ANDY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand.EditHealthWorkerDescriptor descriptor \u003d new EditHealthWorkerDescriptorBuilder("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                healthWorker).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        EditHealthWorkerCommand editHealthWorkerCommand \u003d (EditHealthWorkerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + MODE_HEALTHWORKER + \" \" + INDEX_FIRST.getOneBased()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + NAME_DESC_ANDY + PHONE_DESC_ANDY + ORGANIZATION_DESC_ANDY + NRIC_DESC_ANDY"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        + SKILLS_DESC_ANDY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(new EditHealthWorkerCommand(INDEX_FIRST, descriptor), editHealthWorkerCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // TODO: To replace with filter tests"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // FilterHealthWorkerCommand command \u003d (FilterHealthWorkerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //        FilterHealthWorkerCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // assertEquals(new FilterHealthWorkerCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" healthworker\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                instanceof ListHealthWorkerCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" h\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                instanceof ListHealthWorkerCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // TODO: Test to be replaced with the actual implemented undo redo command test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        //assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "jing1324": 8,
      "Lookuz": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.ListCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.ListHealthWorkerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.request.ListRequestCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_invalidCommandMode() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid command mode"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, \"invalid\", INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // no command mode"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(parser, \"\", INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parse_validCommandMode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // list health workers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, \"healthworker\", new ListHealthWorkerCommand());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // list health workers - alternative mode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, \"h\", new ListHealthWorkerCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // list requests"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, \"request\", new ListRequestCommand());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // list requests - alternative mode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseSuccess(parser, \"r\", new ListRequestCommand());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 44,
      "huichun66": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234312\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_CONDITION \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String INVALID_ORGANIZATION \u003d \"h@xx0r\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"A12345678\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String INVALID_SPECIALISATION \u003d \"physio\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String VALID_PHONE \u003d \"98765432\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_CONDITION_1 \u003d \"cancer\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_CONDITION_2 \u003d \"palliative\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String VALID_ORGANIZATION \u003d \"NUS\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String VALID_SPECIALISATION \u003d \"PHYSIOTHERAPY\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static final String VALID_SPECIALISATION_2 \u003d \"NEUROLOGY\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tests for parsing Condition from Request \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    // @author Rohan"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCondition() throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // null condition"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseCondition(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid condition"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseCondition(INVALID_CONDITION));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // same condition -\u003e returns true"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Condition expectedCondition \u003d new Condition(VALID_CONDITION_1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCondition, ParserUtil"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseCondition(VALID_CONDITION_1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // condition with whitespace trimmed -\u003e returned true"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCondition, ParserUtil.parseCondition("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                WHITESPACE + VALID_CONDITION_1 + WHITESPACE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseConditions() throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // null condition set"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseConditions(null));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // list contains invalid condition"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseConditions(Arrays.asList(VALID_CONDITION_1,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                        INVALID_CONDITION)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty condition set"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseConditions(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid condition returns conditionSet containing conditions"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cCondition\u003e expectedConditions \u003d new HashSet\u003c\u003e(Arrays.asList"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                (new Condition(VALID_CONDITION_1),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Condition(VALID_CONDITION_2)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedConditions, ParserUtil.parseConditions(Arrays"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .asList(VALID_CONDITION_1, VALID_CONDITION_2)));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tests for parsing Organisation/NRIC/Specialisation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // @author Lookaz"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseOrganization() throws ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null organization"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseOrganization(null));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid organization"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseOrganization(INVALID_ORGANIZATION));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same organization -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Organization expectedOrganization \u003d new Organization(VALID_ORGANIZATION);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedOrganization, ParserUtil.parseOrganization(VALID_ORGANIZATION));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // organization with whitespace trimmed -\u003e returned true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedOrganization, ParserUtil.parseOrganization("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                WHITESPACE + VALID_ORGANIZATION + WHITESPACE));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseNric() throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null Nric"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseNric(null));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid Nric"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseNric(INVALID_NRIC));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same Nric -\u003e returns true"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Nric with whitespace trimmed -\u003e returned true"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                WHITESPACE + VALID_NRIC + WHITESPACE));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseSpecialisation() throws ParseException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null specialisation"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseSpecialisation(null));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid specialisation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseSpecialisation(INVALID_SPECIALISATION));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same specialisation -\u003e returns true"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Specialisation expectedSpecialisation \u003d Specialisation.valueOf(VALID_SPECIALISATION);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedSpecialisation, ParserUtil"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseSpecialisation(VALID_SPECIALISATION));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // specialisation with whitespace trimmed -\u003e returned true"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedSpecialisation, ParserUtil.parseSpecialisation("
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                WHITESPACE + VALID_SPECIALISATION + WHITESPACE));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseSpecialisations() throws ParseException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null specialisation set"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseSpecialisations(null));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // list contains invalid specialisation"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseSpecialisations(Arrays.asList(VALID_SPECIALISATION,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        INVALID_SPECIALISATION)));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // empty specialisation set"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ParserUtil.parseSpecialisations(Collections.emptyList())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .getSkills().isEmpty());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid specialisation returns skills containing specialisations"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills expectedSkills \u003d new Skills(Arrays.asList"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                (Specialisation.valueOf(VALID_SPECIALISATION),"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        Specialisation.valueOf(VALID_SPECIALISATION_2)));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedSkills, ParserUtil.parseSpecialisations(Arrays"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .asList(VALID_SPECIALISATION, VALID_SPECIALISATION_2)));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 213,
      "Lookuz": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/request/RequestDatePredicateUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RequestDatePredicateUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_invalidDateGiven_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e invalidDates \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(invalidDates, RequestDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidDates \u003d Collections.singletonList(\"57-10-1908 00:00:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(invalidDates, RequestDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidDates \u003d Collections.singletonList(\"01-15-1908 00:00:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertParseFailure(invalidDates, RequestDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_unsortedList_returnSortedList() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e stringDates \u003d Arrays.asList(\"02-10-2018 10:00:00\", \"01-12-2018 12:00:00\", \"03-10-2018 10:00:00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cDate\u003e dates \u003d new RequestDatePredicateUtil().parseDateKeywords(stringDates);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(is_dates_sorted(dates));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_moreThanTwoDatesSupplied_returnListSizeOfTwo() throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e stringDates \u003d Arrays.asList(\"01-10-2018 10:00:00\", \"02-12-2018 12:00:00\", \"03-10-2018 10:00:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cDate\u003e dates \u003d new RequestDatePredicateUtil().parseDateKeywords(stringDates);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(dates.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Util to check if the dates in the list are sorted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean is_dates_sorted(List\u003cDate\u003e dates) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c dates.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            if (dates.get(i - 1).compareTo(dates.get(i)) \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} is unsuccessful and the error message"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseFailure(List\u003cString\u003e userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDate\u003e dates \u003d new RequestDatePredicateUtil().parseDateKeywords(userInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "Lookuz": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/HealthWorkerBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BETTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class HealthWorkerBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final HealthWorkerBook healthWorkerBook \u003d new HealthWorkerBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Collections.emptyList(), healthWorkerBook.getHealthWorkerList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void resetData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // reset on null object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e healthWorkerBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // replaced current list with another"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorkerBook newData \u003d getTypicalHealthWorkerBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        healthWorkerBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(healthWorkerBook, newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // reset data with list containing duplicate persons"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY).withPhone("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cHealthWorker\u003e newHealthWorkers \u003d Arrays.asList(ANDY, editedAndy);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorkerBookStub newBook \u003d new HealthWorkerBookStub(newHealthWorkers);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e healthWorkerBook.resetData(newBook));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void addHealthWorker() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e healthWorkerBook.addHealthWorker(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // duplicate HealthWorker"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        healthWorkerBook.addHealthWorker(ANDY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e healthWorkerBook.addHealthWorker(ANDY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same identity fields -\u003e duplicate"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY).withPhone("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e healthWorkerBook.addHealthWorker(editedAndy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cHealthWorker\u003e newData \u003d Arrays.asList(ANDY, BETTY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorkerBookStub newBook \u003d new HealthWorkerBookStub(newData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        healthWorkerBook.addHealthWorker(BETTY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(newBook.getHealthWorkerList(), healthWorkerBook.getHealthWorkerList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void removeHealthWorker() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e healthWorkerBook.removeHealthWorker(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // non existent health worker"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(PersonNotFoundException.class, () -\u003e healthWorkerBook.removeHealthWorker(ANDY));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        healthWorkerBook.setHealthWorkers(Arrays.asList(ANDY, BETTY));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorkerBookStub newData \u003d new HealthWorkerBookStub(Arrays.asList(ANDY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        healthWorkerBook.removeHealthWorker(BETTY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(newData.getHealthWorkerList(), healthWorkerBook.getHealthWorkerList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setHealthWorker() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        healthWorkerBook.addHealthWorker(ANDY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e healthWorkerBook.setHealthWorker(null, ANDY));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e healthWorkerBook.setHealthWorker(ANDY, null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // non existent object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(PersonNotFoundException.class, () -\u003e healthWorkerBook.setHealthWorker(BETTY, ANDY));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        healthWorkerBook.setHealthWorker(ANDY, BETTY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Arrays.asList(BETTY), healthWorkerBook.getHealthWorkerList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void hasHealthWorker() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e healthWorkerBook.hasHealthWorker(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // health worker not in book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(healthWorkerBook.hasHealthWorker(ANDY));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // health worker in book"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        healthWorkerBook.addHealthWorker(ANDY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(healthWorkerBook.hasHealthWorker(ANDY));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // health worker with different fields, same identity -\u003e return true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY).withPhone("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(healthWorkerBook.hasHealthWorker(editedAndy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void getHealthWorkerList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // modify immutable list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e healthWorkerBook.getHealthWorkerList()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .remove(0));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // TODO: add tests for listeners."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private static class HealthWorkerBookStub implements ReadOnlyHealthWorkerBook {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        private final ObservableList\u003cHealthWorker\u003e healthWorkers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public HealthWorkerBookStub(Collection\u003cHealthWorker\u003e healthWorkers) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            this.healthWorkers.setAll(healthWorkers);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public ObservableList\u003cHealthWorker\u003e getHealthWorkerList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            return this.healthWorkers;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void addListener(InvalidationListener invalidationListener) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        public void removeListener(InvalidationListener invalidationListener) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//TODO: TO be rewritten to include replace AddressBook with RequestBook and HealthWorkerBook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalRequests.ALICE_REQUEST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.HealthWorkerBookBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.RequestBookBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class ModelManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addPerson(BETTY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(Arrays.asList(ALICE, BETTY), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setSelectedPerson(BETTY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.deletePerson(BETTY);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person updatedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    // Added tests for added supporting operations on UniqueHealthWorkerList"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    // @author: Lookaz"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    // TODO: Update tests accordingly after adding further operations supporting HealthWorker"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void addHealthWorker() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // add null health worker"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .addHealthWorker(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // health worker already in addressbook"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addHealthWorker(ANDY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                modelManager.addHealthWorker(ANDY));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void hasHealthWorker() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // null health worker"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .hasHealthWorker(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // health worker does not exist -\u003e return false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(modelManager.hasHealthWorker(ANDY));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // health worker exists -\u003e return true"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addHealthWorker(ANDY);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertTrue(modelManager.hasHealthWorker(ANDY));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void deleteHealthWorker() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // null health worker"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .deleteHealthWorker(null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // delete non existent person"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(PersonNotFoundException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .deleteHealthWorker(ANDY));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void setHealthWorker() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // setting null health worker"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addHealthWorker(ANDY);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .setHealthWorker(ANDY, null));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .setHealthWorker(null, ANDY));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // setting non existent health worker"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(PersonNotFoundException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .setHealthWorker(BETTY, ANDY));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // setting to duplicate health worker"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.addHealthWorker(BETTY);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Assert.assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                modelManager.setHealthWorker(BETTY, ANDY));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        HealthWorkerBook healthWorkerBook \u003d new HealthWorkerBookBuilder().withHealthWorker(ANDY)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .withHealthWorker(BETTY).build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        RequestBook requestBook \u003d new RequestBookBuilder().withRequest(ALICE_REQUEST).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, healthWorkerBook, requestBook, userPrefs);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, healthWorkerBook, requestBook, userPrefs);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, healthWorkerBook,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            requestBook, userPrefs)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, healthWorkerBook,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            requestBook, userPrefs)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, healthWorkerBook,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            requestBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 263
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedHealthWorkerBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.CARLIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.testutil.HealthWorkerBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class VersionedHealthWorkerBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final ReadOnlyHealthWorkerBook healthWorkerBookWithAndy \u003d new HealthWorkerBookBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            .withHealthWorker(ANDY).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final ReadOnlyHealthWorkerBook healthWorkerBookWithBetty \u003d new HealthWorkerBookBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            .withHealthWorker(BETTY).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final ReadOnlyHealthWorkerBook healthWorkerBookWithCarlie \u003d new HealthWorkerBookBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            .withHealthWorker(CARLIE).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private final ReadOnlyHealthWorkerBook emptyHealthWorkerBook \u003d new HealthWorkerBookBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // no states"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        VersionedHealthWorkerBook versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertHealthWorkerBookListStatus(versionedHealthWorkerBook, Collections.singletonList(emptyHealthWorkerBook),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                emptyHealthWorkerBook, Collections.emptyList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, all saved"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook, healthWorkerBookWithAndy,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook.commit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertHealthWorkerBookListStatus(versionedHealthWorkerBook,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                Arrays.asList(emptyHealthWorkerBook, healthWorkerBookWithAndy, healthWorkerBookWithBetty),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithBetty, Collections.emptyList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, current state pointer not at the end of list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook, healthWorkerBookWithAndy,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook.commit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertHealthWorkerBookListStatus(versionedHealthWorkerBook,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                Arrays.asList(emptyHealthWorkerBook),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                emptyHealthWorkerBook, Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void canUndo() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        VersionedHealthWorkerBook versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertTrue(versionedHealthWorkerBook.canUndo());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, current pointer in middle of state -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertTrue(versionedHealthWorkerBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // single state -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.canUndo());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, starting state -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.canUndo());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void canRedo() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // state pointer not at end -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        VersionedHealthWorkerBook versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertTrue(versionedHealthWorkerBook.canRedo());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // state pointer at beginning of list -\u003e return true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertTrue(versionedHealthWorkerBook.canRedo());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // state pointer at end of list -\u003e return false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.canRedo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // single state -\u003e return false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.canRedo());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, end of state list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        VersionedHealthWorkerBook versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook.undo();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertHealthWorkerBookListStatus(versionedHealthWorkerBook, Collections.singletonList(emptyHealthWorkerBook),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, Collections.singletonList(healthWorkerBookWithBetty));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, middle of state list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook.undo();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertHealthWorkerBookListStatus(versionedHealthWorkerBook, Collections.emptyList(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                emptyHealthWorkerBook, Arrays.asList(healthWorkerBookWithAndy,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                        healthWorkerBookWithBetty));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // single state"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Assert.assertThrows(VersionedBook.NoUndoableStateException.class, versionedHealthWorkerBook::undo);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, start of state list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Assert.assertThrows(VersionedBook.NoUndoableStateException.class, versionedHealthWorkerBook::undo);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, current pointer not at end of state list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        VersionedHealthWorkerBook versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook.redo();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertHealthWorkerBookListStatus(versionedHealthWorkerBook, Arrays.asList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy), healthWorkerBookWithBetty, Collections.emptyList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, current pointer at start of list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHealthWorkerBook, 2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook.redo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertHealthWorkerBookListStatus(versionedHealthWorkerBook, Collections.singletonList(emptyHealthWorkerBook),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, Collections.singletonList(healthWorkerBookWithBetty));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // single state"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Assert.assertThrows(VersionedBook.NoRedoableStateException.class, versionedHealthWorkerBook::redo);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // multiple states, current pointer at end of state list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy, healthWorkerBookWithBetty);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Assert.assertThrows(VersionedBook.NoRedoableStateException.class, versionedHealthWorkerBook::redo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        VersionedHealthWorkerBook versionedHealthWorkerBook \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                healthWorkerBookWithAndy);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertTrue(versionedHealthWorkerBook.equals(versionedHealthWorkerBook));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        VersionedHealthWorkerBook copy \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook, healthWorkerBookWithAndy);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertTrue(versionedHealthWorkerBook.equals(copy));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // null value -\u003e return false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.equals(1));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // different states -\u003e return false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        copy \u003d prepareHealthWorkerBookList(healthWorkerBookWithBetty, healthWorkerBookWithCarlie);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.equals(copy));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        copy \u003d prepareHealthWorkerBookList(emptyHealthWorkerBook, healthWorkerBookWithAndy);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        shiftCurrentStatePointerLeftwards(copy, 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.equals(copy));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Creates and returns a {@code VersionedHealthWorkerBook} with the {@code healthWorkerBookStates} added into it,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * and the {@code VersionedHealthWorkerBook#currStatePointer} at the end of list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private VersionedHealthWorkerBook prepareHealthWorkerBookList(ReadOnlyHealthWorkerBook... healthWorkerBookStates) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(healthWorkerBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        VersionedHealthWorkerBook versionedHealthWorkerBook \u003d new VersionedHealthWorkerBook(healthWorkerBookStates[0]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (int i \u003d 1; i \u003c healthWorkerBookStates.length; i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedHealthWorkerBook.resetData(healthWorkerBookStates[i]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedHealthWorkerBook.commit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return versionedHealthWorkerBook;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Asserts that {@code versionedHealthWorkerBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * states before {@code versionedHealthWorkerBook#currentStatePointer}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * and states after {@code versionedHealthWorkerBook#currentStatePointer}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private void assertHealthWorkerBookListStatus(VersionedHealthWorkerBook versionedHealthWorkerBook,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                                             List\u003cReadOnlyHealthWorkerBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                                             ReadOnlyHealthWorkerBook expectedCurrentState,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                                             List\u003cReadOnlyHealthWorkerBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertEquals(new HealthWorkerBook(versionedHealthWorkerBook), expectedCurrentState);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        while (versionedHealthWorkerBook.canUndo()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedHealthWorkerBook.undo();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (ReadOnlyHealthWorkerBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            assertEquals(expectedAddressBook, new HealthWorkerBook(versionedHealthWorkerBook));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedHealthWorkerBook.redo();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (ReadOnlyHealthWorkerBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedHealthWorkerBook.redo();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            assertEquals(expectedAddressBook, new HealthWorkerBook(versionedHealthWorkerBook));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(versionedHealthWorkerBook.canRedo());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedHealthWorkerBook.undo());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static void shiftCurrentStatePointerLeftwards(VersionedBook versionedBook, int count) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            versionedBook.undo();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 250
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"81818378\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"81818378\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "Lookuz": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Name name \u003d new Name(\"Samantha\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(name.contains(\"Samantha\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // substring"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(name.contains(\"Sam\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // case-insensitive substring"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(name.contains(\"sam\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // non substring"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(name.contains(\"Sandy\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "Lookuz": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NricTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Nric"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .isValidNric(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Nric.isValidNric(\"12345678\")); // only numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S123456Z\")); // only 6 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S1234567\")); // No ending alphabet"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Nric.isValidNric(\"1234567Z\")); // No S/T prefix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S12345678Z\")); // Longer than 9 characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Nric.isValidNric(\"A1234567Z\")); // Prefix not S/T"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S9876543Z\")); // NRIC starting with S"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T1234567A\")); // NRIC starting with T"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "Lookuz": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"984617284\")); // more than 8 digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"61234526\")); // Starting with 6"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"99177712\")); // Starting with 8"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"81812288\")); // Starting with 9"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "Lookuz": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BETTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BETTY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BETTY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 179,
      "Lookuz": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/healthworker/HealthWorkerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.person.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BETTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BETTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_BETTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BETTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class HealthWorkerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void isSameHealthWorker() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ANDY.isSameHealthWorker(ANDY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.isSameHealthWorker(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ANDY.isSameHealthWorker(editedAndy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different NRIC -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withNric(VALID_NRIC_BETTY)).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.isSameHealthWorker(editedAndy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withName(VALID_NAME_BETTY)).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.isSameHealthWorker(editedAndy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same name, same phone, different organization -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAndy \u003d new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withOrganization(VALID_ORGANIZATION_BETTY).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ANDY.isSameHealthWorker(editedAndy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d new HealthWorkerBuilder(ANDY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ANDY.equals(editedAndy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(ANDY.equals(ANDY));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.equals(BETTY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withName(VALID_NAME_BETTY)).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.equals(editedAndy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different NRIC -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withNric(VALID_NRIC_BETTY)).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.equals(editedAndy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.equals(editedAndy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different skills -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAndy \u003d new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withSkills(BETTY.getSkills()).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.equals(editedAndy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different organization -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedAndy \u003d new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withOrganization(VALID_ORGANIZATION_BETTY).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(ANDY.equals(editedAndy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void hasSkill() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills skills \u003d new Skills(new HashSet\u003c\u003e(Arrays.asList(Specialisation.GENERAL_PRACTICE, Specialisation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .HAEMATOLOGY, Specialisation.GYNAECOLOGY)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker healthWorker \u003d new HealthWorkerBuilder().withSkills(skills).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(healthWorker.hasSkill(Specialisation.GENERAL_PRACTICE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(healthWorker.hasSkill(Specialisation.HAEMATOLOGY));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(healthWorker.hasSkill(Specialisation.ORTHOPAEDIC));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(healthWorker.hasSkill(Specialisation.PHYSIOTHERAPY));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/healthworker/OrganizationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.person.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class OrganizationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Organization(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void constructor_invalidOrgName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        String invalidOrgName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidOrgName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void isValidOrgName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null orgname"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Organization"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .isValidOrgName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid organization names"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Organization.isValidOrgName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Organization.isValidOrgName(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Organization.isValidOrgName(\"hello-world\")); // Non space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Organization.isValidOrgName(\"hello world\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Organization.isValidOrgName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Organization.isValidOrgName(\"4tune cookie\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Organization.isValidOrgName(\"Capital City\")); //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // with capital letters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Organization.isValidOrgName(\"Za Warudo Over Heaven 2\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // long names"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Organization organization \u003d new Organization(\"National University of Singapore\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same organization name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(organization.contains(\"National University of Singapore\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // substring of orgName"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(organization.contains(\"National\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // case insensitive substring"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(organization.contains(\"national\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // non-substring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(organization.contains(\"NTU\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/healthworker/UniqueHealthWorkerListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.person.healthworker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BETTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * @author Lookaz"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class UniqueHealthWorkerListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private final UniqueHealthWorkerList uniqueHealthWorkerList \u003d new UniqueHealthWorkerList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null health worker"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.contains(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // health worker not in list -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(uniqueHealthWorkerList.contains(ANDY));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // health worker in list -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.add(ANDY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(uniqueHealthWorkerList.contains(ANDY));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Identity fields same -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(uniqueHealthWorkerList.contains(editedAndy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null health worker"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // duplicate health worker"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.add(ANDY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.add(ANDY));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // same identity fields -\u003e duplicate"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.add(editedAndy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setHealthWorker() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // null health worker"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.setHealthWorker(null, ANDY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.setHealthWorker(ANDY, null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // target health worker not in list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(PersonNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.setHealthWorker(ANDY, ANDY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // edit same person -\u003e same list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.add(ANDY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.setHealthWorker(ANDY, ANDY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        UniqueHealthWorkerList expectedUniqueHealthWorkerList \u003d new UniqueHealthWorkerList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedUniqueHealthWorkerList.add(ANDY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedUniqueHealthWorkerList, uniqueHealthWorkerList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // edited health worker same identity -\u003e same list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.setHealthWorker(ANDY, editedAndy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedUniqueHealthWorkerList \u003d new UniqueHealthWorkerList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedUniqueHealthWorkerList.add(editedAndy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedUniqueHealthWorkerList, uniqueHealthWorkerList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // edited health worker to different identity"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.setHealthWorker(editedAndy, BETTY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedUniqueHealthWorkerList \u003d new UniqueHealthWorkerList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedUniqueHealthWorkerList.add(BETTY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedUniqueHealthWorkerList, uniqueHealthWorkerList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // adding duplicate health workers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.add(ANDY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.setHealthWorker(ANDY, BETTY));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void remove() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // remove null health worker"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // remove health worker that is not in list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(PersonNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.remove(ANDY));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // remove existing heath worker"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.add(ANDY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.remove(ANDY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        UniqueHealthWorkerList expectedUniqueHealthWorkerList \u003d new UniqueHealthWorkerList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedUniqueHealthWorkerList, uniqueHealthWorkerList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // different fields -\u003e object not in list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorker editedAndy \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder(ANDY)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .withPhone(VALID_PHONE_BETTY)).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(PersonNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.remove(editedAndy));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void setPersons() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // replace with null"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.setHealthWorkers((UniqueHealthWorkerList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.setHealthWorkers((List\u003cHealthWorker\u003e) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // replace current list with given"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.add(ANDY);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        UniqueHealthWorkerList expectedUniqueHealthWorkerList \u003d new UniqueHealthWorkerList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        expectedUniqueHealthWorkerList.add(BETTY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.setHealthWorkers(expectedUniqueHealthWorkerList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedUniqueHealthWorkerList, uniqueHealthWorkerList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        uniqueHealthWorkerList.setHealthWorkers(Collections.singletonList(BETTY));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(expectedUniqueHealthWorkerList, uniqueHealthWorkerList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // replacing with list with duplicates"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cHealthWorker\u003e listWithDuplicatePersons \u003d Arrays.asList(ANDY, ANDY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.setHealthWorkers(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // attempt to modify list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                uniqueHealthWorkerList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/model/request/RequestTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.ALICE_REQUEST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.BENSON_REQUEST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.RequestBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class RequestTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void assignHealthWorker_statusChange_toPending() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Request request \u003d new RequestBuilder(ALICE_REQUEST).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        request.setHealthStaff(ANDY.getName().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(request.getRequestStatus(), new RequestStatus(\"ONGOING\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        request \u003d new RequestBuilder(ALICE_REQUEST).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        request.setHealthStaff(\"Zach\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(request.getRequestStatus(), new RequestStatus(\"ONGOING\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_default_constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Request aliceRequest \u003d new Request(ALICE_REQUEST.getName(), ALICE_REQUEST.getNric(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getPhone(), ALICE_REQUEST.getAddress(), ALICE_REQUEST.getRequestDate(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getConditions());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(aliceRequest.isOngoingStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(aliceRequest.isSameRequest(ALICE_REQUEST));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aliceRequest, ALICE_REQUEST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        aliceRequest.setHealthStaff(\"Bobby\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(aliceRequest.isSameRequest(ALICE_REQUEST));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aliceRequest, ALICE_REQUEST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSameRequest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE_REQUEST.isSameRequest(ALICE_REQUEST));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.isSameRequest(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.isSameRequest(BENSON_REQUEST));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Request request \u003d new RequestBuilder(ALICE_REQUEST).withDate(\"30-10-2019 10:10:10\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(request.isSameRequest(ALICE_REQUEST));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // everything same, but conditions different -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        //Request editedAlice \u003d new RequestBuilder(ALICE_REQUEST)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // .withConditions(BENSON_REQUEST.getConditions()).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        //assertFalse(ALICE_REQUEST.isSameRequest(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // everything same, different nric -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Request editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withNric(\"S1234567G\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.isSameRequest(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different date, everything else same -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withDate(\"03-10-2018 10:00:01\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.isSameRequest(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // only nric and condition same, everything else different -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            new RequestBuilder(BENSON_REQUEST).withNric(ALICE_REQUEST.getNric().toString())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .withConditions(ALICE_REQUEST.getConditions()).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(editedAlice.isSameRequest(ALICE_REQUEST));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same everything, different health staff -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            .withHealthStaff(BETTY).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE_REQUEST.isSameRequest(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE_REQUEST, ALICE_REQUEST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE_REQUEST.equals(ALICE_REQUEST));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(10));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(BENSON_REQUEST));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Request editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withName(VALID_NAME_BENSON).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withNric(\"S9671238G\").build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(editedAlice));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withPhone(\"91723812\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(editedAlice));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withAddress(\"Blk 472a KSD street\").build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(editedAlice));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withDate(\"01-01-2019 10:00:23\").build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(editedAlice));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different health staff -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withHealthStaff(BETTY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(editedAlice));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different treatment conditions -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withConditions(new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                new Condition(\"Cancer\")))).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(editedAlice));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different isComplete status -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new RequestBuilder(ALICE_REQUEST).withStatus(\"COMPLETED\").build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE_REQUEST.equals(editedAlice));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "Lookuz": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/SkillsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class SkillsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //initialization"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills skillsTest \u003d new Skills();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.GENERAL_PRACTICE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.ANAESTHESIOLOGY);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.NEUROLOGY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.GYNAECOLOGY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.ORTHOPAEDIC);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Specialisation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.contains(Specialisation.CARDIOLOGY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.contains(Specialisation.HAEMATOLOGY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.contains(Specialisation.OCCUPATIONAL_THERAPY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.contains(Specialisation.GENERAL_PRACTICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.contains(Specialisation.ANAESTHESIOLOGY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.contains(Specialisation.GYNAECOLOGY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.contains(\"CARDIOLOGY\")); // does not contain"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.contains(\"general_practice\")); // lowercase"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.contains(\"\")); // empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.contains(\"General_Practice\")); // Not all caps"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.contains(\"GENERAL_PRACTICE\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.contains(\"NEUROLOGY\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.contains(\"ORTHOPAEDIC\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void addSpecialisation() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Initialization"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills skillsTest \u003d new Skills();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.GENERAL_PRACTICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.getSkills().equals(new HashSet\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .asList(Specialisation.GENERAL_PRACTICE))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.ANAESTHESIOLOGY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.NEUROLOGY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.getSkills().equals(new HashSet\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .asList(Specialisation.GENERAL_PRACTICE, Specialisation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        .ANAESTHESIOLOGY, Specialisation.NEUROLOGY))));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.GYNAECOLOGY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.ORTHOPAEDIC);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.getSkills().equals(new HashSet\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .asList(Specialisation.GENERAL_PRACTICE, Specialisation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                        .ANAESTHESIOLOGY, Specialisation.NEUROLOGY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                Specialisation.GYNAECOLOGY, Specialisation.ORTHOPAEDIC))));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //initialization"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills skillsTest \u003d new Skills();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.GENERAL_PRACTICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.ANAESTHESIOLOGY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.NEUROLOGY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.GYNAECOLOGY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.ORTHOPAEDIC);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Different types -\u003e return false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.equals(\"\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Same set of skills -\u003e return true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills editedSkillsTest \u003d new Skills(skillsTest);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.equals(editedSkillsTest));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Different set of skills -\u003e return false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        editedSkillsTest.addSpecialisation(Specialisation.CARDIOLOGY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.equals(editedSkillsTest));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void containsAll() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //initialization"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills skillsTest \u003d new Skills();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.NEUROLOGY);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.GYNAECOLOGY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.ORTHOPAEDIC);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // contains one"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills otherSkills \u003d new Skills();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        otherSkills.addSpecialisation(Specialisation.GYNAECOLOGY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.containsAll(otherSkills.getSkills()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // contains two"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        otherSkills.addSpecialisation(Specialisation.NEUROLOGY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.containsAll(otherSkills.getSkills()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // contains three"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        otherSkills.addSpecialisation(Specialisation.ORTHOPAEDIC);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(skillsTest.containsAll(otherSkills.getSkills()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // bigger set"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        otherSkills.addSpecialisation(Specialisation.CARDIOLOGY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.containsAll(otherSkills.getSkills()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // non subset"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        skillsTest.addSpecialisation(Specialisation.OCCUPATIONAL_THERAPY);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(skillsTest.containsAll(otherSkills.getSkills()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/SpecialisationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class SpecialisationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void isValidSpecialisation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // invalid specialisation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Specialisation.isValidSpecialisation(\"\")); // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Specialisation.isValidSpecialisation(\" \")); // spaces only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Specialisation.isValidSpecialisation(\"Hello\")); // Non specialisation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Specialisation.isValidSpecialisation(\"general_practice\")); // Lowercase"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertFalse(Specialisation.isValidSpecialisation(\"General_Practice\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // Capitalised only first character"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // valid specialisation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"GENERAL_PRACTICE\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"CARDIOLOGY\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"ENDOCRINOLOGY\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"NEUROLOGY\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"ORTHOPAEDIC\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"PAEDIATRIC\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"GYNAECOLOGY\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"UROLOGY\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"PATHOLOGY\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"HAEMATOLOGY\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"PHYSIOTHERAPY\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"OCCUPATIONAL_THERAPY\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertTrue(Specialisation.isValidSpecialisation(\"ANAESTHESIOLOGY\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void parseString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //null specialisation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Specialisation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseString(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //empty string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Specialisation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseString(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //invalid specialisation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Specialisation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .parseString(\"not_a_specialisation\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public void getSpecialisation() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        //null substring"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Specialisation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                .getSpecialisation(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // empty substring"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Optional.empty(), Specialisation.getSpecialisation(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // full string"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Specialisation.PHYSIOTHERAPY, Specialisation.getSpecialisation(\"PHYSIOTHERAPY\").get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // case insensitive full string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Specialisation.PHYSIOTHERAPY, Specialisation.getSpecialisation(\"physiotherapy\").get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        // case insensitive substring"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        assertEquals(Specialisation.PHYSIOTHERAPY, Specialisation.getSpecialisation(\"physio\").get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedHealthWorkerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.BETTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedHealthWorkerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ORGANISATION \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BETTY.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NRIC \u003d BETTY.getNric().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BETTY.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ORGANISATION \u003d BETTY.getOrganization().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_SKILLS \u003d BETTY.getSkills().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validHealthWorkerDetails_returnsHealthWorker() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(BETTY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BETTY, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new JsonAdaptedHealthWorker(INVALID_NAME, VALID_PHONE, VALID_NRIC, VALID_ORGANISATION, VALID_SKILLS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(null, VALID_PHONE, VALID_NRIC,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_ORGANISATION, VALID_SKILLS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(VALID_NAME, INVALID_PHONE, VALID_NRIC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_ORGANISATION, VALID_SKILLS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(VALID_NAME, null, VALID_NRIC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_ORGANISATION, VALID_SKILLS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(VALID_NAME, VALID_PHONE, INVALID_NRIC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_ORGANISATION, VALID_SKILLS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_ORGANISATION, VALID_SKILLS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidOrganisation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(VALID_NAME, VALID_PHONE, VALID_NRIC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                INVALID_ORGANISATION, VALID_SKILLS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullOrganisation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(VALID_NAME, VALID_PHONE, VALID_NRIC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                null, VALID_SKILLS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Organization.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullSkills_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedHealthWorker person \u003d new JsonAdaptedHealthWorker(VALID_NAME, VALID_PHONE, VALID_NRIC,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                VALID_ORGANISATION, null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Skills.class.getSimpleName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "Lookuz": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S9678945P\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_NRIC);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_NRIC);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_NRIC);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_NRIC);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    // TODO: add tests for Nric."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "jing1324": 1,
      "Lookuz": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRequestTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.ALICE_REQUEST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//import static seedu.address.testutil.TypicalRequests.BENSON_REQUEST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedRequestTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"2193213\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_DATE \u003d \"1st Jan\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"Busy\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: methods need reviewing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validRequestDetails_returnsRequest() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedRequest request \u003d new JsonAdaptedRequest(BENSON_REQUEST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Request req \u003d request.toModelType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(req, BENSON_REQUEST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validRequestStrings_returnsRequest() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedRequest request \u003d new JsonAdaptedRequest(ALICE_REQUEST.getName().fullName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getNric().toString(), ALICE_REQUEST.getPhone().value,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getAddress().value,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getRequestDate().toString(), ALICE_REQUEST.getConditions().toString(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new RequestStatus(\"PENDING\").toString(), ALICE_REQUEST.getHealthStaff());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Request req \u003d request.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(req, ALICE_REQUEST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedRequest request \u003d new JsonAdaptedRequest(INVALID_NAME,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getNric().toString(), ALICE_REQUEST.getPhone().value,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getAddress().value,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getRequestDate().toString(), ALICE_REQUEST.getConditions().toString(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new RequestStatus(\"PENDING\").toString(), ALICE_REQUEST.getHealthStaff());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, Name.MESSAGE_CONSTRAINTS, request::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedRequest request \u003d new JsonAdaptedRequest(ALICE_REQUEST.getName().toString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            INVALID_NRIC, ALICE_REQUEST.getPhone().value,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getAddress().value,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getRequestDate().toString(), ALICE_REQUEST.getConditions().toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            new RequestStatus(\"PENDING\").toString(), ALICE_REQUEST.getHealthStaff());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, Nric.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            request::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedRequest request \u003d new JsonAdaptedRequest(ALICE_REQUEST.getName().toString(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            INVALID_NRIC, INVALID_PHONE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getAddress().value,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getRequestDate().toString(), ALICE_REQUEST.getConditions().toString(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            new RequestStatus(\"PENDING\").toString(), ALICE_REQUEST.getHealthStaff());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, Phone.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            request::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedRequest request \u003d new JsonAdaptedRequest(ALICE_REQUEST.getName().toString(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            ALICE_REQUEST.getNric().toString(), ALICE_REQUEST.getPhone().value,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            INVALID_ADDRESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getRequestDate().toString(), ALICE_REQUEST.getConditions().toString(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            new RequestStatus(\"PENDING\").toString(), ALICE_REQUEST.getHealthStaff());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, Address.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            request::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedRequest request \u003d new JsonAdaptedRequest(ALICE_REQUEST.getName().toString(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            ALICE_REQUEST.getNric().toString(), ALICE_REQUEST.getPhone().value,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getAddress().value,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            INVALID_DATE, ALICE_REQUEST.getConditions().toString(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new RequestStatus(\"PENDING\").toString(), ALICE_REQUEST.getHealthStaff());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, RequestDate.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            request::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedRequest request \u003d new JsonAdaptedRequest(ALICE_REQUEST.getName().toString(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            ALICE_REQUEST.getNric().toString(), ALICE_REQUEST.getPhone().value,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getAddress().value,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE_REQUEST.getRequestDate().toString(), ALICE_REQUEST.getConditions().toString(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            INVALID_STATUS, ALICE_REQUEST.getHealthStaff());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, RequestStatus.MESSAGE_STATUS_CONSTRAINTS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            request::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "Lookuz": 5,
      "huichun66": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonHealthWorkerBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.ANDY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.HOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.IVAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthWorkerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class JsonHealthWorkerBookStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonHealthWorkerBookStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void readHealthWorkerBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readHealthWorkerBook(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private java.util.Optional\u003cReadOnlyHealthWorkerBook\u003e readHealthWorkerBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return new JsonHealthWorkerBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                .readHealthWorkerBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(readHealthWorkerBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readHealthWorkerBook(\"notJsonFormatHealthWorkerBook.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void readHealthWorkerBook_invalidPersonHealthWorkerBook_throwDataConversionException()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readHealthWorkerBook(\"invalidPersonHealthWorkerBook.json\"); //TODO regenerate the json files"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void readHealthWorkerBook_invalidAndValidPersonHealthWorkerBook_throwDataConversionException()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readHealthWorkerBook(\"invalidAndValidPersonHealthWorkerBook.json\"); //TODO regenerate the json files"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void readAndSaveHealthWorkerBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempHealthWorkerBook.json\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorkerBook original \u003d getTypicalHealthWorkerBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        JsonHealthWorkerBookStorage jsonHealthWorkerBookStorage \u003d new JsonHealthWorkerBookStorage(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        jsonHealthWorkerBookStorage.saveHealthWorkerBook(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        ReadOnlyHealthWorkerBook readBack \u003d jsonHealthWorkerBookStorage.readHealthWorkerBook(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertEquals(original, new HealthWorkerBook(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        original.addHealthWorker(HOOK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        original.removeHealthWorker(ANDY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        jsonHealthWorkerBookStorage.saveHealthWorkerBook(original, filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readBack \u003d jsonHealthWorkerBookStorage.readHealthWorkerBook(filePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertEquals(original, new HealthWorkerBook(readBack));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        original.addHealthWorker(IVAN);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        jsonHealthWorkerBookStorage.saveHealthWorkerBook(original); // file path not specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readBack \u003d jsonHealthWorkerBookStorage.readHealthWorkerBook().get(); // file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertEquals(original, new HealthWorkerBook(readBack));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void saveHealthWorkerBook_nullHealthWorkerBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        saveHealthWorkerBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Saves {@code healthWorkerBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private void saveHealthWorkerBook(ReadOnlyHealthWorkerBook healthWorkerBook, String filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            new JsonHealthWorkerBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                    .saveHealthWorkerBook(healthWorkerBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void saveHealthWorkerBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        saveHealthWorkerBook(new HealthWorkerBook(), null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonRequestBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class JsonRequestBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRequestBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void readRequestBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readRequestBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRequestBook\u003e readRequestBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return new JsonRequestBookStorage(Paths.get(filePath)).readRequestBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertFalse(readRequestBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readRequestBook(\"notJsonFormatRequestBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void readRequestBook_invalidPersonRequestBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readRequestBook(\"invalidRequestRequestBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void readRequestBook_invalidAndValidPersonRequestBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        readRequestBook(\"invalidAndValidRequestRequestBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: the following method needs reviewing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void readAndSaveRequestBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempRequestBook.json\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        RequestBook original \u003d getTypicalRequestBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        JsonRequestBookStorage jsonRequestBookStorage \u003d new JsonRequestBookStorage(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        jsonRequestBookStorage.saveRequestBook(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        ReadOnlyRequestBook readBack \u003d jsonRequestBookStorage.readRequestBook(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(original.areRequestsSame(new RequestBook(readBack)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void saveRequestBook_nullRequestBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        saveRequestBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Saves {@code requestBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private void saveRequestBook(ReadOnlyRequestBook requestBook, String filePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            new JsonRequestBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                    .saveRequestBook(requestBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void saveRequestBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        saveRequestBook(new RequestBook(), null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "jing1324": 108,
      "Lookuz": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableHealthWorkerBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.testutil.TypicalHealthWorkers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "public class JsonSerializableHealthWorkerBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            \"test\", \"data\", \"JsonSerializableHealthWorkerBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            \"typicalhealthworkersbook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            \"invalidhealthworkerbook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            \"duplicatehealthworkerbook.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void toModelType_typicalHealthworkersFile_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        JsonSerializableHealthWorkerBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                JsonSerializableHealthWorkerBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorkerBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        HealthWorkerBook typicalHealthWorkersHealthWorkerBook \u003d TypicalHealthWorkers.getTypicalHealthWorkerBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertEquals(addressBookFromFile, typicalHealthWorkersHealthWorkerBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void toModelType_invalidHealthWorkerFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        JsonSerializableHealthWorkerBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                JsonSerializableHealthWorkerBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public void toModelType_duplicateHealthWorkers_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        JsonSerializableHealthWorkerBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                JsonSerializableHealthWorkerBook.class).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        thrown.expectMessage(JsonSerializableHealthWorkerBook.MESSAGE_DUPLICATE_HEALTHWORKER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableRequestBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequestBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.exceptions.DuplicateRequestException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableRequestBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \"data\", \"JsonSerializableRequestBookTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_REQUESTS_FILE \u003d TEST_DATA_FOLDER.resolve"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        (\"typicalRequestsBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_REQUESTS_FILE \u003d TEST_DATA_FOLDER.resolve"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        (\"invalidRequestBook.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_REQUESTS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        .resolve(\"duplicateRequestBook.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void toModelType_typicalRequestsFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        JsonSerializableRequestBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_REQUESTS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "             JsonSerializableRequestBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        RequestBook requestBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        RequestBook typicalRequestsRequestBook \u003d getTypicalRequestBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        assertEquals(typicalRequestsRequestBook, requestBookFromFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidRequestFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.readJsonFile(INVALID_REQUESTS_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonSerializableRequestBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicateRequest_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.readJsonFile(DUPLICATE_REQUESTS_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonSerializableRequestBook.class).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicateRequestException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(JsonSerializableRequestBook.MESSAGE_DUPLICATE_REQUEST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "jing1324": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonRequestBookStorage requestBookStorage \u003d new JsonRequestBookStorage(getTempFilePath("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \"rb\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonHealthWorkerBookStorage healthWorkerBookStorage \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonHealthWorkerBookStorage(getTempFilePath(\"hb\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            requestBookStorage, healthWorkerBookStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //TODO: to be rewritten for all other books"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "jing1324": 20,
      "Lookuz": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditHealthWorkerDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.EditHealthWorkerCommand.EditHealthWorkerDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Utility class for building EditHealthWorkerDescriptor objects for testing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class EditHealthWorkerDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private EditHealthWorkerDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.descriptor \u003d new EditHealthWorkerDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptorBuilder(EditHealthWorkerDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.descriptor \u003d new EditHealthWorkerDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Returns an {@code EditHealthWorkerDescriptor} with fields containing {@code healthWorker}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptorBuilder(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor \u003d new EditHealthWorkerDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor.setName(healthWorker.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor.setPhone(healthWorker.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor.setNric(healthWorker.getNric());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor.setOrganization(healthWorker.getOrganization());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor.setSkills(healthWorker.getSkills());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Sets the {@code Name} of the {@code EditHealthWorkerDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditHealthWorkerDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Sets the {@code Address} of the {@code EditHealthWorkerDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Sets the {@code Organization} of the {@code EditHealthWorkerDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptorBuilder withOrganization(String organization) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.descriptor.setOrganization(new Organization(organization));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Sets the {@code Organization} of the {@code EditHealthWorkerDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptorBuilder withSkills(String... specialisation) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        List\u003cSpecialisation\u003e specialisations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        for (String s : specialisation) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            specialisations.add(Specialisation.valueOf(s));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        Skills skills \u003d new Skills(specialisations);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.descriptor.setSkills(skills);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public EditHealthWorkerDescriptor build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.descriptor;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lookuz": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditRequestDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.request.EditRequestCommand.EditRequestDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditRequestDescriptor objects"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditRequestDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditRequestDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditRequestDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptorBuilder(EditRequestDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditRequestDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditRequestDescriptor} with fields containing {@code order}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptorBuilder(Request request) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditRequestDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(request.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor.setNric(request.getNric());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor.setAddress(request.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(request.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setDate(request.getRequestDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setConditions(request.getConditions());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        descriptor.setHealthWorker(request.getHealthStaff());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditRequestDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditRequestDescriptor} that we are building"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditRequestDescriptor} that we are building"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Date} of the {@code EditRequestDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setDate(new RequestDate(date));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code conditions} into a {@code Set\u003cCondition\u003e} and set it to the {@code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * EditOrderDescriptor} that we are building"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptorBuilder withConditions(String... conditions) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cCondition\u003e conditionSet \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Stream.of(conditions).map(Condition::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setConditions(conditionSet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditRequestDescriptor build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "Lookuz": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/HealthWorkerBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Utility class for building HealthWorkerBook objects for testing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class HealthWorkerBookBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private HealthWorkerBook healthWorkerBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBookBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.healthWorkerBook \u003d new HealthWorkerBook();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBookBuilder(HealthWorkerBook healthWorkerBook) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.healthWorkerBook \u003d healthWorkerBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Adds a new {@code HealthWorker} to the {@code HealthWorkerBook} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBookBuilder withHealthWorker(HealthWorker healthWorker) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.healthWorkerBook.addHealthWorker(healthWorker);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBook build() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this.healthWorkerBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/HealthWorkerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " * Utility Class for building Health Worker objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "public class HealthWorkerBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String DEFAULT_ORGANIZATION \u003d \"NUS\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Set\u003cSpecialisation\u003e DEFAULT_SKILL_SET \u003d new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            Arrays.asList(Specialisation.GENERAL_PRACTICE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private Organization organization;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    private Skills skills;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.organization \u003d new Organization(DEFAULT_ORGANIZATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.skills \u003d new Skills(DEFAULT_SKILL_SET);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Initializes the HealthWorkerBuilder with the data of {@code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * healthWorkerToCopy}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBuilder(HealthWorker healthWorkerToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        super(healthWorkerToCopy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.organization \u003d healthWorkerToCopy.getOrganization();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.skills \u003d healthWorkerToCopy.getSkills();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Sets the {@code Organization} of the {@code HealthWorker} that we are"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBuilder withOrganization(String organization) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.organization \u003d new Organization(organization);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Sets the {@code skills} of the {@code HealthWorker} that we are"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorkerBuilder withSkills(Skills skills) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.skills \u003d new Skills(skills);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Builds a new HealthWorker object for testing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * @return a HealthWorker object with the parameters specified in this"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public HealthWorker build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new HealthWorker(name, nric, phone, organization, skills);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lookuz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lookuz": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"George Rogers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    protected Nric nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        nric \u003d personToCopy.getNric();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * Sets the {@code Nric} of the {@code HealthWorker} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return new Person(name, nric, phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "Lookuz": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().toString() + \" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        sb.append(PREFIX_NRIC + person.getNric().toString() + \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "Lookuz": 1,
      "huichun66": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RequestBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.RequestStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Request objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class RequestBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ID \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PATIENT_NAME \u003d \"Amanda Tan\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PATIENT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PATIENT_EMAIL \u003d \"amandatan@test.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PATIENT_NRIC \u003d \"S9670515H\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PATIENT_ADDRESS \u003d \"123, Far East Ave 3, #04-123, 123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"PENDING\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"01-01-2019 08:00:00\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_REQUEST \u003d \"Physiotherapy\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STAFF_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STAFF_PHONE \u003d \"81237822\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STAFF_ADDRESS \u003d \"Health Hub Ave 3, 129834\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STAFF_EMAIL \u003d \"healthstaff@health.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STAFF_NRIC \u003d \"S9123742I\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ORGANISATION \u003d \"NUH\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private RequestDate requestDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private RequestStatus requestStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cCondition\u003e conditions;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private String healthWorker;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(DEFAULT_PATIENT_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(DEFAULT_PATIENT_PHONE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d new Nric(DEFAULT_PATIENT_NRIC);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(DEFAULT_PATIENT_ADDRESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d DEFAULT_STAFF_NAME;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d new RequestDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d new RequestStatus(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.conditions \u003d new HashSet\u003c\u003e(Arrays.asList(new Condition(DEFAULT_REQUEST)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the RequestBuilder with the data of {@code requestToCopy}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder(Request requestToCopy) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d requestToCopy.getName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d requestToCopy.getPhone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d requestToCopy.getNric();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d requestToCopy.getAddress();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d requestToCopy.getHealthStaff();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.conditions \u003d requestToCopy.getConditions();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d requestToCopy.getRequestDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d requestToCopy.getRequestStatus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code id} of the {@code Request} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param id The id of the request."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The RequestBuilder object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withId(String id) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code nric} of the {@code Patient} object in the request that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param nric the nric of the patient to set"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The RequestBuilder object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code requestDate} of the {@code Request} that we are building"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the date of the request."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The RequestBuilder object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withDate(String date) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestDate \u003d new RequestDate(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} in the request that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone the phone number of the patient"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The RequestBuilder object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code address} of the {@code patient} that we are building"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address the address of the patient"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The RequestBuilder object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code healthStaff} of the {@code Request} we are building."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withHealthStaff(HealthWorker healthStaff) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(healthStaff);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        this.healthWorker \u003d healthStaff.getName().toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code healthStaff} of the {@code Request} that we are building"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withHealthWorker(String healthWorker) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(healthWorker);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        this.healthWorker \u003d healthWorker;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code conditions} of the patient in the {@code Request} we are building."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withConditions(Set\u003cCondition\u003e conditions) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(conditions);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        this.conditions \u003d conditions;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overloaded constructor that sets the {@code conditions} of the patient in the {@code"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Request} we are building."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withConditions(String... conditions) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        this.conditions \u003d Arrays.stream(conditions).map(Condition::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code healthStaff} of the {@code Request} we are building."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        this.requestStatus \u003d new RequestStatus(status);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code name} of the patient in the {@code Request} we are building"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public RequestBuilder withName(String name) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Builds and returns the request."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public Request build() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Request(name, nric, phone, address, requestDate, conditions, requestStatus,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            healthWorker);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 187,
      "Lookuz": 1,
      "huichun66": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //kept for reference"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //* Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //  return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //* Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //  return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //* Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "jing1324": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalHealthWorkers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalHealthWorkers {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final HealthWorker ANDY \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withName(\"Andy Tan\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"94358253\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S8312942G\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            .withSkills(new Skills(new HashSet\u003c\u003e(Arrays.asList(Specialisation.PHYSIOTHERAPY,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                    Specialisation.GENERAL_PRACTICE)))).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final HealthWorker BETTY \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withName(\"Betty Meier\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"98761232\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S8312942G\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withSkills(new Skills(new HashSet\u003c\u003e(Arrays.asList(Specialisation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    .GENERAL_PRACTICE, Specialisation.ORTHOPAEDIC)))).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final HealthWorker CARLIE \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withName(\"Carlie Kurz\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"95358463\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S9312942G\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withSkills(new Skills(new HashSet\u003c\u003e(Arrays.asList(Specialisation.GYNAECOLOGY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    Specialisation.GENERAL_PRACTICE)))).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final HealthWorker PANIEL \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withName(\"Paniel Meier\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"87652133\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S8412942G\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withSkills(new Skills(new HashSet\u003c\u003e(Arrays.asList(Specialisation.PHYSIOTHERAPY,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    Specialisation.HAEMATOLOGY)))).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final HealthWorker ELLA \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withName(\"Ella Meyer\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"94824524\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S9112942G\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withSkills(new Skills(new HashSet\u003c\u003e(Arrays.asList(Specialisation.ANAESTHESIOLOGY,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                    Specialisation.PHYSIOTHERAPY)))).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final HealthWorker FIONE \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withName(\"Fione Kunz\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"94822373\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S7812942G\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final HealthWorker GEORGE \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"94824424\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S8812942G\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static final HealthWorker HOOK \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"84824245\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\"))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public static final HealthWorker IVAN \u003d ((HealthWorkerBuilder) new HealthWorkerBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"84821316\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\"))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withOrganization(\"NUH\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalHealthWorkers() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "     * Returns an {@code HealthWorkerBook} with all the typical persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static HealthWorkerBook getTypicalHealthWorkerBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        HealthWorkerBook healthWorkerBook \u003d new HealthWorkerBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        for (HealthWorker healthWorker : getTypicalHealthStaff()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            healthWorkerBook.addHealthWorker(healthWorker);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        return healthWorkerBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cHealthWorker\u003e getTypicalHealthStaff() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ANDY, BETTY, CARLIE, PANIEL, ELLA, FIONE, GEORGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "jing1324": 8,
      "Lookuz": 59,
      "huichun66": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            .withNric(\"S1234567A\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            .withNric(\"S1234567A\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"94832224\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"94824427\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"94824452\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"84824245\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(\"84821316\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "            .withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "jing1324": 5,
      "Lookuz": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRequests.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing {@code Request} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalRequests {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Request ALICE_REQUEST \u003d new RequestBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        .withConditions(SampleDataUtil.getConditionSet(\"Physiotherapy\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        .withDate(\"01-01-2019 10:00:00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        .withHealthStaff(TypicalHealthWorkers.ANDY)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        .withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        .withNric(\"S9670515H\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Request BENSON_REQUEST \u003d new RequestBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        .withConditions(SampleDataUtil.getConditionSet(\"Palliative\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        .withDate(\"02-01-2919 08:00:00\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        .withHealthStaff(TypicalHealthWorkers.BETTY)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        .withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        .withNric(\"S9274100D\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Request CARL_REQUEST \u003d new RequestBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        .withConditions(SampleDataUtil.getConditionSet(\"Palliative\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        .withDate(\"02-01-2919 14:00:00\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        .withHealthStaff(TypicalHealthWorkers.CARLIE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        .withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        .withNric(\"S9328723A\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Request DANIEL_REQUEST \u003d new RequestBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        .withConditions(SampleDataUtil.getConditionSet(\"Palliative\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "        .withDate(\"02-01-2919 18:00:00\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        .withHealthStaff(TypicalHealthWorkers.PANIEL)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        .withStatus(\"COMPLETED\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        .withNric(\"S2652663Z\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"82015737\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        .withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code RequestBook} with all the typical persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RequestBook getTypicalRequestBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        RequestBook requestBook \u003d new RequestBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Request request : getTypicalRequests()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            requestBook.addRequest(request);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return requestBook;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cRequest\u003e getTypicalRequests() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_REQUEST, BENSON_REQUEST, CARL_REQUEST,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            DANIEL_REQUEST));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "Lookuz": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.commons.core.Commands;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "import seedu.address.logic.commands.ListHealthWorkerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListHealthWorkerCommand.COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        errorStyleOfCommandBox.add(AutoCompleteTextField.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Tests for command box\u0027s behavior when executing a successful command,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * followed by a failed command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Tests for command box\u0027s behavior when executing a failed command,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * followed by a successful command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Tests for key press events for failed command, in which the text does not"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * clear."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Tests for the auto-complete functionality, and checks if the entered prefixes"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * corresponds to the expected commands."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void commandBox_checkAutoComplete() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertAutoCompletion(\"s\", Commands.SELECT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertAutoCompletion(\"add 1\", Commands.ADD_HEALTH_WORKER_MODE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertAutoCompletion(\"add r\", Commands.ADD_REQUEST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertAutoCompletion(\"hi\", Commands.HISTORY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertAutoCompletion(\"f\", Commands.FILTER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Tests for key press events starting with UP."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String thirdCommand \u003d \"list 2\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Tests for key press events starting with DOWN."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void assertAutoCompletion(String prefix, String expected) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        commandBoxHandle.selectFromAutoComplete(prefix);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expected, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "huichun66": 45,
      "Lookuz": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HealthWorkerCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysHealthWorker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.HealthWorkerCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.testutil.HealthWorkerBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class HealthWorkerCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorker worker \u003d new HealthWorkerBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorkerCard healthWorkerCard \u003d new HealthWorkerCard(worker, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        uiPartRule.setUiPart(healthWorkerCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertCardDisplay(healthWorkerCard, worker, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorker worker \u003d new HealthWorkerBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorkerCard healthWorkerCard \u003d new HealthWorkerCard(worker, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // same health worker, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorkerCard copy \u003d new HealthWorkerCard(worker, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertTrue(healthWorkerCard.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertTrue(healthWorkerCard.equals(healthWorkerCard));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(healthWorkerCard.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(healthWorkerCard.equals(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // different health workers, same index -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorker diffHealthWorker \u003d new HealthWorkerBuilder().withOrganization(\"SGH\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(healthWorkerCard.equals(new HealthWorkerCard(diffHealthWorker, 0)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that {@code healthWorkerCard} displays the details of {@code expectedHealthWorker} correctly"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * and matches {@code expectedId}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void assertCardDisplay(HealthWorkerCard healthWorkerCard, HealthWorker expectedHealthWorker,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                                   int expectedId) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorkerCardHandle healthWorkerCardHandle \u003d new HealthWorkerCardHandle(healthWorkerCard.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // verify request details are displayed correctly"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertCardDisplaysHealthWorker(expectedHealthWorker, healthWorkerCardHandle);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HealthWorkerListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.getTypicalHealthStaff;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysHealthWorker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertHealthWorkerCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.HealthWorkerCardHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.HealthWorkerListPanelHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.Organization;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.tag.Skills;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class HealthWorkerListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final ObservableList\u003cHealthWorker\u003e TYPICAL_HEALTH_WORKERS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            FXCollections.observableList(getTypicalHealthStaff());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 3500;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final SimpleObjectProperty\u003cHealthWorker\u003e selectedHealthWorker \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private HealthWorkerListPanelHandle healthWorkerListPanelHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Initialises typical health workers on the UI, then checks for each health worker"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * if the card handle is displaying the same as the health worker."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        initUi(TYPICAL_HEALTH_WORKERS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_HEALTH_WORKERS.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            healthWorkerListPanelHandle.navigateToCard(TYPICAL_HEALTH_WORKERS.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            HealthWorker expectedHealthWorker \u003d TYPICAL_HEALTH_WORKERS.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            HealthWorkerCardHandle actualCard \u003d healthWorkerListPanelHandle.getHealthWorkerCardHandle(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            assertCardDisplaysHealthWorker(expectedHealthWorker, actualCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Selection test for one of the health workers from typical health workers."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void selection_modelSelectedHealthWorkerChanged_selectionChanges() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        initUi(TYPICAL_HEALTH_WORKERS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorker secondHealthWorker \u003d TYPICAL_HEALTH_WORKERS.get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e selectedHealthWorker.set(secondHealthWorker));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorkerCardHandle expectedHealthWorker \u003d healthWorkerListPanelHandle.getHealthWorkerCardHandle("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorkerCardHandle selectedHealthWorker \u003d healthWorkerListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertHealthWorkerCardEquals(expectedHealthWorker, selectedHealthWorker);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Verifies that creating and deleting large number of health workers in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * {@code HealthWorkerListPanel} requires lesser than {@code CARD_CREATION_AND_DELETION_TIMEOUT}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * milliseconds to execute."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        ObservableList\u003cHealthWorker\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }, \"Creation and deletion of health worker cards exceeded time limit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns a list of health workers containing {@code count} workers that is used to populate the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * {@code HealthWorkerListPanel}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private ObservableList\u003cHealthWorker\u003e createBackingList(int count) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        ObservableList\u003cHealthWorker\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Name name \u003d new Name(\"Sally Marymount\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Nric nric \u003d new Nric(\"S8677924C\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Phone phone \u003d new Phone(\"81526694\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Organization org \u003d new Organization(\"NUH\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Skills skills \u003d new Skills();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Specialisation specialisation1 \u003d Specialisation.GENERAL_PRACTICE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Specialisation specialisation2 \u003d Specialisation.ENDOCRINOLOGY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            skills.addSpecialisation(specialisation1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            skills.addSpecialisation(specialisation2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            HealthWorker worker \u003d new HealthWorker(name, nric, phone, org, skills);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            backingList.add(worker);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Initializes {@code healthWorkerListPanelHandle} with a {@code healthWorkerListPanel} backed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * {@code backingList}. Also shows the {@code Stage} that displays only {@code healthWorkerListPanel}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void initUi(ObservableList\u003cHealthWorker\u003e backingList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        HealthWorkerListPanel healthWorkerListPanel \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                new HealthWorkerListPanel(backingList, selectedHealthWorker, selectedHealthWorker::set);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        uiPartRule.setUiPart(healthWorkerListPanel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        healthWorkerListPanelHandle \u003d new HealthWorkerListPanelHandle(getChildNode(healthWorkerListPanel.getRoot(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                HealthWorkerListPanelHandle.HEALTH_WORKER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/InfoPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.InfoPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.testutil.RequestBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * This class tests for any sort of standard operations done to the UI component,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * Info Panel."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": " * @author Hui Chun"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class InfoPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private SimpleObjectProperty\u003cRequest\u003e selectedRequest \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private InfoPanel infoPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private InfoPanelHandle infoPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e infoPanel \u003d new InfoPanel(selectedRequest));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        uiPartRule.setUiPart(infoPanel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        infoPanelHandle \u003d new InfoPanelHandle(infoPanel.getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(InfoPanel.DEFAULT_PAGE, infoPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // checks if loaded content is not empty, after loading sample request details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Request sampleRequest \u003d new RequestBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String html \u003d infoPanel.generateHtml(sampleRequest);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        infoPanel.loadContent(html);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Thread.sleep(500);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        } while(!infoPanelHandle.isLoaded());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String loadedContent \u003d infoPanelHandle.getLoadedContent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertTrue(!loadedContent.isEmpty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonHealthWorkerBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonRequestBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonRequestBookStorage jsonRequestBookStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonRequestBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonHealthWorkerBookStorage jsonHealthWorkerBookStorage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonHealthWorkerBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonUserPrefsStorage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "                jsonRequestBookStorage, jsonHealthWorkerBookStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "jing1324": 1,
      "Lookuz": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RequestCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.RequestCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.testutil.RequestBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class RequestCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // no conditions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Request request \u003d new RequestBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        RequestCard requestCard \u003d new RequestCard(request, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        uiPartRule.setUiPart(requestCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertCardDisplay(requestCard, request, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Request request \u003d new RequestBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        RequestCard requestCard \u003d new RequestCard(request, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        RequestCard copy \u003d new RequestCard(request, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertTrue(requestCard.equals(copy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertTrue(requestCard.equals(requestCard));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(requestCard.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(requestCard.equals(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // different request, same index -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Request differentRequest \u003d new RequestBuilder().withName(\"different request\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(requestCard.equals(new RequestCard(differentRequest, 0)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // same request, different index -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(requestCard.equals(new RequestCard(request, 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that {@code requestCard} displays the details of {@code expectedRequest} correctly"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * and matches {@code expectedId}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void assertCardDisplay(RequestCard requestCard, Request expectedRequest, int expectedId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        RequestCardHandle requestCardHandle \u003d new RequestCardHandle(requestCard.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedId + \". \", requestCardHandle.getId());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // verify request details are displayed correctly"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertCardDisplaysRequest(expectedRequest, requestCardHandle);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "huichun66": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RequestListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huichun66"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.getTypicalRequests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysRequest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertRequestCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.RequestCardHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.RequestListPanelHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.RequestDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "public class RequestListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final ObservableList\u003cRequest\u003e TYPICAL_REQUESTS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            FXCollections.observableList(getTypicalRequests());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 3500;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final SimpleObjectProperty\u003cRequest\u003e selectedRequest \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private RequestListPanelHandle requestListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Initialises typical requests on the UI, then checks for each request"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * if the card handle is displaying the same as the request."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        initUi(TYPICAL_REQUESTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_REQUESTS.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            requestListPanelHandle.navigateToCard(TYPICAL_REQUESTS.get(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Request expectedRequest \u003d TYPICAL_REQUESTS.get(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            RequestCardHandle actualCard \u003d requestListPanelHandle.getRequestCardHandle(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            assertCardDisplaysRequest(expectedRequest, actualCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            assertEquals((i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Selection test for one of the requests from typical requests."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void selection_modelSelectedRequestChanged_selectionChanges() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        initUi(TYPICAL_REQUESTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        Request secondRequest \u003d TYPICAL_REQUESTS.get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e selectedRequest.set(secondRequest));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        RequestCardHandle expectedRequest \u003d requestListPanelHandle.getRequestCardHandle(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        RequestCardHandle selectedRequest \u003d requestListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertRequestCardEquals(expectedRequest, selectedRequest);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Verifies that creating and deleting large number of requests in {@code RequestListPanel} requires lesser than"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        ObservableList\u003cRequest\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }, \"Creation and deletion of request cards exceeded time limit\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Returns a list of requests containing {@code requestCount} requests that is used to populate the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * {@code RequestListPanel}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private ObservableList\u003cRequest\u003e createBackingList(int requestCount) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        ObservableList\u003cRequest\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        for (int i \u003d 0; i \u003c requestCount; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Name name \u003d new Name(i + \" Sample Request Name\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Nric nric \u003d new Nric(\"S1234567A\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Phone phone \u003d new Phone(\"81812288\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Address address \u003d new Address(\"123 ABC Road, #09-99\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            RequestDate requestDate \u003d new RequestDate(\"30-01-2019 10:00:00\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Set\u003cCondition\u003e conditionList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Condition condition \u003d new Condition(\"diabetic\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            conditionList.add(condition);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Request request \u003d new Request(name, nric, phone, address, requestDate, conditionList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            backingList.add(request);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Initializes {@code requestListPanelHandle} with a {@code requestListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code requestListPanel}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private void initUi(ObservableList\u003cRequest\u003e backingList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        RequestListPanel requestListPanel \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                new RequestListPanel(backingList, selectedRequest, selectedRequest::set);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        uiPartRule.setUiPart(requestListPanel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        requestListPanelHandle \u003d new RequestListPanelHandle(getChildNode(requestListPanel.getRoot(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                RequestListPanelHandle.REQUEST_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huichun66"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huichun66": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.testutil.TypicalHealthWorkers.CARLIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.testutil.TypicalRequests.ALICE_REQUEST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.RequestBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final RequestBook requestBook \u003d new RequestBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private final HealthWorkerBook healthWorkerBook \u003d new HealthWorkerBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                STUB_SAVE_LOCATION, requestBook, healthWorkerBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // initial state, with only the initial sync status"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertStatusBarContent(\"\", SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // after request book is updated"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMMM YYYY, hh:mm a\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e requestBook.addRequest(ALICE_REQUEST));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        long now \u003d StatusBarFooter.getClock().millis();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String lastUpdated \u003d formatter.format(new Date(now));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), String.format(SYNC_STATUS_UPDATED,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                lastUpdated));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        // after health worker book is updated"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        guiRobot.interact(() -\u003e healthWorkerBook.addHealthWorker(CARLIE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        now \u003d StatusBarFooter.getClock().millis();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        lastUpdated \u003d formatter.format(new Date(now));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), String.format(SYNC_STATUS_UPDATED,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                lastUpdated));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "huichun66": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.HealthWorkerCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.HealthWorkerListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.RequestCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.RequestListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.person.healthworker.HealthWorker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertRequestCardEquals(RequestCardHandle expectedCard, RequestCardHandle actualCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedCard.getNric(), actualCard.getNric());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedCard.getConditions(), actualCard.getConditions());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertHealthWorkerCardEquals(HealthWorkerCardHandle expectedCard,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                                                    HealthWorkerCardHandle actualCard) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedCard.getOrganisation(), actualCard.getOrganisation());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedCard.getSpecialisations(), actualCard.getSpecialisations());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedRequest}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertCardDisplaysRequest(Request expectedRequest, RequestCardHandle actualCard) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedRequest.getName().toString(), actualCard.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedWorker}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertCardDisplaysHealthWorker(HealthWorker expectedWorker, HealthWorkerCardHandle actualCard) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedWorker.getName().toString(), actualCard.getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedWorker.getOrganization().toString(), actualCard.getOrganisation());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedWorker.getPhone().toString(), actualCard.getPhone());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that the list in {@code requestListPanelHandle} displays the details of {@code requests}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertRequestListMatching(RequestListPanelHandle requestListPanelHandle, Request... requests) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        for (int i \u003d 0; i \u003c requests.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            requestListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            assertCardDisplaysRequest(requests[i], requestListPanelHandle.getRequestCardHandle(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that the list in {@code requestListPanelHandle} displays the details of {@code requests}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertRequestListMatching(RequestListPanelHandle requestListPanelHandle,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                                                 List\u003cRequest\u003e requests) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertRequestListMatching(requestListPanelHandle, requests.toArray(new Request[0]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that the list in {@code healthWorkerListPanelHandle} displays the details of {@code health workers}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertHealthWorkerListMatching(HealthWorkerListPanelHandle healthWorkerListPanelHandle,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                                                      HealthWorker... workers) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        for (int i \u003d 0; i \u003c workers.length; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            healthWorkerListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            assertCardDisplaysHealthWorker(workers[i], healthWorkerListPanelHandle.getHealthWorkerCardHandle(i));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that the list in {@code healthWorkerListPanelHandle} displays the details of {@code health workers}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertHealthWorkerListMatching(HealthWorkerListPanelHandle healthWorkerListPanelHandle,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "                                                      List\u003cHealthWorker\u003e workers) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertHealthWorkerListMatching(healthWorkerListPanelHandle, workers.toArray(new HealthWorker[0]));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts the size of the list in {@code requestListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public static void assertListSize(RequestListPanelHandle requestListPanelHandle, int size) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        int numberOfRequests \u003d requestListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(size, numberOfRequests);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "huichun66": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/WhiteTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "huichun66": 1
    }
  },
  {
    "path": "src/test/java/systemtests/AddPersonCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Deprecated test for AddCommand in AB4."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class AddPersonCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * TODO: Phased out. To be changed to AddHealthWorker/AddRequestSystemTest."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ------------------------ Perform add operations on the shown unfiltered list ------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ----------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: add a person without tags to a non-empty address book, command with leading s"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        paces and trailing spaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String command \u003d \"   \" + AddPersonCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* -------------------------- Perform add operation on the shown filtered list ----------------------"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        -------- */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ------------------------ Perform add operation while a person card is selected -----------"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ---------------- */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ----------------------------------- Perform invalid add operations --------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ------------------- */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//        assertCommandFailure(command, Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes the {@code AddPersonCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 3. Result display box displays the success message of executing {@code AddPersonCommand} with the details of"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * instead."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddPersonCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String expectedResultMessage \u003d String.format(AddPersonCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddPersonCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 242,
      "Lookuz": 1
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//import seedu.address.model.HealthWorkerBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertHealthWorkerListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertRequestListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.HealthWorkerListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.InfoPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import guitests.guihandles.RequestListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//import seedu.address.logic.commands.FilterHealthWorkerCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huichun66"
        },
        "content": "//import seedu.address.logic.commands.ListHealthWorkerCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.ui.AutoCompleteTextField;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huichun66"
        },
        "content": "import seedu.address.ui.InfoPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huichun66"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", AutoCompleteTextField.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        //testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        waitUntilBrowserLoaded(getInfoPanel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huichun66"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public RequestListPanelHandle getRequestListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return mainWindowHandle.getRequestListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public InfoPanelHandle getInfoPanel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return mainWindowHandle.getInfoPanel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    public HealthWorkerListPanelHandle getHealthWorkerListPanel() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        return mainWindowHandle.getHealthWorkerListPanel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        waitUntilBrowserLoaded(getInfoPanel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //protected void showAllPersons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //  executeCommand(ListHealthWorkerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //executeCommand(FilterHealthWorkerCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //  assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(index.getZeroBased(), getRequestListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //  executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huichun66"
        },
        "content": "    //assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "     * {@code expectedResultMessage}, the storage getSpecialisation the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        //assertEquals(new HealthWorkerBook(expectedModel.getHealthWorkerBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertRequestListMatching(getRequestListPanel(), expectedModel.getFilteredRequestList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertHealthWorkerListMatching(getHealthWorkerListPanel(), expectedModel.getFilteredHealthWorkerList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Calls {@code RequestListPanelHandle}, {@code InfoPanel}, {@code HealthWorkerListPanelHandle} and"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * {@code StatusBarFooterHandle} to remember their current states."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        getInfoPanel().rememberUrl();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        getRequestListPanel().rememberSelectedRequestCard();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        getHealthWorkerListPanel().rememberSelectedHealthWorkerCard();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that the previously selected card is now deselected and there is no new load event."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @see InfoPanelHandle#isLoaded()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(!getInfoPanel().isLoaded());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(getRequestListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that the info panel\u0027s content is updated to display the details of a request from the request list panelt"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * at {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @see InfoPanelHandle#isLoaded()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @see RequestListPanelHandle#isSelectedRequestCardChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        getRequestListPanel().navigateToCard(getRequestListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertTrue(getInfoPanel().isLoaded());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getRequestListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * Asserts that the info panel\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @see InfoPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huichun66"
        },
        "content": "     * @see RequestListPanelHandle#isSelectedRequestCardChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(getInfoPanel().isUrlChanged());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertFalse(getRequestListPanel().isSelectedRequestCardChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMMM YYYY, hh:mm a\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        String timestamp \u003d formatter.format(new Date(clockRule.getInjectedClock().millis()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertRequestListMatching(getRequestListPanel(), getModel().getFilteredRequestList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertHealthWorkerListMatching(getHealthWorkerListPanel(), getModel().getFilteredHealthWorkerList());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        assertEquals(InfoPanel.DEFAULT_PAGE, getInfoPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        //assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huichun66"
        },
        "content": "        //      getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 208,
      "jing1324": 8,
      "huichun66": 71,
      "Lookuz": 1
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Deprecated system test for ClearCommand in AB4."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * TODO: Deprecated. To be replaced accordingly."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void clear() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * error style."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 104
    }
  },
  {
    "path": "src/test/java/systemtests/DeletePersonCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Deprecated system test for DeleteCommand in AB4."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class DeletePersonCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * TODO: Phased out. To be replaced with DeleteHealthWorker/DeleteRequestSystemTest."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void delete() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ----------------- Performing delete operation while an unfiltered list is being shown ----------"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ---------- */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: delete the first person in the list, command witAh leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String command \u003d \"     \" + DeletePersonCommand.COMMAND_WORD + \"      \" + INDEX_FIRST.getOneBased()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + \"       \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ------------------ Performing delete operation while a filtered list is being shown ------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ---------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e rejected"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* --------------------- Performing delete operation while a person card is selected ---------------------"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        --- */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showAllPersons();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* --------------------------------- Performing invalid delete operation ------------------"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ------------------ */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d DeletePersonCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d DeletePersonCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(DeletePersonCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(DeletePersonCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @return the removed person"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        return targetPerson;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Deletes the person at {@code toDelete} by creating a default {@code DeletePersonCommand} using {@code toDelete}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see DeletePersonCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                DeletePersonCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     browser url"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * and selected card are expected to update accordingly depending on the card at"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see DeletePersonCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 206
    }
  },
  {
    "path": "src/test/java/systemtests/EditPersonCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.parser.CommandMode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.tag.Condition;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Deprecated system test for EditCommand in AB4."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class EditPersonCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private static final String MODE_OTHERS \u003d CommandMode.MODE_OTHERS + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * TODO: Phased out. To be replaced with EditHealthWorker/EditRequestSystemTest"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void edit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model model \u003d getModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ----------------- Performing edit operation while an unfiltered list is being shown"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ---------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_BOB + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//        assertTrue(getModel().getAddressBook().getPersonList().getSpecialisation(BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_BOB + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e edited"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_AMY + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as another person\u0027s values but with different Nric -\u003e edited"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_BOB + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        editedPerson \u003d new PersonBuilder(BOB).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ----------------- Performing edit operation while a filtered list is being shown ----------------------- */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e rejected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* -------------------- Performing edit operation while a person card is selected ------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * browser url changes"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showAllPersons();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        selectPerson(index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* -------------------------------- Performing invalid edit operation ------------------------------------- */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" \" + invalidIndex"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                        + NAME_DESC_BOB, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                        + INDEX_FIRST.getOneBased(), EditPersonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + INDEX_FIRST.getOneBased() + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + INDEX_FIRST.getOneBased() + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + INDEX_FIRST.getOneBased() + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + INDEX_FIRST.getOneBased() + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + \" \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//                + INDEX_FIRST.getOneBased() + INVALID_TAG_DESC, Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jing1324"
        },
        "content": "////        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//        assertTrue(getModel().getAddressBook().getPersonList().getSpecialisation(BOB));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as other person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + MODE_OTHERS + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Asserts that result display box displays the success message of executing {@code EditPersonCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 284,
      "Lookuz": 3
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_HEALTHWORKER_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.FilterHealthWorkerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "////import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "////import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Deprecated system test for FilterHealthWorkerCommand in AB4."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * TODO: replace to filter system test after find is changed to filter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void find() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String command \u003d \"   \" + FilterHealthWorkerCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //executeCommand(DeletePersonCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//        //assertFalse(getModel().getAddressBook().getPersonList().getSpecialisation(BENSON));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // showAllPersons();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        selectPerson(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //deleteAllPersons();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//        command \u003d FilterHealthWorkerCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    //TODO to be rewritten"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    //private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//      //  String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //        MESSAGE_HEALTHWORKER_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //executeCommand(command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    //}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * error style."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 176,
      "Lookuz": 2
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//TODO TO BE REWRITTEN WHEN ADDRESSBOOKSYSTEM TEST IS REIMPLEMENTED"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.HealthWorkerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "// * A system test class for the help window, which getSpecialisation interaction with other UI components."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void openHelpWindow() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //use accelerator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getCommandBox().click();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getResultDisplay().click();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getRequestListPanel().click();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getInfoPanel().click();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //use menu button"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //use command box"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // open help window and give it focus"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // TODO: Hui Chun - Not sure how this works, perhaps you can take a look at it?"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // assertNotEquals(MapPanel.DEFAULT_PAGE, getMapPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + HealthWorkerCommand.COMMAND_OPTION + \" \" + INDEX_FIRST"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                .getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 105,
      "Lookuz": 1
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 39
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//TODO Can only be reimplemented once System"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //TODO: After refractoring the SampleDataUtil, then do this."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //assertListMatching(getRequestListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "jing1324": 51
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jing1324"
        },
        "content": "////import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jing1324"
        },
        "content": "////import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jing1324"
        },
        "content": "////import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jing1324"
        },
        "content": "////import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jing1324"
        },
        "content": "///**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// * Deprecated system for SelectCommand in AB4."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jing1324"
        },
        "content": "// */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * TODO: Deprecated. To be replaced with new SelectCommandSystemTest after implementing of Select command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    public void select() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ------------------------ Perform select operations on the shown unfiltered list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        -------------------------- */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e selected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, INDEX_FIRST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ------------------------ Perform select operations on the shown filtered list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ---------------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         * -\u003e rejected"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* ----------------------------------- Perform invalid select operations -------------------"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        ----------------- */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//                MESSAGE_SELECT_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //     assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        // } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //     assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        //}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jing1324"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jing1324": 159,
      "Lookuz": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyHealthWorkerBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jing1324"
        },
        "content": "import seedu.address.model.ReadOnlyRequestBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jing1324"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyHealthWorkerBook\u003e healthWorkerBookSupplier,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                                    Path healthWorkerBookPath, Supplier\u003cReadOnlyRequestBook\u003e requestBookSupplier,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                                    Path requestBookPath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jing1324"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(healthWorkerBookSupplier, healthWorkerBookPath,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jing1324"
        },
        "content": "                    requestBookSupplier, requestBookPath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "jing1324": 7
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lookuz"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Lookuz": 1
    }
  }
]
