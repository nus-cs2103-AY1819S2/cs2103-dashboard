[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d docX"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://travis-ci.org/cs2103-ay1819s2-w13-1/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/cs2103-ay1819s2-w13-1/main\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/wayneswq/main/branch/master[image:https://ci.appveyor.com/api/projects/status/yulbp51x3qkkyrlu/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w13-1/main/badge.svg?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://app.netlify.com/sites/cs2103-ay1819s2-w13-1/deploys[image:https://api.netlify.com/api/v1/badges/affc1f29-4e36-4d55-8249-d91b9f0fc02f/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "* This is a desktop clinic management application designed for receptionists in clinic. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Nowadays many clinic receptionists are still using pen and paper to track patients\u0027 information, which can be quite troublesome if the number of patients is large. Our patient management application is designed specifically to make this process much easier for them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* The features we provide include:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Record all patients coming to the clinic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Record all doctors in clinic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Record medical histories of patients"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Make appointments for patients"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Record all medicines in the clinic and record prescriptions given by doctors"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* The original source of the code comes from AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "Liuyy99": 6
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 1,
      "-": 237
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "We are a team of software engineers from http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. Our application is based upon \"AddressBook - Level 4\", developed by the https://se-edu.github.io/docs/Team.html[se-edu] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Yong Xin Shen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::amuletxheart.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[https://github.com/amuletxheart[github]]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Team lead"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Ong Si Ying"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::siyingpoof.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[http://github.com/siyingpoof[github]]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Documentation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Liu Yiyang"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::liuyy99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[http://github.com/Liuyy99[github]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Testing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Seah Wei Quan"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::wayneswq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[http://github.com/wayneswq[github]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Code quality"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Gong Changda"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::gongchangda.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[http://github.com/GongChangda[github]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Deliverables and deadlines"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 21,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* *Email us* : You can also reach us at `xinshen [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d docX - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "By: `Team SE-EDU and AY1819S2 W13-1`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prescriptions"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Prescriptions are used to keep track of what kind of medicine a doctor suggest a particular patient to take. they"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "are useful because sometimes patients may want to know what medicine they took before. There are three functionalities"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "related to prescriptions, which are add a new prescription, edit an existing prescription and delete an existing"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "prescription respectively."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d Add a New Prescription"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Current proposed implementation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "A user specifies the id of the patient, the id of the doctor and a description of the prescription in command line. And"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "then the command processing procedure is roughly as follows:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Step1. LogicManager calls parseCommand(\"add-prescription\") in AddressBookParser."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "Step2. Based on the COMMAND_WORD, AddressBookParser builds a new AddMedHistCommandParser()"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "and call function parse(arguments) of AddMedHistCommandParser;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Step3. AddPrescriptionCommandParser parses patient id, doctor id as well as the description of the prescription."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Then it searches for the corresponding patient and doctor in the database. If both exist, then we invoke the constructor"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "of Patient class and Doctor Class to create the corresponding patient and doctor. Otherwise, we throw an exception indicating"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "that the patient id or the doctor id is not valid here."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Step4. After the patient and doctor objects are created, the constructor of Prescription class is invoked. Then"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "AddPrescriptionCommandParser will invoke AddPrescriptionCommand with the newly created prescription as the input."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Step5. LogicManager calls execute() of AddPrescriptionCommand."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Step6. execute() calls hasPrescription() of Model. If the prescription does not exist, call addPrescription() of Model"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an Existing Prescription"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "To be updated later"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "----- Delete an Existing Prescription"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "To be updated later"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d CRUD of patients"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Patients is one of the two valid types of Persons to be stored in the docX record."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "The following features are implemented or will be implemented for patients of docX:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* Add patient"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* List all patients"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* Edit existing patients"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* Search patients by keywords"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* Delete existing patients"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d CRUD Patient features"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current(Proposed) Implementation"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "When a user executes \u0027add-patient n/John Doe g/Male a/21 p/98765432 adr/Utown College 2\u0027"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Step1. LogicManager calls parseCommand(\"add-patient\") in AddressBookParser."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Step2. Based on the COMMAND_WORD, AddressBookParser builds a new AddCommandParser() and call function parse(arguments) of AddCommandParser;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Step3. AddCommandParser parses the argument and get patient name, patient gender, age, phone, address and an optional tag. AddCommandParser calls constructors of Age, Gender, Phone, Address and Tag and then calls the constructor of Patient."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\t   Then, AddPatientCommandParser calls AddPatientCommand(Patient)."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Step4. LogicManager calls execute() of AddCPatientommand."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Step5. execute() calls hasPatient() of Model. If patient does not exist, call addPatient() of Model."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d List Patient feature"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "list-patient"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Patient feature"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "edit-patient"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Search Patient feature"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "search-patient"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Patient feature"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete\")` API call."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete-patient` Command"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "\u003d\u003d\u003d Medical History of patients"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "Medical History is used to track a patient\u0027s history of coming to the clinic and seeing doctors."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "The following features are implemented or will be implemented for users of docX:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "* Add medical history of patient: the medical history contains information of patient, doctor, time and a prescription"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "* List all medical history of a specified patient"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "* Edit medical history"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "* Search medical history by keywords"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "* View a specified medical history"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "\u003d\u003d\u003d\u003d Add Medical History feature"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current(Proposed) Implementation"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "When a user executes \u0027add-med-hist n/patientName n/doctorName sw/shortWriteUp\u0027"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "Step1. LogicManager calls parseCommand(\"add-med-hist\") in AddressBookParser."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "Step2. Based on the COMMAND_WORD, AddressBookParser builds a new AddMedHistCommandParser() and call function parse(arguments) of AddMedHistCommandParser;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "Step3. AddMedHistCommandParser parses the argument and get patient name, doctor name, time and a short write up. AddMedHistCommandParser calls constructors of Patient, Doctor, Date and WriteUp and then calls the constructor of MedicalHistory. Then, AddMedHistCommandParser calls AddMedHistCommand(medicalHistory)."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "Step4. LogicManager calls execute() of AddMedHistCommand."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "Step5. execute() calls hasMedHist() of Model. If medical history doesn\u0027t exist, call addMedHist() of Model."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "\u003d\u003d\u003d\u003d List Medical History feature"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "{Explain here how list medical history will be implemented}"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Medical History feature"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "{Explain here how edit medical history will be implemented}"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "\u003d\u003d\u003d\u003d Search Medical History feature"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "{Explain here how search medical history will be implemented}"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "\u003d\u003d\u003d\u003d View Medical History feature"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "{Explain here how view medical history will be implemented}"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Appointments"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Appointments are created to facilitate future appointments between patients and doctors. A patient can have none or multiple appointments, a doctor can have none or multiple appointments. An appointment cannot overlap with a patient\u0027s or doctor\u0027s existing appointments. This is determined if the date and time overlaps. An appointment must specify a date, time, patient, doctor, and short write-up."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "The following features are implemented or will be implemented:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* Add appointment"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* Complete appointment"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* Cancel appointment"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* List all appointments of a doctor"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* List available timings of a doctor"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* List available appointments of all doctors"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d Add Appointment"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current (partial) Implementation"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "The user types \u0027add-appt p/patientID d/doctorID t/dateAndTime /w writeUp\u0027"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Step 1. The command is parsed by AddAppointmentCommandParser and a AddAppointmentCommand is returned."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Step 2. The AddAppointmentCommand contains an appointment object. The appointment object is an entity object that holds the details for that particular appointment. i.e. patient, doctor, dateAndTime, writeUp."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Step 3. Within execute(), the actual logic of the AddAppointment operation is being performed. Firstly, it will retrieve the list of existing appointments of the patient and the doctor. Secondly, it will create a new appointment object, check if the dateAndTime overlaps with the patient\u0027s existing appointments, and check if the dateAndTime overlaps with the doctor\u0027s existing appointments. If the appointment is not overlapping, the appointment object will be added to the list of appointments in both the patient and doctor object."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Step 4. Once the above logic is successfully executed, the UI is updated by the UI layer and the save file is updated by the Storage layer. The storage layer will convert the appointments in the patient and doctor objects into JSON and saves it to file. (to be further explained when implemented)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d Complete Appointment"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{todo}"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d Cancel Appointment"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{todo}"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d List all appointments of a doctor"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{todo}"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d List available timings of a doctor"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{todo}"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d\u003d List available appointments of all doctors"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{todo}"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* receptionist in a small to medium sized clinic"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* has a need to manage a significant number of patients and doctors"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Value proposition*: manage patients and doctors faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |add a new patient/doctor |"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |list all existing patient/doctor |"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |edit an existing patient/doctor |"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |search all existing patient/doctor |locate details of patients/doctors without having to go through the entire list"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |add a new medical history to a patient |"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |list all existing medical history of a patient |"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |edit an existing medical history of a patient |"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |view an existing medical history of a patient |"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |search for an existing medical history of a patient |"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |add appointment |"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |complete appointment |the appointment has elapsed, mark as completed or missed"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |cancel appointment | the appointment has been cancelled"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |list all appointments of a doctor |"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |list available timings of a doctor |"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |list available appointments of all doctors |"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |add a new prescription |"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |edit an existing prescription |"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |delete an existing prescription |"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |list entered commands |list a history of previously entered commands"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "(For all use cases below, the *System* is the `docX` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Add Patient/Doctor"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User adds a new patient/doctor."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows details of the new patient/doctor added."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient/doctor to be added is in the wrong format."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message, prompting user to re-enter the data."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Existing Patients/Doctors"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User requests to list all existing patients/doctors."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows a list of patients/doctors."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 2a. There are no existing patients/doctors."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 2a1. docX shows an empty list."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Edit an Existing Patient/Doctor"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User enters the new details for a patient/doctor with the given ID."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows a success message and the new details of the patient/doctor."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The given ID for a patient/doctor is not found."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts for a valid ID."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The new details is in an invalid format."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX prompts user to re-enter the details."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Search All Existing Patient/Doctor"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User searches for patients using name or phone number."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows a list of patients/doctors with the name or phone number."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The search terms are in an invalid format."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts users to re-enter the search terms."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 2a. There are no patients/doctors that match the given search terms."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 2a1. docX shows an empty list."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an Existing Patient/Doctor"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the patient/doctor ID to be deleted."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the patient/doctor is deleted."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient/doctor ID does not exist."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to enter a valid patient/doctor ID."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Add New Medical History to Patient"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User add a new medical history entry to a patient ID."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows the details of the new medical history entry added."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The medical history is in the wrong format."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts users to re-enter the medical history."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The given patient ID does not exist."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and prompts for a valid patient ID."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Existing Medical History of a Patient"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User requests to list all existing medical history of a given patient ID."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows all the medical history entries belonging to the patient ID."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient ID does not exist."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts user to re-enter patient ID."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The patient does not have any medical history."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows the patient does not have any medical history."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Edit An Existing Medical History of a Patient"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enter the new details for a medical history entry, given a medical history ID and patient ID."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows a success message and the new details for the medical history."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The new details is not in a valid format."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts user to re-enter details."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The medical history ID for the given patient ID does not exist."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and prompts user to enter a valid medical history ID."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1c. The patient ID does not exist."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1c1. docX shows an error message and prompts user to enter a valid patient ID."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: View An Existing Medical History of a Patient"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the medical history ID and the patient ID."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the full details of the medical history."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The medical history ID is not valid for the given patient ID."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts user to re-enter the medical history ID."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The patient ID does not exist."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and prompts user to enter a valid patient ID."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Search All Existing Medical History of a Patient"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the search terms and the patient ID."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows medical history entries belonging to the particular patient ID whose write up contains the matching search terms."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. There are no medical history whose write up matches the search terms for the patient ID."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an empty search result."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The patient ID does not exist."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and prompts user to enter a valid patient ID."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Add Appointment"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the patient ID, doctor ID and start and end times for the appointment."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the appointment details."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient ID or doctor ID does not exist."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid patient/doctor ID."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The doctor is not available in the specified duration."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows the doctor is not available and request user to enter a different time."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Complete Appointment"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters appointment ID and whether the patient attended the appointment."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the appointment details as completed."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The appointment ID does not exist."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid appointment ID."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Cancel Appointment"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters appointment ID."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX marks the appointment as cancelled."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The appointment ID does not exist."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid appointment ID."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The appointment is in the past or has already been completed."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and request the user to give a valid appointment ID."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Appointments of a Doctor"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters doctor ID"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows a list of all the appointment of the doctor ID."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The doctor ID does not exist."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid doctor ID."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 2a. The doctor has no appointments."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 2a1. docX shows the doctor has no appointments."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Available Timing of a Doctor"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters doctor ID and date"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows a list of all the available time slots of the doctor ID on a particular date."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The doctor ID does not exist."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid doctor ID."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 2a. The doctor has no appointments."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 2a1. docX shows the doctor has no appointments."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Available Timings of Doctors on a Date"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters date."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows a list of all the available time slots of all the doctors on a particular date."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. There are no doctors with available time slots on the date."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows there are no available doctors and suggests the nearest date with doctors who are available."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Add a Prescription"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the prescription details, patient ID and medical history ID."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the prescription created for the associated patient ID and medical history ID."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient ID or medical history ID does not exist."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to enter a valid patient ID/medical history ID."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Edit an Existing Prescription"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the new prescription detail and prescription ID."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the new details for that prescription."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The prescription ID does not exist."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to enter a valid prescription ID."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an Existing Prescription"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the prescription ID to be deleted."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the prescription is deleted."
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The prescription ID does not exist."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to enter a valid prescription ID."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ".  Should be able to hold up to 1000 patients/doctors without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 547,
      "-": 1035,
      "Liuyy99": 42
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d docX - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "docX is for those who *prefer to use a desktop app for managing contacts*. More importantly, docX is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, docX can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your docX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add-patient`**`n/John Doe p/98765432 a/22 g/M adr/Utown College ` : adds a patient named `John Doe` to docX."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* **`delete-doctor`**`3` : deletes the 3rd doctor shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[s/SPECIALISATION]...` can be used as `{nbsp}` (i.e. 0 times), `s/acupuncture`, `s/acupuncture s/general` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding a patient: `add-patient`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds a patient to docX +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add-patient n/NAME g/GENDER [a/AGE] p/PHONE_NUMBER adr/ADDRESS`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "// [TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "// A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* `add-patient n/John Doe g/Male a/21 p/98765432 adr/Utown College 2`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* `add-patient n/Betsy Crowe g/Female p/1234567 a/32 adr/RVRC House 12`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing all patients : `list-patient`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all patients in docX. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-patient`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Editing a patient : `edit-patient`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits an existing patient in docX. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit-patient INDEX [n/NAME] [g/GENDER] [a/AGE] [p/PHONE] [adr/ADDRESS]`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Edits the patient at the specified `INDEX`. The index refers to the identification number (ID) of the patient. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-patient 1 p/91234567` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the phone number of the patient with ID of \u00271\u0027 to be `91234567`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-patient 2 n/Betsy Crower p/45678901` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the name and phone number of the patient with ID of \u00272\u0027 to be `Betsy Crower` and \u002745678901\u0027 respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Locating patient by name: `search-patient`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Search and return patient(s) whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `search-patient [NAME] [PHONE_NUMBER]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-patient John` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-patient Betsy Tim John` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns any patient having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Deleting an existing patient : `delete-patient`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the specified patient from docX. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `delete-patient INDEX`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Deletes the patient of the specified `INDEX` in docX."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index refers to the identification number (ID) of the patient."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-patient` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "`delete-patient 3` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the patient with ID of \u00273\u0027 in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `delete-patient 2` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the patient with ID of \u00272\u0027 in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding a doctor: `add-doctor`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds a doctor to docX +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-doctor n/NAME g/GENDER a/AGE p/PHONE_NUMBER s/SPECIALISATION`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* A doctor must have at least 1 specialisation."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-doctor n/John Doe g/Male a/21 p/98765432 s/`acupuncture\u0027 \u0027general\u0027`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-doctor n/Betsy Crowe g/Female p/1234567 a/32 s/\u0027general\u0027`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing all doctors : `list-doctor`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all doctors in docX. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-doctor`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Editing a doctor : `edit-doctor`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits an existing doctor in docX. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `edit-doctor INDEX [n/NAME] [g/GENDER] [a/AGE] [p/PHONE] [s/SPECIALISATION]`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Edits the doctor at the specified `INDEX`. The index refers to the identification number (ID) of the doctor. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* When editing specialisation, the existing specialisations of the doctor will be removed i.e adding of specialisation(s) is not cumulative."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* You can remove all the doctor\u0027s specialisations by typing `s/` without specifying any specialisation after it."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-doctor 1 p/91234567` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the phone number of the doctor with ID of \u00271\u0027 to be `91234567`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-doctor 2 n/Betsy Crower p/45678901` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the name and phone number of the doctor with ID of \u00272\u0027 to be `Betsy Crower` and \u002745678901\u0027 respectively."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Locating doctor by name: `search-doctor`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Finds doctor(s) whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `search-doctor NAME [PHONE_NUMBER]` or `search-doctor SPECIALISATION`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Doctors matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Each specialisation is to be quoted in quotation marks."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-doctor John` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-doctor \u0027general practitioner\u0027 \u0027acupuncture\u0027` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns any doctor having either \u0027general practitioner\u0027 or \u0027acupuncture\u0027 or both."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Deleting an existing doctor : `delete-doctor`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the specified doctor from docX. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `delete-doctor INDEX`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Deletes the doctor of the specified `INDEX`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index refers to the identification number (ID) of the doctor."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-doctor` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "`delete-doctor 1` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the doctor with ID of \u00271\u0027 in docX."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `delete-doctor 2` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the doctor with ID of \u00272\u0027 in docX."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding a medical history: `add-med-hist`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds a medical history to the patient +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-med-hist p/PATIENT_NAME [pid/PATIENT_ID] d/DOCTOR_NAME [did/DOCTOR_ID] w/SHORT_WRITEUP`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Medical history and the attending doctor will be added under the patient of `PATIENT_NAME`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Date of visit (same as entry date) will be added to the medical history."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* If there are common names (patient/doctor) found, the system will stop the information from being added and prompt the user to insert the command with the specific ID of the patient/doctor."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-med-hist p/John pid/1 d/Amy Lim w/Came down with a stomach flu, possibly due to eating expired food`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-med-hist p/John Doe did/3 d/Amy w/Had a fever with sorethroat. Sleeps late.`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing all medical history of specified patient : `list-med-hist`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all medical history of the specified patient. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-med-hist PATIENT_ID`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Editing a medical history : `edit-med-hist`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits a specified medical history of a specified patient. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `edit-med-hist pid/PATIENT_ID mhid/MED_HIST_ID [d/DATE_OF_VISIT] [w/SHORT_WRITEUP]`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Edits the medical history of the specified `MED_HIST_ID` of the specified patient `PATIENT_ID`. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `DATE_OF_VISIT` must be in the format `DDMMYYYY`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-med-hist pid/1 mhid/2 d/10022019` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the date of the medical history entry with ID of \u00272\u0027 under patient with ID of \u00271\u0027 to be `10022019`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-med-hist pid/4 mhid/1 w/Came down with a stomach flu, possibly due to eating expired canned food` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the short write up of the medical history with ID of \u00271\u0027 under patient with ID of \u00272\u0027 to be `Came down with a stomach flu, possibly due to eating expired food`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Locating medical history : `search-med-hist`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Finds medical history(ies) whose write up contain any of the given keywords. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `search-med-hist KEYWORD`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Write ups of the medical history matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Each keyword is to be quoted in quotation marks."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-med-hist \u0027flu\u0027` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns all medical history with the write up containing the keyword `flu`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-med-hist \u0027stomach flu\u0027 \u0027sorethroat\u0027` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns all medical history with the write up containing either \u0027stomach flu\u0027 or \u0027sorethroat\u0027 or both keywords."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Viewing medical history of a patient: `view-med-hist`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "View the full specified medical history of the specified patient. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `view-med-hist n/PATIENT_NAME [pid/PATIENT_ID] mhid/MED_HIST_ID`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Display the full medical history of the specified `MED_HIST_ID` of the specified patient `PATIENT_ID`. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* If there are common names of patients found, the system will stop the information from being added and prompt the user to insert the command with the specific ID of the patient."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `view-med-hist n/JOHN DOE mhid/1` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns full write up of the medical history with ID of \u00271\u0027 of the patient with name of \u0027John Doe\u0027"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `view-med-hist n/Amy pid/2 mhid/4` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns full write up of the medical history with ID of \u00274\u0027 of the patient with name of \u0027Amy\u0027 and ID of \u00272\u0027"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding an appointment: `add-appt`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds an appointment under the doctor and patient involved. +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-appt pid/PATIENT_ID did/DOCTOR_ID d/DATE_OF_APPT t/START_TIME`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Doctors are assumed to be free from 9am to 12pm and 1pm to 5pm."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Appointments are in 1-hour blocks."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Returns invalid if the doctor is not available during the specified block."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `DATE_OF_APPT` must be in the format `DDMMYYYY`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `START_TIME` must be in the 24-hour format `HH` as timing for appointment is hourly, starting from 9am."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-appt pid/1 did/1 d/25032019 t/09` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds an appointment under patient with ID of \u00271\u0027 and doctor with ID of \u00271\u0027 on 25th March 2019 at 9am."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-appt pid/3 did/2 d/25042019 t/13` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds an appointment under patient with ID of \u00273\u0027 and doctor with ID of \u00272\u0027 on 25th April 2019 at 1pm."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Completing an appointment : `complete-appt`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Complete the appointment when the patient and doctor finishes the appointment. +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `complete-appt INDEX`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Complete the appointment of the specified `INDEX`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index refers to the identification number (ID) of the appointment."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only appointments on the actual day or future dates can be completed."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `complete-appt 1` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Completes the appointment with ID of \u00271\u0027 in docX."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `complete-appt 3` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Completes the appointment with ID of \u00273\u0027 in docX."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Cancelling an appointment : `cancel-appt`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Cancel the appointment when the patient or doctor cannot attend the appointment. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `cancel-appt INDEX`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Cancel and delete the appointment of the specified `INDEX`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index refers to the identification number (ID) of the appointment."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only appointments on the actual day or future dates can be cancelled."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `cancel-appt 1` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Cancels and deletes the appointment with ID of \u00271\u0027 in docX."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `complete-appt 3` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Cancels and delete the appointment with ID of \u00273\u0027 in docX."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing appointments of a doctor : `list-appt`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all incomplete appointments of a doctor in docX within a specified time period. +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-appt did/DOCTOR_ID sd/START_DATE ed/END_DATE`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The start and end date specified are both inclusive in the search results."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Completed or cancelled appointments will not be displayed."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-appt did/3 sd/30032019 ed/30042019` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Lists all appointments of the doctor with ID of \u00273\u0027 from 30th March 2019 to 30th April 2019."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing available timings of a doctor : `list-doc-time`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all available blocks of timing of the specified doctor. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-doc-time did/DOCTOR_ID d/DATE`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `DATE` must be in the format `DDMMYYYY`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Acceptable dates include the date today and future dates."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-doc-time did/3 d/05032019` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Lists all available blocks of timing of the doctor with ID of \u00273\u0027 on 5th March 2019."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing available timings of all doctors : `list-time`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all available blocks of timings of all doctors on the specified date. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-time DATE`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `DATE` must be in the format `DDMMYYYY`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Acceptable dates include the date today and future dates."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-time 26022019` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Lists all doctors\u0027 available blocks of timing for each 1-hour time slot on 26th February 2019."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding a medicine: `add-med`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds a medicine in docX database. +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-med MEDICINE`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* A unique identification number (ID) will be generated for the new medicine."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Adding a pre-existing medicine will result in an error."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Medicines must be quoted in quotation marks."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-med \u0027coughing tablets\u0027` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds \u0027coughing syrup\u0027 into docX\u0027s available lists of medicines."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-med \u0027muscle patch\u0027` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds \u0027muscle patch\u0027 into docX\u0027s available lists of medicines."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing all medicines : `list-med`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all medicines in docX. +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-med`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding a prescription: `add-presc`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds a prescription and the prescribing doctor under the patient involved. +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-presc pid/PATIENT_ID did/DOCTOR_ID rid/MED_ID w/SHORT_WRITEUP`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Medicines can only be added based on their unique identification number (ID)."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-presc pid/1 did/1 rid/1 w/heaty cough` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds the prescribing doctor with ID of \u00271\u0027, the medicine with ID of \u00271\u0027,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "and a short write up of \u0027heaty cough\u0027 under the patient with ID of \u00271\u0027."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-presc pid/5 did/2 rid/3 w/constipation for 3 days` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds the prescribing doctor with ID of \u00272\u0027, the medicine with ID of \u00273\u0027,"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "and a short write up of \u0027constipation for 3 days\u0027 under the patient with ID of \u00275\u0027."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing all prescriptions of a patient : `list-presc`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all past prescriptions under the patient involved. +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-presc PATIENT_ID`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Display the full history of prescriptions under the specified `PATIENT_ID`. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-presc 3` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Lists all past prescriptions under the patient with ID of \u00273\u0027."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Viewing a prescription of a patient: `view-presc`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "View the full specified prescription of the specified patient. +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `view-presc pid/PATIENT_ID prescid/PRESCRIPTION_ID`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Display the full prescription of the specified `PRESCRIPTION_ID` of the specified patient `PATIENT_ID`. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `view-presc pid/2 prescid/2` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns full write up of the prescription with ID of \u00272\u0027 of the patient with ID of \u00272\u0027."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Locating prescription : `search-presc`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Finds prescription(s) whose write up contain any of the given keywords. +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `search-presc KEYWORD`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The search is case insensitive. e.g `flu` will match `Flu`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The order of the keywords does not matter. e.g. `heaty cough` will match `cough heaty`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only full words will be matched e.g. `cough` will not match `coughs`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Write ups of the prescription matching at least one keyword will be returned (i.e. `OR` search). e.g. `cough` will return `dry cough`, `heaty cough`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Each keyword is to be quoted in quotation marks."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-presc \u0027flu\u0027` +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns all prescriptions with the write up containing the keyword `flu`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-presc \u0027stomach flu\u0027 \u0027sorethroat\u0027` +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns all prescriptions with the write up containing either \u0027stomach flu\u0027 or \u0027sorethroat\u0027 or both keywords."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Clears all entries from docX. +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "docX data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "PATIENT COMMANDS"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new patient* `add-patient n/NAME g/GENDER a/AGE p/PHONE_NUMBER` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-patient n/Betsy Crowe g/Female p/1234567 a/32`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List existing patients* : `list-patient`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Delete patient* : `delete-patient INDEX` +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `delete-patient 3`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Edit an existing patient* : `edit-patient INDEX [n/NAME] [g/GENDER] [a/AGE] [p/PHONE]` +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `edit-patient 2 n/Betsy Crower p/45678901`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Locating a patient* : `search-patient NAME [PHONE_NUMBER]` +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `search-patient John`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Delete an existing patient* : `delete-patient INDEX` +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "eg. `delete-patient 2`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "DOCTOR COMMANDS"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new doctor* `add-doctor n/NAME g/GENDER a/AGE p/PHONE_NUMBER s/SPECIALISATION` +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-doctor n/John Doe g/Male a/21 p/98765432 s/`acupuncture\u0027 \u0027general\u0027`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List existing doctors* : `list-doctor`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Delete doctor* : `delete-doctor INDEX` +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `delete-doctor 3`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Edit an existing doctor* : `edit-doctor INDEX [n/NAME] [g/GENDER] [a/AGE] [p/PHONE] [s/SPECIALISATION]` +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `edit-doctor 2 n/Betsy Crower p/45678901`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Locating a doctor* : `search-patient NAME [PHONE_NUMBER]` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `search-doctor \u0027general practitioner\u0027 \u0027acupuncture\u0027`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Delete an existing doctor* : `delete-doctor INDEX` +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "eg. `delete-doctor 2`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "MEDICAL HISTORY COMMANDS"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new medical history* `add-med-hist p/PATIENT_NAME [pid/PATIENT_ID] d/DOCTOR_NAME [did/DOCTOR_ID] w/SHORT_WRITEUP` +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-med-hist p/John Doe did/3 d/Amy w/Had a fever with sorethroat. Sleeps late.`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List medical histories of a patient* : `list-med-hist PATIENT_ID`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Edit an existing medical history of a patient* : `edit-med-hist pid/PATIENT_ID mhid/MED_HIST_ID [d/DATE_OF_VISIT] [w/SHORT_WRITEUP]` +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `edit-med-hist pid/1 mhid/2 d/10022019`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Locating a medical history* : `search-med-hist KEYWORD` +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `search-med-hist \u0027flu\u0027`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *View a medical history* : `view-med-hist n/PATIENT_NAME [pid/PATIENT_ID] mhid/MED_HIST_ID` +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `view-med-hist n/JOHN DOE mhid/1`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "APPOINTMENT COMMANDS"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new appointment* `add-appt pid/PATIENT_ID did/DOCTOR_ID d/DATE_OF_APPT t/START_TIME` +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-appt pid/1 did/1 d/25032019 t/09`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Completing an appointment* : `complete-appt INDEX`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Cancelling an appointment* : `cancel-appt INDEX`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List upcoming appointments of a doctor* : `list-appt did/DOCTOR_ID sd/START_DATE ed/END_DATE`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `list-appt did/3 sd/30032019 ed/30042019`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List available timings of a doctor* : `list-doc-time did/DOCTOR_ID d/DATE`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `list-doc-time did/3 d/05032019`"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List available doctors during the specified time* : `list-time DATE`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `list-time 26022019`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "PRESCRIPTION COMMANDS"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new remedy* `add-remedy MEDICINE`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-remedy \u0027coughing tablets\u0027`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List existing remedies* : `list-remedy`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new prescription* `add-presc pid/PATIENT_ID did/DOCTOR_ID rid/REMEDY_ID w/SHORT_WRITEUP` +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-presc pid/1 did/1 rid/1 w/heaty cough`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List prescriptions of a patient* : `list-presc PATIENT_ID`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *View a prescription* : `view-presc pid/PATIENT_ID prescid/PRESCRIPTION_ID` +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `view-presc pid/2 prescid/2`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Locating a prescription* : `search-presc KEYWORD`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `search-presc \u0027stomach flu\u0027 \u0027sorethroat\u0027`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "GENERAL COMMANDS"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 440,
      "-": 204
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " * Adds a new appointment to a patient."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AddAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-appt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private Appointment appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public AddAppointmentCommand(Index index, Appointment appointment) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        throw new CommandException(\"index: \" + index + \"appointment: \" + appointment.value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand that \u003d (AddAppointmentCommand) o;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Objects.equals(index, that.index) \u0026\u0026 Objects.equals(appointment.value, that.appointment.value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDoctorCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Adds a doctor to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AddDoctorCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-doctor\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public AddDoctorCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public AddDoctorCommand(Name name, Gender gender, Age age, Phone phone, Set\u003cTag\u003e specialisation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new CommandResult(\"test\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMedHistCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WRITEUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Adds a medical history."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class AddMedHistCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-med-hist\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + \": Adds a medical history of a patient to the address book.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + PREFIX_WRITEUP + \"SHORT-WRITE-UP \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + PREFIX_WRITEUP + \"Fever\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New medical history added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEDHIST \u003d \"This medical history already exists in the address book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private final MedicalHistory toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Creates an addPatientCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public AddMedHistCommand(MedicalHistory medHist) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(medHist);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        toAdd \u003d medHist;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (model.hasMedHist(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEDHIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        model.addMedHist(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                || (other instanceof AddMedHistCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddMedHistCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Liuyy99": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " * Parses input arguments and creates a new AddAppointmentCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public AddAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Prefix remark \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                ArgumentTokenizer.tokenize(args, remark);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, remark)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return new AddAppointmentCommand(index, new Appointment(argMultimap.getValue(remark).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDoctorCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.commands.AddDoctorCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the AddDoctorCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * and returns an AddDoctorCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AddDoctorCommandParser implements Parser\u003cAddDoctorCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDoctorCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * and returns an AddDoctorCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public AddDoctorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_AGE, PREFIX_PHONE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                        PREFIX_SPECIALISATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_AGE, PREFIX_PHONE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                PREFIX_SPECIALISATION) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"error message\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Set\u003cTag\u003e specList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_SPECIALISATION));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new AddDoctorCommand(name, gender, age, phone, specList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMedHistCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WRITEUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.AddMedHistCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Parses input arguments and creates a new AddMedHistCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class AddMedHistCommandParser implements Parser\u003cAddMedHistCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public AddMedHistCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_WRITEUP);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_WRITEUP)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedHistCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patient \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        Doctor doctor \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        WriteUp writeUp \u003d ParserUtil.parseWriteUp(argMultimap.getValue(PREFIX_WRITEUP).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory medicalHistory \u003d new MedicalHistory(patient, doctor, name, writeUp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return new AddMedHistCommand(medicalHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "Liuyy99": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.commands.AddDoctorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.AddMedHistCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddPrescriptionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeletePatientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListPatientCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchPatientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @throws ParseException if the user inp"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * ut does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListPatientCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case SearchPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SearchPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeletePatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        case AddDoctorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return new AddDoctorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        case AddAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return new AddAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        case AddMedHistCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return new AddMedHistCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddPrescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 5,
      "amuletxheart": 6,
      "-": 96,
      "Liuyy99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"adr/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Prefix PREFIX_SPECIALISATION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final Prefix PREFIX_WRITEUP \u003d new Prefix(\"sw/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 1,
      "-": 17,
      "Liuyy99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.prescription.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Age parseAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String description} into a {@code description}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(description)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Parses a {@code String writeUp} into a {@code WriteUp}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * @throws ParseException if the given {@code writeUp} is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static WriteUp parseWriteUp(String writeUp) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(writeUp);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        String trimmedName \u003d writeUp.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return new WriteUp(trimmedName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 171,
      "Liuyy99": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.UniqueMedHistList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.UniqueDoctorList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePatientList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final UniqueDoctorList doctors;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private final UniqueMedHistList medHists;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        doctors \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        medHists \u003d new UniqueMedHistList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Replaces the contents of the medical history list with {@code medHists}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * {@code medHists} must not contain duplicate medical histories."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void setMedHists(List\u003cMedicalHistory\u003e medHists) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.medHists.setMedHists(medHists);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setPatients(newData.getPatientList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        setMedHists(newData.getMedHistList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a patient to the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The patient must not already exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Adds a doctor to the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * The doctor must not already exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void addDoctor(Doctor d) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        doctors.add(d);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * as another existing patient in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    //// medical history-level operations"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if a medical history with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean hasMedHist(MedicalHistory medHist) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(medHist);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return medHists.contains(medHist);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Adds a medical history to the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * The medical history must not already exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void addMedHist(MedicalHistory medHist) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        medHists.add(medHist);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Replaces the given medical history {@code target} in the list with {@code editedMedHist}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * The medical history identity of {@code editedMedHist} must not be the same as another existing medical history"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void setMedHist(MedicalHistory target, MedicalHistory editedMedHist) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(editedMedHist);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        medHists.setMedHist(target, editedMedHist);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void removeMedHist(MedicalHistory key) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        medHists.remove(key);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public ObservableList\u003cMedicalHistory\u003e getMedHistList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return medHists.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 patients.equals(((AddressBook) other).patients)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 medHists.equals(((AddressBook) other).medHists));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 7,
      "-": 170,
      "Liuyy99": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The patient must exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code patient} must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a medical history with the same identity as {@code patient} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    boolean hasMedHist(MedicalHistory medicalHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Adds the given medical history."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * {@code medical history} must not already exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    void addMedHist(MedicalHistory medicalHistory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * as another existing patient in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered patient list */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected patient in the filtered patient list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no patient is selected."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPatient\u003e selectedPatientProperty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected patient in the filtered patient list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no patient is selected."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    Patient getSelectedPatient();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected patient in the filtered patient list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPatient(Patient patient);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "Liuyy99": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPatient\u003e selectedPatient \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPatientList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPatients.addListener(this::ensureSelectedPatientIsValid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPatient(patient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePatient(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPatient(patient);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    // Needed to be implemented later"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean hasMedHist(MedicalHistory medicalHistory) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    // Needed to be implemented later"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void addMedHist(MedicalHistory medicalHistory) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected patient \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPatient\u003e selectedPatientProperty() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPatient;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public Patient getSelectedPatient() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPatient.getValue();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPatient(Patient patient) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patient !\u003d null \u0026\u0026 !filteredPatients.contains(patient)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPatient.setValue(patient);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPatient} is a valid patient in {@code filteredPatients}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPatientIsValid(ListChangeListener.Change\u003c? extends Patient\u003e change) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPatient.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected patient, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPatientReplaced \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                    change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPatient.getValue());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPatientReplaced) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPatient to its new value."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPatient.getValue());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPatient.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPatientRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPatient -\u003e selectedPatient.getValue().isSamePatient(removedPatient));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPatientRemoved) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the patient that came before it in the list,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such patient."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPatient.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPatient.get(), other.selectedPatient.get());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 243,
      "Liuyy99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns an unmodifiable view of the medical histories list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    ObservableList\u003cMedicalHistory\u003e getMedHistList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Liuyy99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " * Represents an Appointment made by a patient."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointments can only be made in the future\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Constructs an {@code Appointment}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * @param appointment A valid appointment."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public Appointment(String appointment) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        checkArgument(isValidAppointment(appointment), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        value \u003d appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Returns true if a given string is a valid appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public static boolean isValidAppointment(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return !test.trim().isEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Appointment that \u003d (Appointment) o;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Objects.equals(value, that.value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicalhistory/MedicalHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Represents a Medical History in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class MedicalHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private Doctor doctor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private WriteUp writeUp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    //Constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public MedicalHistory(Patient patient, Doctor doctor, Name name, WriteUp writeUp) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // Doctor, Time, MedicalHistory Id are needed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.writeUp \u003d writeUp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return this.patient;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public Doctor getDoctor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return this.doctor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public WriteUp getWriteUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return this.writeUp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if both persons of the same name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * have at least one other identity field (phone number) that is the same."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean isSameMedHist(MedicalHistory otherMedHist) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (otherMedHist \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return otherMedHist !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 otherMedHist.getName().equals(getName())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 (otherMedHist.getWriteUp().equals(getWriteUp()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if both medicalHistory have the same identity and data fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * This defines a stronger notion of equality between two medicalHistory."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!(other instanceof MedicalHistory)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory otherMedHist \u003d (MedicalHistory) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return otherMedHist.getName().equals(getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 otherMedHist.getWriteUp().equals(getWriteUp());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return Objects.hash(patient, name, writeUp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                .append(\" WriteUp: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                .append(getWriteUp());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Liuyy99": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicalhistory/UniqueMedHistList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.exceptions.DuplicateMedHistException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.exceptions.MedHistNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * A list of medical histories that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * A medical history is considered unique by comparing using {@code MedicalHistory#isSameMedHist(MedHist)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * As such, adding and updating of medical histories uses MedicalHistory#isSameMedHist(MedHist) for equality so as to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * ensure that the medical history being added or updated is unique in terms of identity in the UniqueMedHistList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * However, the removal of a medical history uses MedicalHistory#equals(Object) so as to ensure that the medical history"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * with exactly the same fields will be removed. Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * @see MedicalHistory#isSameMedHist(MedicalHistory)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class UniqueMedHistList implements Iterable\u003cMedicalHistory\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private final ObservableList\u003cMedicalHistory\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private final ObservableList\u003cMedicalHistory\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if the list contains an equivalent medical history as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean contains(MedicalHistory toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMedHist);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Adds a medical history to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * The medical history must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void add(MedicalHistory toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new DuplicateMedHistException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Replaces the medical history {@code target} in the list with {@code editedMedHist}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * The medical history identity of {@code editedMedHist} must not be the same as another existing medical history"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void setMedHist(MedicalHistory target, MedicalHistory editedMedHist) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireAllNonNull(target, editedMedHist);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new MedHistNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!target.isSameMedHist(editedMedHist) \u0026\u0026 contains(editedMedHist)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new DuplicateMedHistException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        internalList.set(index, editedMedHist);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Removes the equivalent medical history from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * The medical history must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void remove(MedicalHistory toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new MedHistNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void setMedHists(UniqueMedHistList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Replaces the contents of this list with {@code medHists}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * {@code medHists} must not contain duplicate medical histories."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void setMedHists(List\u003cMedicalHistory\u003e medHists) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireAllNonNull(medHists);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!medHistsAreUnique(medHists)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new DuplicateMedHistException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        internalList.setAll(medHists);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public ObservableList\u003cMedicalHistory\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public Iterator\u003cMedicalHistory\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                || (other instanceof UniqueMedHistList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueMedHistList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if {@code medHists} contains only unique medHists."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private boolean medHistsAreUnique(List\u003cMedicalHistory\u003e medHists) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        for (int i \u003d 0; i \u003c medHists.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c medHists.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                if (medHists.get(i).isSameMedHist(medHists.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicalhistory/WriteUp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Represents write up of a medical history in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWriteUp(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class WriteUp {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            \"Write up should be a short description\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    //public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * @param writeUp A valid write up."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public WriteUp(String writeUp) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(writeUp);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        checkArgument(isValidWriteUp(writeUp), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        value \u003d writeUp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if a given string is a valid write up."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static boolean isValidWriteUp(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return true; //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                || (other instanceof WriteUp // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 value.equals(((WriteUp) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Liuyy99": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicalhistory/exceptions/DuplicateMedHistException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.model.medicalhistory.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Signals that the operation will result in duplicate MedicalHistory."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class DuplicateMedHistException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public DuplicateMedHistException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        super(\"Operation would result in duplicate medical histories\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicalhistory/exceptions/MedHistNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.model.medicalhistory.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Signals that the operation is unable to find the specified medical history."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class MedHistNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/* @@author wayneswq */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * Represents a Person\u0027s age in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            \"Age should only contain numbers, and it should be at most 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,3}\"; // 0-999"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * @param age A valid age number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        value \u003d age;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Returns true if a given string is a valid age number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 value.equals(((Age) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wayneswq": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Doctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Represents a Doctor in docX."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class Doctor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Set\u003cSpecialisation\u003e specList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Doctor(Name name, Phone phone, Gender gender, Age age, Set\u003cSpecialisation\u003e specList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.specList.addAll(specList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this.phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this.gender;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns an immutable specialisation set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Set\u003cSpecialisation\u003e getSpecs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return Collections.unmodifiableSet(specList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if both doctors of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * This defines a weaker notion of equality between two doctors."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean isSameDoctor(Doctor otherDoctor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (otherDoctor \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return otherDoctor !\u003d null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getName().equals(getName())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 (otherDoctor.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if both doctors have the same identity and data fields."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * This defines a stronger notion of equality between two doctors."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!(other instanceof Doctor)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Doctor otherDoctor \u003d (Doctor) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return otherDoctor.getName().equals(getName())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getAge().equals(getAge())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getGender().equals(getGender())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getSpecs().equals(getSpecs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return Objects.hash(name, phone, age, gender, specList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(getAge())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(\" Specialisations: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        getSpecs().forEach(builder::append);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/* @@author wayneswq */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * Represents a Person\u0027s gender in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            \"Gender should only contain 1 character, and it should only be m/f/M/F\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[mfMF]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * @param gender A valid gender string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        value \u003d gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Returns true if a given string is a valid gender number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wayneswq": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Patient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/* @@author wayneswq */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * Represents a Patient in docX record."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Patient(Name name, Gender gender, Age age, Phone phone, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireAllNonNull(name, gender, age, phone, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Returns true if both patients are of the same name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * and their phone number are the same."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 (otherPatient.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 otherPatient.getGender().equals(getGender())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 otherPatient.getAge().equals(getAge())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 otherPatient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 otherPatient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return Objects.hash(name, gender, age, phone, address, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(getAge())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wayneswq": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PatientNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/* @@author wayneswq */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "public class PatientNameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public PatientNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                || (other instanceof PatientNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 keywords.equals(((PatientNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wayneswq": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private static int idCounter \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private final List\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        this.id \u003d idCounter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        this.idCounter +\u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public List\u003cAppointment\u003e getAppointments() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return this.appointments;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 16,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueDoctorList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import javax.print.Doc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * @see Doctor#isSameDoctor(Doctor)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class UniqueDoctorList implements Iterable\u003cDoctor\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final ObservableList\u003cDoctor\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final ObservableList\u003cDoctor\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if the list contains an equivalent doctor as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean contains(Doctor toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDoctor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Adds a doctor to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * The doctor must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void add(Doctor toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Replaces the doctor {@code target} in the list with {@code editedDoctor}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * The doctor identity of {@code editedDoctor} must not be the same as another existing doctor in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void setDoctor(Doctor target, Doctor editedDoctor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        requireAllNonNull(target, editedDoctor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!target.isSameDoctor(editedDoctor) \u0026\u0026 contains(editedDoctor)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        internalList.set(index, editedDoctor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Removes the equivalent doctor from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * The doctor must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void remove(Doctor toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void setDoctors(UniqueDoctorList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Replaces the contents of this list with {@code doctors}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * {@code doctors} must not contain duplicate doctors."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void setDoctors(List\u003cDoctor\u003e doctors) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        requireAllNonNull(doctors);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!doctorsAreUnique(doctors)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        internalList.setAll(doctors);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public ObservableList\u003cDoctor\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Iterator\u003cDoctor\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                || (other instanceof UniqueDoctorList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueDoctorList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if {@code doctors} contains only unique doctors."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private boolean doctorsAreUnique(List\u003cDoctor\u003e doctors) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        for (int i \u003d 0; i \u003c doctors.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            for (int j \u003d i + 1; j \u003c doctors.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                if (doctors.get(i).isSameDoctor(doctors.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePatientList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/* @@author wayneswq */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "import seedu.address.model.person.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wayneswq"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        requireAllNonNull(patients);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wayneswq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wayneswq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wayneswq": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Specialisation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Represents a Specialisation of a doctor in docX."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidSpecialisation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class Specialisation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Specialisations should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public final String specialisation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Constructs a {@code Specialisation}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @param specialisation A valid specialisation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Specialisation(String specialisation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        requireNonNull(specialisation);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        checkArgument(isValidSpecialisation(specialisation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.specialisation \u003d specialisation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if a given string is a valid specialisation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static boolean isValidSpecialisation(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                || (other instanceof Specialisation // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 specialisation.equals(((Specialisation) other).specialisation)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return specialisation.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return \u0027[\u0027 + specialisation + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Contains utility methods for populating {@code docX} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Patient[] getSamplePatients() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Gender(\"M\"), new Age(\"25\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"Bernice Yu\"), new Gender(\"F\"), new Age(\"7\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Gender(\"F\"), new Age(\"101\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Gender(\"M\"), new Age(\"28\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"Irfan Ibrahim\"), new Gender(\"M\"), new Age(\"60\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"Roy Balakrishnan\"), new Gender(\"M\"), new Age(\"110\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static Doctor[] getSampleDoctors() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new Doctor[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Doctor(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Gender(\"M\"), new Age(\"21\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                    getSpecSet(\"acupuncture\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            new Doctor(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Gender(\"F\"), new Age(\"32\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                    getSpecSet(\"acupuncture, general\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            new Doctor(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Gender(\"F\"), new Age(\"41\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                    getSpecSet(\"massage\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            new Doctor(new Name(\"David Li\"), new Phone(\"91031282\"), new Gender(\"M\"), new Age(\"43\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                    getSpecSet(\"massage, acupuncture\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            new Doctor(new Name(\"Ivan Teo\"), new Phone(\"92492021\"), new Gender(\"M\"), new Age(\"37\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                    getSpecSet(\"acupuncture\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            new Doctor(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Gender(\"M\"), new Age(\"28\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                    getSpecSet(\"general\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Patient samplePatient : getSamplePatients()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static Set\u003cSpecialisation\u003e getSpecSet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .map(Specialisation::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public static List\u003cAppointment\u003e getAppointments(String... strings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                .map(Appointment::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 25,
      "amuletxheart": 7,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAppointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " * Jackson-friendly version of {@link Appointment}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "class JsonAdaptedAppointment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private final String appointmentName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Constructs a {@code JsonAdaptedAppointment} with the given {@code appointmentName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public JsonAdaptedAppointment(String appointmentName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        this.appointmentName \u003d appointmentName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Converts a given {@code Appointment} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public JsonAdaptedAppointment(Appointment source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        appointmentName \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public String getAppointmentName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return appointmentName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public Appointment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        /*if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return new Appointment(this.appointmentName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDoctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Jackson-friendly version of {@link Doctor}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "class JsonAdaptedDoctor {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Doctor\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final String age;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final List\u003cJsonAdaptedSpecialisation\u003e specs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Constructs a {@code JsonAdaptedDoctor} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public JsonAdaptedDoctor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                             @JsonProperty(\"email\") String gender, @JsonProperty(\"address\") String age,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedSpecialisation\u003e specs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (specs !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            this.specs.addAll(specs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Converts a given {@code Doctor} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public JsonAdaptedDoctor(Doctor source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        age \u003d source.getAge().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        specs.addAll(source.getSpecs().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .map(JsonAdaptedSpecialisation::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Doctor} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted doctor."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Doctor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        final List\u003cSpecialisation\u003e doctorSpecs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        for (JsonAdaptedSpecialisation spec : specs) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            doctorSpecs.add(spec.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        final Set\u003cSpecialisation\u003e modelSpecs \u003d new HashSet\u003c\u003e(doctorSpecs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new Doctor(modelName, modelPhone, modelGender, modelAge, modelSpecs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMedicalHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Jackson-friendly version of {@link MedicalHistory}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class JsonAdaptedMedicalHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private final String writeUp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Constructs a {@code JsonAdaptedMedicalHistory} with the given medical history details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public JsonAdaptedMedicalHistory(@JsonProperty(\"name\") String name, @JsonProperty(\"writeUp\") String writeUp) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.writeUp \u003d writeUp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Converts a given {@code MedicalHistory} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public JsonAdaptedMedicalHistory(MedicalHistory source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        writeUp \u003d source.getWriteUp().value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Converts this Jackson-friendly adapted medical history object into the model\u0027s {@code MedicalHistory} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted medical history."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public MedicalHistory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        final Name modelName \u003d new Name(this.name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        final WriteUp modelWriteUp \u003d new WriteUp(this.writeUp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return new MedicalHistory(null, null, modelName, modelWriteUp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSpecialisation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Jackson-friendly version of {@link Specialisation}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "class JsonAdaptedSpecialisation {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final String spec;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Constructs a {@code JsonAdaptedSpecialisation} with the given {@code spec}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public JsonAdaptedSpecialisation(String spec) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.spec \u003d spec;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Converts a given {@code Specialisation} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public JsonAdaptedSpecialisation(Specialisation source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        spec \u003d source.specialisation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String getSpec() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return spec;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Specialisation} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted specialisation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Specialisation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!Specialisation.isValidSpecialisation(spec)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new IllegalValueException(Specialisation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new Specialisation(spec);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "//import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEDHIST \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            \"Medical history list contains duplicate medical history(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private final List\u003cJsonAdaptedMedicalHistory\u003e medicalHistories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given patients."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //this.medicalHistories.addAll(medicalHistories);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //medicalHistories.addAll(source.getMedHistList().stream().map(JsonAdaptedMedicalHistory::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPatient(patient)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPatient(patient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedMedicalHistory jsonAdaptedMedicalHistory : medicalHistories) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            MedicalHistory medicalHistory \u003d jsonAdaptedMedicalHistory.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            if (addressBook.hasMedHist(medicalHistory)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEDHIST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            addressBook.addMedHist(medicalHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "Liuyy99": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DoctorCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * An UI component that displays information of a {@code Doctor}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class DoctorCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static final String FXML \u003d \"DoctorListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public final Doctor doctor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private FlowPane specialisations;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Label addAppointment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorCard(Doctor doctor, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        name.setText(doctor.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        gender.setText(doctor.getGender().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        age.setText(doctor.getAge().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        phone.setText(doctor.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        addAppointment.setText(\"addAppointment\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        doctor.getSpecs().forEach(spec -\u003e specialisations.getChildren().add(new Label(spec.specialisation)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!(other instanceof DoctorCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        DoctorCard card \u003d (DoctorCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 doctor.equals(card.doctor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MedHistCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * An UI component that displays information of a {@code MedicalHistory}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class MedHistCard {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private Label addAppointment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        person.getAppointments().forEach(appointment -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            sb.append(appointment.value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        addAppointment.setText(sb.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 9,
      "-": 70
    }
  },
  {
    "path": "src/main/resources/view/DoctorListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"specialisations\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "      \u003cLabel fx:id\u003d\"addAppointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$addAppointment\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 36
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "      \u003cLabel fx:id\u003d\"addAppointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$addAppointment\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DoctorCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Provides a handle to a doctor card in the doctor list panel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class DoctorCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static final String AGE_FIELD_ID \u003d \"#age\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static final String GENDER_FIELD_ID \u003d \"#gender\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static final String SPECS_FIELD_ID \u003d \"#specialisations\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Label ageLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Label genderLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final List\u003cLabel\u003e specsLabels;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        ageLabel \u003d getChildNode(AGE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        genderLabel \u003d getChildNode(GENDER_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Region tagsContainer \u003d getChildNode(SPECS_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        specsLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String getAge() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return ageLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return genderLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public List\u003cString\u003e getSpecialisations() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return specsLabels"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if this handle contains {@code doctor}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Doctor doctor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return getName().equals(doctor.getName().fullName)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 getAge().equals(doctor.getAge().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 getPhone().equals(doctor.getPhone().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 getGender().equals(doctor.getGender().value)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getSpecialisations()).equals(ImmutableMultiset"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                        .copyOf(doctor.getSpecs().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                        .map(specialisation -\u003e specialisation.specialisation)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AddAppointmentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void testThrowException() throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        new AddAppointmentCommand(Index.fromOneBased(1), new Appointment(\"test\")).execute(null, commandHistory);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command1 \u003d new AddAppointmentCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                new Appointment(\"appointment1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command2 \u003d new AddAppointmentCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                new Appointment(\"appointment2\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(command1.equals(command1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command1Copy \u003d new AddAppointmentCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                new Appointment(\"appointment1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(command1.equals(command1Copy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(command1.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(command1.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(command1.equals(command2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // Needed to be implemented later"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        public boolean hasMedHist(MedicalHistory medicalHistory) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // Needed to be implemented later"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        public void addMedHist(MedicalHistory medicalHistory) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "-": 261,
      "Liuyy99": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDoctorCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AddDoctorCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Tests the add-doctor command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @return Exception as of now."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static Exception execute() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new Exception();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMedHistCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "//import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "//import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class AddMedHistCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void testThrowException() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        new AddMedHistCommand(new MedicalHistory(null, null, new Name(\"t\"), new WriteUp(\"t\")))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                .execute(null, commandHistory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PatientNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // for add-doctor testing (initial addition of add-doctor)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_NAME_JOHN \u003d \"John Doe\u0026\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_GENDER_JOHN \u003d \"M\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_AGE_JOHN \u003d \"21\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_PHONE_JOHN \u003d \"99999999\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_SPECIALISATION_ACUPUNCTURE \u003d \"acupuncture\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_SPECIALISATION_MASSAGE \u003d \"massage\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String NAME_DESC_JOHN \u003d \" \" + PREFIX_NAME + VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String GENDER_DESC_JOHN \u003d \" \" + PREFIX_GENDER + VALID_GENDER_JOHN;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String AGE_DESC_JOHN \u003d \" \" + PREFIX_AGE + VALID_AGE_JOHN;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String PHONE_DESC_JOHN \u003d \" \" + PREFIX_PHONE + VALID_PHONE_JOHN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String SPECIALISATION_DESC_ACUPUNCTURE \u003d \" \" + PREFIX_SPECIALISATION"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            + VALID_SPECIALISATION_ACUPUNCTURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String SPECIALISATION_DESC_MASSAGE \u003d \" \" + PREFIX_SPECIALISATION"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            + VALID_SPECIALISATION_MASSAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // end of add-doctor testing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"F\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"M\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_AGE_AMY \u003d \"7\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_AGE_BOB \u003d \"25\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"94351253\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"boy\"; // either M or F"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"12yo\"; // \u0027yo\u0027 not allowed in age"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditPatientCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditPatientCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withAge(VALID_AGE_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered patient list and selected patient in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient expectedSelectedPatient \u003d actualModel.getSelectedPatient();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPatient, actualModel.getSelectedPatient());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPatientList(new PatientNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first patient in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPatient(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePatient(firstPatient);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 21,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddAppointmentCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AddAppointmentCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command \u003d new AddAppointmentCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                new Appointment(\"appointment1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertParseSuccess(parser, \"1 r/appointment1\", command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertParseFailure(parser, \"1 appointment1\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // index missing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertParseFailure(parser, \"-1 r/appointment1\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddDoctorCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_JOHN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOHN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_JOHN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.SPECIALISATION_DESC_ACUPUNCTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import seedu.address.logic.commands.AddDoctorCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AddDoctorCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    private AddDoctorCommandParser parser \u003d new AddDoctorCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_JOHN + GENDER_DESC_JOHN + AGE_DESC_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//                + SPECIALISATION_DESC_ACUPUNCTURE, new AddDoctorCommand());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_JOHN + GENDER_DESC_JOHN + AGE_DESC_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//                + SPECIALISATION_DESC_ACUPUNCTURE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddMedHistCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.AddMedHistCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class AddMedHistCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private AddMedHistCommandParser parser \u003d new AddMedHistCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        AddMedHistCommand command \u003d new AddMedHistCommand("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                new MedicalHistory(null, null, new Name(\"testName\"), new WriteUp(\"testWriteUp\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertParseSuccess(parser, \" n/testName sw/testWriteUp\", command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.commands.AddDoctorCommandTest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.AddMedHistCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeletePatientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListPatientCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchPatientCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PatientNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void parseCommand_addDoctor() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        AddDoctorCommandTest.execute();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void parseCommand_addAppointment() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command \u003d (AddAppointmentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                AddAppointmentCommand.COMMAND_WORD + \" 1 r/ appointment1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(command instanceof AddAppointmentCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertEquals(new AddAppointmentCommand(Index.fromOneBased(1), new Appointment(\"appointment1\")), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void parseCommand_addMedHist() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        AddMedHistCommand command \u003d (AddMedHistCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                AddMedHistCommand.COMMAND_WORD + \" \" + \"n/testName sw/testWriteUp\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(command instanceof AddMedHistCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertEquals(command, new AddMedHistCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                new MedicalHistory(null, null, new Name(\"testName\"), new WriteUp(\"testWriteUp\"))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PatientUtil.getAddPatientCommand(patient));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddPatientCommand(patient), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeletePatientCommand command \u003d (DeletePatientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                DeletePatientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeletePatientCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(EditPatientCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditPatientCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        SearchPatientCommand command \u003d (SearchPatientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                SearchPatientCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SearchPatientCommand(new PatientNameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD) instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD + \" 3\") instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 6,
      "amuletxheart": 12,
      "-": 143,
      "Liuyy99": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPatientList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPatients);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePatientException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPatient(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPatient_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPatient_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPatient_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPatientList().remove(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        private final ObservableList\u003cMedicalHistory\u003e medHists \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        public ObservableList\u003cMedicalHistory\u003e getMedHistList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return medHists;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 146,
      "Liuyy99": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Appointment(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        String invalidAppointment \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Appointment(invalidAppointment));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void isValidAppointment() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Appointment.isValidAppointment(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(Appointment.isValidAppointment(\"appointment1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Appointment appointment1 \u003d new Appointment(\"appointment1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Appointment appointment2 \u003d new Appointment(\"appointment2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Appointment appointment1Copy \u003d new Appointment(\"appointment1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(appointment1.equals(appointment1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(appointment1.equals(appointment1Copy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(appointment1.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(appointment1.equals(appointment2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicalhistory/MedicalHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class MedicalHistoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory mh1 \u003d new MedicalHistory(null, null, new Name(\"a\"), new WriteUp(\"fever\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory mh2 \u003d new MedicalHistory(null, null, new Name(\"a\"), new WriteUp(\"sneeze\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory mh3 \u003d new MedicalHistory(null, null, new Name(\"b\"), new WriteUp(\"fever\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory mh1Copy \u003d new MedicalHistory(null, null, new Name(\"a\"), new WriteUp(\"fever\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(mh1.equals(mh1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(mh1.equals(mh1Copy));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(mh1.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(mh1.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // different writeup -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(mh1.equals(mh2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(mh1.equals(mh3));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicalhistory/WriteUpTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class WriteUpTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        WriteUp writeUp1 \u003d new WriteUp(\"test1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        WriteUp writeUp2 \u003d new WriteUp(\"test1\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        WriteUp writeUp3 \u003d new WriteUp(\"test2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(writeUp1.equals(writeUp1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(writeUp1.equals(writeUp2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(writeUp1.equals(writeUp3));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AgeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        String invalidAge \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // null age"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // invalid ages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // valid ages"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Age.isValidAge(\"55\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Age.isValidAge(\"2\")); // one digit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Age.isValidAge(\"123\")); // three digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 36,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        String invalidGender \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // invalid genders"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\"hi\")); // text other than \"f\" or \"m\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\"femal\")); // text other than \"f\" or \"m\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\"happy\")); // text other than \"f\" or \"m\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\"p\")); // text other than \"f\" or \"m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // valid genders"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Gender.isValidGender(\"F\")); // upper case"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Gender.isValidGender(\"f\")); // lower case"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Gender.isValidGender(\"m\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/SpecialisationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class SpecialisationTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Specialisation(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_invalidSpecialisation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        String invalidSpecialisationName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidSpecialisationName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void isValidSpecialisation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // null specialisation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Specialisation.isValidSpecialisation(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DoctorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * A utility class to help with building Doctor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class DoctorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"F\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"23\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private Set\u003cSpecialisation\u003e specialisations;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private List\u003cAppointment\u003e appointments;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        specialisations \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Initializes the DoctorBuilder with the data of {@code doctorToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorBuilder(Doctor doctorToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        name \u003d doctorToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        phone \u003d doctorToCopy.getPhone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        gender \u003d doctorToCopy.getGender();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        age \u003d doctorToCopy.getAge();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        specialisations \u003d new HashSet\u003c\u003e(doctorToCopy.getSpecs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Sets the {@code Name} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Parses the {@code specialisations} into a {@code Set\u003cSpecialisation\u003e}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * and set it to the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorBuilder withSpecs(String ... specs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.specialisations \u003d SampleDataUtil.getSpecSet(specs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Sets the {@code Age} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorBuilder withAge(String age) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Sets the {@code Phone} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Sets the {@code Gender} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public DoctorBuilder withAppointments(String ... appointments) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.appointments \u003d SampleDataUtil.getAppointments(appointments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Doctor build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new Doctor(name, phone, gender, age, specialisations);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *//*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private List\u003cAppointment\u003e appointments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public PersonBuilder withAppointments(String ... appointments) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        this.appointments \u003d SampleDataUtil.getAppointments(appointments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 13,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDoctors.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_JOHN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_JOHN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIALISATION_ACUPUNCTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIALISATION_MASSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import javax.print.Doc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Doctor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * A utility class containing a list of {@code Doctor} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class TypicalDoctors {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor ALICE \u003d new DoctorBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withAge(\"23\").withGender(\"F\").withPhone(\"94351253\").withSpecs(\"general\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor BENSON \u003d new DoctorBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withAge(\"31\").withGender(\"M\").withPhone(\"98765432\").withSpecs(\"general\", \"acupuncture\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor CARL \u003d new DoctorBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withGender(\"M\").withAge(\"33\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor DANIEL \u003d new DoctorBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withGender(\"M\").withAge(\"59\").withSpecs(\"massage\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor ELLE \u003d new DoctorBuilder().withName(\"Elle Meyer\").withPhone(\"94822241\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withGender(\"F\").withAge(\"44\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor FIONA \u003d new DoctorBuilder().withName(\"Fiona Kunz\").withPhone(\"94824271\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withGender(\"F\").withAge(\"34\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor GEORGE \u003d new DoctorBuilder().withName(\"George Best\").withPhone(\"94824421\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withGender(\"F\").withAge(\"41\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor HOON \u003d new DoctorBuilder().withName(\"Hoon Meier\").withPhone(\"84824241\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withGender(\"M\").withAge(\"38\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor IDA \u003d new DoctorBuilder().withName(\"Ida Mueller\").withPhone(\"84821311\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withGender(\"F\").withAge(\"28\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // Manually added - Doctor\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Doctor JOHN \u003d new DoctorBuilder().withName(VALID_NAME_JOHN).withPhone(VALID_PHONE_JOHN)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withGender(VALID_GENDER_JOHN).withAge(VALID_AGE_JOHN)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            .withSpecs(VALID_SPECIALISATION_ACUPUNCTURE, VALID_SPECIALISATION_MASSAGE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private TypicalDoctors() {} // prevents instantiation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns an {@code docX} with all the typical doctors."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        for (Doctor doctor : getTypicalDoctors()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            ab.addDoctor(doctor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static List\u003cDoctor\u003e getTypicalDoctors() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 68
    }
  }
]
