[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d docX"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://travis-ci.org/cs2103-ay1819s2-w13-1/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/cs2103-ay1819s2-w13-1/main\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/wayneswq/main/branch/master[image:https://ci.appveyor.com/api/projects/status/yulbp51x3qkkyrlu/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w13-1/main/badge.svg?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://app.netlify.com/sites/cs2103-ay1819s2-w13-1/deploys[image:https://api.netlify.com/api/v1/badges/affc1f29-4e36-4d55-8249-d91b9f0fc02f/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "* This is a desktop clinic management application designed for receptionists in clinic. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Nowadays many clinic receptionists are still using pen and paper to track patients\u0027 information, which can be quite troublesome if the number of patients is large. Our patient management application is designed specifically to make this process much easier for them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* The features we provide include:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Record all patients coming to the clinic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Record all doctors in clinic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Record medical histories of patients"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Make appointments for patients"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "** Record all medicines in the clinic and record prescriptions given by doctors"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* The original source of the code comes from AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "Liuyy99": 6
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 1,
      "-": 237
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "We are a team of software engineers from http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. Our application is based upon \"AddressBook - Level 4\", developed by the https://se-edu.github.io/docs/Team.html[se-edu] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Yong Xin Shen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::amuletxheart.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[https://github.com/amuletxheart[github]]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Team lead"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Ong Si Ying"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::siyingpoof.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[http://github.com/siyingpoof[github]]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Documentation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Liu Yiyang"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::liuyy99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[http://github.com/Liuyy99[github]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Testing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Seah Wei Quan"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::wayneswq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[http://github.com/wayneswq[github]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Code quality"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Gong Changda"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "image::gongchangda.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "{empty}[http://github.com/GongChangda[github]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Role: Deliverables and deadlines"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 21,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* *Email us* : You can also reach us at `xinshen [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d docX - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "By: `Team SE-EDU and AY1819S2 W13-1`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* receptionist in a small to medium sized clinic"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* has a need to manage a significant number of patients and doctors"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Value proposition*: manage patients and doctors faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |add a new patient/doctor |"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |list all existing patient/doctor |"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |edit an existing patient/doctor |"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |search all existing patient/doctor |locate details of patients/doctors without having to go through the entire list"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |add a new medical history to a patient |"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |list all existing medical history of a patient |"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |edit an existing medical history of a patient |"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |view an existing medical history of a patient |"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |search for an existing medical history of a patient |"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |add appointment |"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |complete appointment |the appointment has elapsed, mark as completed or missed"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* * *` |user |cancel appointment | the appointment has been cancelled"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |list all appointments of a doctor |"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |list available timings of a doctor |"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |list available appointments of all doctors |"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |add a new prescription |"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |edit an existing prescription |"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |delete an existing prescription |"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "|`* *` |user |list entered commands |list a history of previously entered commands"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "(For all use cases below, the *System* is the `docX` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Add Patient/Doctor"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User adds a new patient/doctor."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows details of the new patient/doctor added."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient/doctor to be added is in the wrong format."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message, prompting user to re-enter the data."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Existing Patients/Doctors"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User requests to list all existing patients/doctors."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows a list of patients/doctors."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 2a. There are no existing patients/doctors."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 2a1. docX shows an empty list."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Edit an Existing Patient/Doctor"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User enters the new details for a patient/doctor with the given ID."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows a success message and the new details of the patient/doctor."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The given ID for a patient/doctor is not found."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts for a valid ID."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The new details is in an invalid format."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX prompts user to re-enter the details."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Search All Existing Patient/Doctor"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User searches for patients using name or phone number."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows a list of patients/doctors with the name or phone number."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The search terms are in an invalid format."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts users to re-enter the search terms."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 2a. There are no patients/doctors that match the given search terms."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 2a1. docX shows an empty list."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an Existing Patient/Doctor"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the patient/doctor ID to be deleted."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the patient/doctor is deleted."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient/doctor ID does not exist."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to enter a valid patient/doctor ID."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Add New Medical History to Patient"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1.  User add a new medical history entry to a patient ID."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2.  docX shows the details of the new medical history entry added."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The medical history is in the wrong format."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts users to re-enter the medical history."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The given patient ID does not exist."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and prompts for a valid patient ID."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Existing Medical History of a Patient"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User requests to list all existing medical history of a given patient ID."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows all the medical history entries belonging to the patient ID."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient ID does not exist."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts user to re-enter patient ID."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The patient does not have any medical history."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows the patient does not have any medical history."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Edit An Existing Medical History of a Patient"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enter the new details for a medical history entry, given a medical history ID and patient ID."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows a success message and the new details for the medical history."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The new details is not in a valid format."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts user to re-enter details."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The medical history ID for the given patient ID does not exist."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and prompts user to enter a valid medical history ID."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1c. The patient ID does not exist."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1c1. docX shows an error message and prompts user to enter a valid patient ID."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: View An Existing Medical History of a Patient"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the medical history ID and the patient ID."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the full details of the medical history."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The medical history ID is not valid for the given patient ID."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and prompts user to re-enter the medical history ID."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The patient ID does not exist."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and prompts user to enter a valid patient ID."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Search All Existing Medical History of a Patient"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the search terms and the patient ID."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows medical history entries belonging to the particular patient ID whose write up contains the matching search terms."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. There are no medical history whose write up matches the search terms for the patient ID."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an empty search result."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The patient ID does not exist."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and prompts user to enter a valid patient ID."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Add Appointment"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the patient ID, doctor ID and start and end times for the appointment."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the appointment details."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient ID or doctor ID does not exist."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid patient/doctor ID."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The doctor is not available in the specified duration."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows the doctor is not available and request user to enter a different time."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Complete Appointment"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters appointment ID and whether the patient attended the appointment."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the appointment details as completed."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The appointment ID does not exist."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid appointment ID."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Cancel Appointment"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters appointment ID."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX marks the appointment as cancelled."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The appointment ID does not exist."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid appointment ID."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1b. The appointment is in the past or has already been completed."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1b1. docX shows an error message and request the user to give a valid appointment ID."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Appointments of a Doctor"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters doctor ID"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows a list of all the appointment of the doctor ID."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The doctor ID does not exist."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid doctor ID."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 2a. The doctor has no appointments."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 2a1. docX shows the doctor has no appointments."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Available Timing of a Doctor"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters doctor ID and date"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows a list of all the available time slots of the doctor ID on a particular date."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The doctor ID does not exist."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to give a valid doctor ID."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 2a. The doctor has no appointments."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 2a1. docX shows the doctor has no appointments."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: List All Available Timings of Doctors on a Date"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters date."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows a list of all the available time slots of all the doctors on a particular date."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. There are no doctors with available time slots on the date."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows there are no available doctors and suggests the nearest date with doctors who are available."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Add a Prescription"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the prescription details, patient ID and medical history ID."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the prescription created for the associated patient ID and medical history ID."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The patient ID or medical history ID does not exist."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to enter a valid patient ID/medical history ID."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Edit an Existing Prescription"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the new prescription detail and prescription ID."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the new details for that prescription."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The prescription ID does not exist."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to enter a valid prescription ID."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an Existing Prescription"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "1. User enters the prescription ID to be deleted."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "2. docX shows the prescription is deleted."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "* 1a. The prescription ID does not exist."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "** 1a1. docX shows an error message and request the user to enter a valid prescription ID."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "+"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ".  Should be able to hold up to 1000 patients/doctors without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 514,
      "-": 937
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d docX - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "docX is for those who *prefer to use a desktop app for managing contacts*. More importantly, docX is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, docX can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your docX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* **`add-patient`**`n/John Doe p/98765432 a/22 g/M ` : adds a patient named `John Doe` to docX."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* **`delete-doctor`**`3` : deletes the 3rd doctor shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[s/SPECIALISATION]...` can be used as `{nbsp}` (i.e. 0 times), `s/acupuncture`, `s/acupuncture s/general` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding a patient: `add-patient`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds a patient to docX +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-patient n/NAME g/GENDER [a/AGE] p/PHONE_NUMBER`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "// [TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "// A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-patient n/John Doe g/Male a/21 p/98765432`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-patient n/Betsy Crowe g/Female p/1234567 a/32`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing all patients : `list-patient`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all patients in docX. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-patient`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Editing a patient : `edit-patient`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits an existing patient in docX. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `edit-patient INDEX [n/NAME] [g/GENDER] [a/AGE] [p/PHONE]`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Edits the patient at the specified `INDEX`. The index refers to the identification number (ID) of the patient. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-patient 1 p/91234567` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the phone number of the patient with ID of \u00271\u0027 to be `91234567`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-patient 2 n/Betsy Crower p/45678901` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the name and phone number of the patient with ID of \u00272\u0027 to be `Betsy Crower` and \u002745678901\u0027 respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Locating patient by name: `search-patient`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Finds patient(s) whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `search-patient NAME [PHONE_NUMBER]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-patient John` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-patient Betsy Tim John` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns any patient having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Deleting an existing patient : `delete-patient`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the specified patient from docX. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `delete-patient INDEX`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Deletes the patient of the specified `INDEX` in docX."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index refers to the identification number (ID) of the patient."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-patient` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "`delete-patient 3` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the patient with ID of \u00273\u0027 in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `delete-patient 2` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the patient with ID of \u00272\u0027 in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding a doctor: `add-doctor`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds a doctor to docX +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-doctor n/NAME g/GENDER a/AGE p/PHONE_NUMBER s/SPECIALISATION`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* A doctor must have at least 1 specialisation."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-doctor n/John Doe g/Male a/21 p/98765432 s/`acupuncture\u0027 \u0027general\u0027`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-doctor n/Betsy Crowe g/Female p/1234567 a/32 s/\u0027general\u0027`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing all doctors : `list-doctor`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all doctors in docX. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-doctor`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Editing a doctor : `edit-doctor`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits an existing doctor in docX. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `edit-doctor INDEX [n/NAME] [g/GENDER] [a/AGE] [p/PHONE] [s/SPECIALISATION]`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Edits the doctor at the specified `INDEX`. The index refers to the identification number (ID) of the doctor. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* When editing specialisation, the existing specialisations of the doctor will be removed i.e adding of specialisation(s) is not cumulative."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* You can remove all the doctor\u0027s specialisations by typing `s/` without specifying any specialisation after it."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-doctor 1 p/91234567` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the phone number of the doctor with ID of \u00271\u0027 to be `91234567`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-doctor 2 n/Betsy Crower p/45678901` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the name and phone number of the doctor with ID of \u00272\u0027 to be `Betsy Crower` and \u002745678901\u0027 respectively."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Locating doctor by name: `search-doctor`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Finds doctor(s) whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `search-doctor NAME [PHONE_NUMBER]` or `search-doctor SPECIALISATION`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Doctors matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Each specialisation is to be quoted in quotation marks."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-doctor John` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-doctor \u0027general practitioner\u0027 \u0027acupuncture\u0027` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns any doctor having either \u0027general practitioner\u0027 or \u0027acupuncture\u0027 or both."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Deleting an existing doctor : `delete-doctor`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the specified doctor from docX. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `delete-doctor INDEX`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Deletes the doctor of the specified `INDEX`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index refers to the identification number (ID) of the doctor."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-doctor` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "`delete-doctor 1` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the doctor with ID of \u00271\u0027 in docX."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `delete-doctor 2` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Deletes the doctor with ID of \u00272\u0027 in docX."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding a medical history: `add-med-hist`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds a medical history to the patient +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-med-hist p/PATIENT_NAME [pid/PATIENT_ID] d/DOCTOR_NAME [did/DOCTOR_ID] w/SHORT_WRITEUP`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Medical history and the attending doctor will be added under the patient of `PATIENT_NAME`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Date of visit (same as entry date) will be added to the medical history."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* If there are common names (patient/doctor) found, the system will stop the information from being added and prompt the user to insert the command with the specific ID of the patient/doctor."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-med-hist p/John pid/1 d/Amy Lim w/Came down with a stomach flu, possibly due to eating expired food`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-med-hist p/John Doe did/3 d/Amy w/Had a fever with sorethroat. Sleeps late.`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing all medical history of specified patient : `list-med-hist`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all medical history of the specified patient. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-med-hist PATIENT_ID`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Editing a medical history : `edit-med-hist`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits a specified medical history of a specified patient. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `edit-med-hist pid/PATIENT_ID mhid/MED_HIST_ID [d/DATE_OF_VISIT] [w/SHORT_WRITEUP]`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Edits the medical history of the specified `MED_HIST_ID` of the specified patient `PATIENT_ID`. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `DATE_OF_VISIT` must be in the format `DDMMYYYY`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-med-hist pid/1 mhid/2 d/10022019` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the date of the medical history entry with ID of \u00272\u0027 under patient with ID of \u00271\u0027 to be `10022019`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `edit-med-hist pid/4 mhid/1 w/Came down with a stomach flu, possibly due to eating expired canned food` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Edits the short write up of the medical history with ID of \u00271\u0027 under patient with ID of \u00272\u0027 to be `Came down with a stomach flu, possibly due to eating expired food`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Locating medical history : `search-med-hist`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Finds medical history(ies) whose write up contain any of the given keywords. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `search-med-hist KEYWORD`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Write ups of the medical history matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Each keyword is to be quoted in quotation marks."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-med-hist \u0027flu\u0027` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns all medical history with the write up containing the keyword `flu`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `search-med-hist \u0027stomach flu\u0027 \u0027sorethroat\u0027` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns all medical history with the write up containing either \u0027stomach flu\u0027 or \u0027sorethroat\u0027 or both keywords."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Viewing medical history of a patient: `view-med-hist`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "View the full specified medical history of the specified patient. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `view-med-hist n/PATIENT_NAME [pid/PATIENT_ID] mhid/MED_HIST_ID`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Display the full medical history of the specified `MED_HIST_ID` of the specified patient `PATIENT_ID`. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* If there are common names of patients found, the system will stop the information from being added and prompt the user to insert the command with the specific ID of the patient."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `view-med-hist n/JOHN DOE mhid/1` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns full write up of the medical history with ID of \u00271\u0027 of the patient with name of \u0027John Doe\u0027"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `view-med-hist n/Amy pid/2 mhid/4` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Returns full write up of the medical history with ID of \u00274\u0027 of the patient with name of \u0027Amy\u0027 and ID of \u00272\u0027"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Adding an appointment: `add-appt`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds an appointment under the doctor and patient involved. +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `add-appt pid/PATIENT_ID did/DOCTOR_ID d/DATE_OF_APPT t/START_TIME`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Doctors are assumed to be free from 9am to 12pm and 1pm to 5pm."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Appointments are in 1-hour blocks."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Returns invalid if the doctor is not available during the specified block."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `DATE_OF_APPT` must be in the format `DDMMYYYY`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `START_TIME` must be in the 24-hour format `HH` as timing for appointment is hourly, starting from 9am."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-appt pid/1 did/1 d/25032019 t/09` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds an appointment under patient with ID of \u00271\u0027 and doctor with ID of \u00271\u0027 on 25th March 2019 at 9am."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `add-appt pid/3 did/2 d/25042019 t/13` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Adds an appointment under patient with ID of \u00273\u0027 and doctor with ID of \u00272\u0027 on 25th April 2019 at 1pm."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Completing an appointment : `complete-appt`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Complete the appointment when the patient and doctor finishes the appointment. +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `complete-appt INDEX`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Complete the appointment of the specified `INDEX`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index refers to the identification number (ID) of the appointment."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only appointments on the actual day or future dates can be completed."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `complete-appt 1` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Completes the appointment with ID of \u00271\u0027 in docX."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `complete-appt 3` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Completes the appointment with ID of \u00273\u0027 in docX."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Cancelling an appointment : `cancel-appt`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Cancel the appointment when the patient or doctor cannot attend the appointment. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `cancel-appt INDEX`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Cancel and delete the appointment of the specified `INDEX`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index refers to the identification number (ID) of the appointment."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Only appointments on the actual day or future dates can be cancelled."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `cancel-appt 1` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Cancels and deletes the appointment with ID of \u00271\u0027 in docX."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `complete-appt 3` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Cancels and delete the appointment with ID of \u00273\u0027 in docX."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing appointments of a doctor : `list-appt`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all incomplete appointments of a doctor in docX within a specified time period. +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-appt did/DOCTOR_ID sd/START_DATE ed/END_DATE`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* The start and end date specified are both inclusive in the search results."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Completed or cancelled appointments will not be displayed."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-appt did/3 sd/30032019 ed/30042019` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Lists all appointments of the doctor with ID of \u00273\u0027 from 30th March 2019 to 30th April 2019."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing available timings of a doctor : `list-doc-time`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all available blocks of timing of the specified doctor. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-doc-time did/DOCTOR_ID d/DATE`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `DATE` must be in the format `DDMMYYYY`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Acceptable dates include the date today and future dates."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-doc-time did/3 d/05032019` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Lists all available blocks of timing of the doctor with ID of \u00273\u0027 on 5th March 2019."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "\u003d\u003d\u003d Listing available timings of all doctors : `list-time`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Shows a list of all available blocks of timings of all doctors on the specified date. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Format: `list-time DATE`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `DATE` must be in the format `DDMMYYYY`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* Acceptable dates include the date today and future dates."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* `list-time 26022019` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Lists all doctors\u0027 available blocks of timing for each 1-hour time slot on 26th February 2019."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "Clears all entries from docX. +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "docX data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "PATIENT COMMANDS"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new patient* `add-patient n/NAME g/GENDER a/AGE p/PHONE_NUMBER` +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-patient n/Betsy Crowe g/Female p/1234567 a/32`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List existing patients* : `list-patient`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Delete patient* : `delete-patient INDEX` +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `delete-patient 3`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Edit an existing patient* : `edit-patient INDEX [n/NAME] [g/GENDER] [a/AGE] [p/PHONE]` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `edit-patient 2 n/Betsy Crower p/45678901`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Locating a patient* : `search-patient NAME [PHONE_NUMBER]` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `search-patient John`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Delete an existing patient* : `delete-patient INDEX` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "eg. `delete-patient 2`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "DOCTOR COMMANDS"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new doctor* `add-doctor n/NAME g/GENDER a/AGE p/PHONE_NUMBER s/SPECIALISATION` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-doctor n/John Doe g/Male a/21 p/98765432 s/`acupuncture\u0027 \u0027general\u0027`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List existing doctors* : `list-doctor`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Delete doctor* : `delete-doctor INDEX` +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `delete-doctor 3`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Edit an existing doctor* : `edit-doctor INDEX [n/NAME] [g/GENDER] [a/AGE] [p/PHONE] [s/SPECIALISATION]` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `edit-doctor 2 n/Betsy Crower p/45678901`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Locating a doctor* : `search-patient NAME [PHONE_NUMBER]` +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `search-doctor \u0027general practitioner\u0027 \u0027acupuncture\u0027`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Delete an existing doctor* : `delete-doctor INDEX` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "eg. `delete-doctor 2`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "MEDICAL HISTORY COMMANDS"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new medical history* `add-med-hist p/PATIENT_NAME [pid/PATIENT_ID] d/DOCTOR_NAME [did/DOCTOR_ID] w/SHORT_WRITEUP` +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-med-hist p/John Doe did/3 d/Amy w/Had a fever with sorethroat. Sleeps late.`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List medical histories of a patient* : `list-med-hist PATIENT_ID`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Edit an existing medical history of a patient* : `edit-med-hist pid/PATIENT_ID mhid/MED_HIST_ID [d/DATE_OF_VISIT] [w/SHORT_WRITEUP]` +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `edit-med-hist pid/1 mhid/2 d/10022019`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Locating a medical history* : `search-med-hist KEYWORD` +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `search-med-hist \u0027flu\u0027`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *View a medical history* : `view-med-hist n/PATIENT_NAME [pid/PATIENT_ID] mhid/MED_HIST_ID` +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `view-med-hist n/JOHN DOE mhid/1`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "APPOINTMENT COMMANDS"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Add a new appointment* `add-appt pid/PATIENT_ID did/DOCTOR_ID d/DATE_OF_APPT t/START_TIME` +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `add-appt pid/1 did/1 d/25032019 t/09`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Completing an appointment* : `complete-appt INDEX`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *Cancelling an appointment* : `cancel-appt INDEX`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List upcoming appointments of a doctor* : `list-appt did/DOCTOR_ID sd/START_DATE ed/END_DATE`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `list-appt did/3 sd/30032019 ed/30042019`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List available timings of a doctor* : `list-doc-time did/DOCTOR_ID d/DATE`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `list-doc-time did/3 d/05032019`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "* *List available doctors during the specified time* : `list-time DATE`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "e.g. `list-time 26022019`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "GENERAL COMMANDS"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 345,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " * Adds a new appointment to a patient."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AddAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-appt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private Appointment appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public AddAppointmentCommand(Index index, Appointment appointment) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        throw new CommandException(\"index: \" + index + \"appointment: \" + appointment.value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand that \u003d (AddAppointmentCommand) o;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Objects.equals(index, that.index) \u0026\u0026 Objects.equals(appointment.value, that.appointment.value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDoctorCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Adds a doctor to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AddDoctorCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-doctor\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public AddDoctorCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public AddDoctorCommand(Name name, Gender gender, Age age, Phone phone, Set\u003cTag\u003e specialisation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new CommandResult(\"test\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMedHistCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WRITEUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Adds a medical history."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class AddMedHistCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-med-hist\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + \": Adds a medical history of a patient to the address book.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + PREFIX_WRITEUP + \"SHORT-WRITE-UP \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            + PREFIX_WRITEUP + \"Fever\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New medical history added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private final MedicalHistory toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Creates an addPatientCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public AddMedHistCommand(MedicalHistory medHist) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(medHist);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        toAdd \u003d medHist;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        throw new CommandException(\"Medical History: \" + toAdd.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                || (other instanceof AddMedHistCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddMedHistCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Liuyy99": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " * Parses input arguments and creates a new AddAppointmentCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public AddAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Prefix remark \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                ArgumentTokenizer.tokenize(args, remark);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, remark)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return new AddAppointmentCommand(index, new Appointment(argMultimap.getValue(remark).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDoctorCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.commands.AddDoctorCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the AddDoctorCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * and returns an AddDoctorCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AddDoctorCommandParser implements Parser\u003cAddDoctorCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDoctorCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * and returns an AddDoctorCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public AddDoctorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_AGE, PREFIX_PHONE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                        PREFIX_SPECIALISATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_AGE, PREFIX_PHONE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                PREFIX_SPECIALISATION) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"error message\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Set\u003cTag\u003e specList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_SPECIALISATION));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new AddDoctorCommand(name, gender, age, phone, specList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMedHistCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WRITEUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.AddMedHistCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Parses input arguments and creates a new AddMedHistCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class AddMedHistCommandParser implements Parser\u003cAddMedHistCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public AddMedHistCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_WRITEUP);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_WRITEUP)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedHistCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patient \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        WriteUp writeUp \u003d ParserUtil.parseWriteUp(argMultimap.getValue(PREFIX_WRITEUP).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        MedicalHistory medicalHistory \u003d new MedicalHistory(patient, name, writeUp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return new AddMedHistCommand(medicalHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Liuyy99": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.commands.AddDoctorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.AddMedHistCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @throws ParseException if the user inp"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * ut does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        case AddDoctorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return new AddDoctorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        case AddAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return new AddAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        case AddMedHistCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return new AddMedHistCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 5,
      "amuletxheart": 6,
      "-": 91,
      "Liuyy99": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final Prefix PREFIX_SPECIALISATION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final Prefix PREFIX_WRITEUP \u003d new Prefix(\"sw/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 1,
      "-": 17,
      "Liuyy99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Age parseAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Parses a {@code String writeUp} into a {@code WriteUp}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * @throws ParseException if the given {@code writeUp} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static WriteUp parseWriteUp(String writeUp) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(writeUp);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        String trimmedName \u003d writeUp.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return new WriteUp(trimmedName);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 157,
      "Liuyy99": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " * Represents an Appointment made by a patient."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointments can only be made in the future\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Constructs an {@code Appointment}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * @param appointment A valid appointment."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public Appointment(String appointment) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        checkArgument(isValidAppointment(appointment), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        value \u003d appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     * Returns true if a given string is a valid appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public static boolean isValidAppointment(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return !test.trim().isEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Appointment that \u003d (Appointment) o;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Objects.equals(value, that.value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicalhistory/MedicalHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Represents a Medical History in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class MedicalHistory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private WriteUp writeUp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    //Constructor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public MedicalHistory(Patient patient, Name name, WriteUp writeUp) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // Doctor, Time, MedicalHistory Id are needed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        this.writeUp \u003d writeUp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return this.patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public WriteUp getWriteUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return this.writeUp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if both medicalHistory have the same identity and data fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * This defines a stronger notion of equality between two medicalHistory."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        if (!(other instanceof MedicalHistory)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory otherMedHist \u003d (MedicalHistory) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return otherMedHist.getName().equals(getName())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 otherMedHist.getWriteUp().equals(getWriteUp());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return Objects.hash(patient, name, writeUp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                .append(\" WriteUp: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                .append(getWriteUp());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Liuyy99": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicalhistory/WriteUp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Represents write up of a medical history in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWriteUp(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class WriteUp {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "            \"Write up should be a short description\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    //public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * @param writeUp A valid write up."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public WriteUp(String writeUp) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        requireNonNull(writeUp);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        checkArgument(isValidWriteUp(writeUp), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        value \u003d writeUp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     * Returns true if a given string is a valid write up."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public static boolean isValidWriteUp(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return true; //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                || (other instanceof WriteUp // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                \u0026\u0026 value.equals(((WriteUp) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "Liuyy99": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Doctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.model.tag.Specialisation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Represents a Doctor in docX."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class Doctor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    private final Set\u003cSpecialisation\u003e specList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Doctor(Name name, Phone phone, Gender gender, Age age) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this.phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this.gender;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns an immutable specialisation set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Set\u003cSpecialisation\u003e getSpecs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return Collections.unmodifiableSet(specList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if both doctors of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * This defines a weaker notion of equality between two doctors."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean isSameDoctor(Doctor otherDoctor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (otherDoctor \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return otherDoctor !\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getName().equals(getName())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 (otherDoctor.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if both doctors have the same identity and data fields."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * This defines a stronger notion of equality between two doctors."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        if (!(other instanceof Doctor)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Doctor otherDoctor \u003d (Doctor) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return otherDoctor.getName().equals(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getAge().equals(getAge())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getGender().equals(getGender())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 otherDoctor.getSpecs().equals(getSpecs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return Objects.hash(name, phone, age, gender, specList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(getAge())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                .append(\" Specialisations: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        getSpecs().forEach(builder::append);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s gender in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            \"Gender should only contain 1 character, and it should only be m/f/M/F\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[mfMF]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param gender A valid gender string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid gender number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 2,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Patient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Represents a Patient in docX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * !! supposed to extend from abstract class Person"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Patient(Name name, Gender gender, Age age, Phone phone, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * have at least one other identity field (phone number) that is the same."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePatient(seedu.address.model.person.Patient otherPatient) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPatient.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof seedu.address.model.person.Person)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPatient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPatient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, gender, age, phone, address, tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAge())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Specialisation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Represents a Specialisation of a doctor in docX."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidSpecialisation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class Specialisation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Specialisations should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public final String specialisation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Constructs a {@code Specialisation}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @param specialisation A valid specialisation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public Specialisation(String specialisation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        requireNonNull(specialisation);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        checkArgument(isValidSpecialisation(specialisation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        this.specialisation \u003d specialisation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Returns true if a given string is a valid specialisation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static boolean isValidSpecialisation(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                || (other instanceof Specialisation // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "                \u0026\u0026 specialisation.equals(((Specialisation) other).specialisation)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return specialisation.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return \u0027[\u0027 + specialisation + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private Label addAppointment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        addAppointment.setText(\"addAppointment\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 3,
      "-": 70
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "      \u003cLabel fx:id\u003d\"addAppointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$addAppointment\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AddAppointmentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void testThrowException() throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        new AddAppointmentCommand(Index.fromOneBased(1), new Appointment(\"test\")).execute(null, commandHistory);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command1 \u003d new AddAppointmentCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                new Appointment(\"appointment1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command2 \u003d new AddAppointmentCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                new Appointment(\"appointment2\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(command1.equals(command1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command1Copy \u003d new AddAppointmentCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                new Appointment(\"appointment1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(command1.equals(command1Copy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(command1.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(command1.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(command1.equals(command2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDoctorCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AddDoctorCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * Tests the add-doctor command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @return Exception as of now."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static Exception execute() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        return new Exception();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMedHistCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class AddMedHistCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void testThrowException() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        new AddMedHistCommand(new MedicalHistory(null, new Name(\"t\"), new WriteUp(\"t\")))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                .execute(null, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // for add-doctor testing (initial addition of add-doctor)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_NAME_JOHN \u003d \"John Doe\u0026\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_GENDER_JOHN \u003d \"M\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_AGE_JOHN \u003d \"21\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_PHONE_JOHN \u003d \"99999999\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_SPECIALISATION_ACUPUNCTURE \u003d \"acupuncture\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String VALID_SPECIALISATION_MASSAGE \u003d \"massage\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String NAME_DESC_JOHN \u003d \" \" + PREFIX_NAME + VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String GENDER_DESC_JOHN \u003d \" \" + PREFIX_GENDER + VALID_GENDER_JOHN;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String AGE_DESC_JOHN \u003d \" \" + PREFIX_AGE + VALID_AGE_JOHN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String PHONE_DESC_JOHN \u003d \" \" + PREFIX_PHONE + VALID_PHONE_JOHN;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String SPECIALISATION_DESC_ACUPUNCTURE \u003d \" \" + PREFIX_SPECIALISATION"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            + VALID_SPECIALISATION_ACUPUNCTURE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public static final String SPECIALISATION_DESC_MASSAGE \u003d \" \" + PREFIX_SPECIALISATION"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "            + VALID_SPECIALISATION_MASSAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    // end of add-doctor testing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 21,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddAppointmentCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AddAppointmentCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command \u003d new AddAppointmentCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                new Appointment(\"appointment1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertParseSuccess(parser, \"1 r/appointment1\", command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertParseFailure(parser, \"1 appointment1\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // index missing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertParseFailure(parser, \"-1 r/appointment1\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddDoctorCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_JOHN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOHN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_JOHN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.SPECIALISATION_DESC_ACUPUNCTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import seedu.address.logic.commands.AddDoctorCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AddDoctorCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    private AddDoctorCommandParser parser \u003d new AddDoctorCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_JOHN + GENDER_DESC_JOHN + AGE_DESC_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//                + SPECIALISATION_DESC_ACUPUNCTURE, new AddDoctorCommand());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_JOHN + GENDER_DESC_JOHN + AGE_DESC_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//                + SPECIALISATION_DESC_ACUPUNCTURE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddMedHistCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.AddMedHistCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class AddMedHistCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    private AddMedHistCommandParser parser \u003d new AddMedHistCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        AddMedHistCommand command \u003d new AddMedHistCommand("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                new MedicalHistory(null, new Name(\"testName\"), new WriteUp(\"testWriteUp\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertParseSuccess(parser, \" n/testName sw/testWriteUp\", command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.logic.commands.AddDoctorCommandTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.logic.commands.AddMedHistCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.MedicalHistory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.medicalhistory.WriteUp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void parseCommand_addDoctor() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        AddDoctorCommandTest.execute();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void parseCommand_addAppointment() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        AddAppointmentCommand command \u003d (AddAppointmentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "                AddAppointmentCommand.COMMAND_WORD + \" 1 r/ appointment1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(command instanceof AddAppointmentCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertEquals(new AddAppointmentCommand(Index.fromOneBased(1), new Appointment(\"appointment1\")), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void parseCommand_addMedHist() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        AddMedHistCommand command \u003d (AddMedHistCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                AddMedHistCommand.COMMAND_WORD + \" \" + \"n/testName sw/testWriteUp\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(command instanceof AddMedHistCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertEquals(command, new AddMedHistCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "                new MedicalHistory(null, new Name(\"testName\"), new WriteUp(\"testWriteUp\"))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 6,
      "amuletxheart": 12,
      "-": 143,
      "Liuyy99": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Appointment(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        String invalidAppointment \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Appointment(invalidAppointment));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void isValidAppointment() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Appointment.isValidAppointment(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(Appointment.isValidAppointment(\"appointment1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Appointment appointment1 \u003d new Appointment(\"appointment1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Appointment appointment2 \u003d new Appointment(\"appointment2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        Appointment appointment1Copy \u003d new Appointment(\"appointment1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(appointment1.equals(appointment1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertTrue(appointment1.equals(appointment1Copy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(appointment1.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "        assertFalse(appointment1.equals(appointment2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amuletxheart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amuletxheart": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicalhistory/MedicalHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class MedicalHistoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory mh1 \u003d new MedicalHistory(null, new Name(\"a\"), new WriteUp(\"fever\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory mh2 \u003d new MedicalHistory(null, new Name(\"a\"), new WriteUp(\"sneeze\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory mh3 \u003d new MedicalHistory(null, new Name(\"b\"), new WriteUp(\"fever\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        MedicalHistory mh1Copy \u003d new MedicalHistory(null, new Name(\"a\"), new WriteUp(\"fever\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(mh1.equals(mh1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(mh1.equals(mh1Copy));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(mh1.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(mh1.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // different writeup -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(mh1.equals(mh2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(mh1.equals(mh3));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicalhistory/WriteUpTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "package seedu.address.model.medicalhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "public class WriteUpTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        WriteUp writeUp1 \u003d new WriteUp(\"test1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        WriteUp writeUp2 \u003d new WriteUp(\"test1\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        WriteUp writeUp3 \u003d new WriteUp(\"test2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(writeUp1.equals(writeUp1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertTrue(writeUp1.equals(writeUp2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "        assertFalse(writeUp1.equals(writeUp3));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liuyy99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liuyy99": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AgeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        String invalidAge \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // null age"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // invalid ages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // valid ages"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Age.isValidAge(\"55\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Age.isValidAge(\"2\")); // one digit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Age.isValidAge(\"123\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        String invalidGender \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // invalid genders"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\"hi\")); // text other than \"f\" or \"m\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\"femal\")); // text other than \"f\" or \"m\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\"happy\")); // text other than \"f\" or \"m\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\"p\")); // text other than \"f\" or \"m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // valid genders"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Gender.isValidGender(\"F\")); // upper case"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Gender.isValidGender(\"f\")); // lower case"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        assertTrue(Gender.isValidGender(\"m\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/SpecialisationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "public class SpecialisationTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Specialisation(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void constructor_invalidSpecialisation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        String invalidSpecialisationName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidSpecialisationName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    public void isValidSpecialisation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        // null specialisation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Specialisation.isValidSpecialisation(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siyingpoof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siyingpoof": 27
    }
  }
]
