[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "\u003d Marketing Morph"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "* This is a desktop marketing application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "* It is meant to be utilized by a marketing company in order to effectively organize *potential targets* and *potential clients*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 3,
      "FanDongzhe": 1,
      "-": 28
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    archiveName \u003d \u0027MarketingMorph.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 236,
      "jkhiani": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Marketing Morph was developed by the https://github.com/orgs/cs2103-ay1819s2-w16-3/teams/developers[w16-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "\u003d\u003d\u003d Dongzhe Fan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "image::FanDongzhe.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "{empty}[http://github.com/yijinl[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Responsibilities: UG/DG maintenance"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jiayu Zhang"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "image::zhangjiayu0303.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "{empty}[http://github.com/ZhangJiayu0303[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Responsibilities: UG/DG maintenance,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d Jitesh Khiani"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "image::jkhiani.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "{empty}[https://github.com/jkhiani[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Responsibilities: UG/DG maintenance, GH Repo maintenance, Favorites System, Maps Addition"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Roan Urquhart"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image::roanurquhart.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "{empty}[https://github.com/roanurquhart[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Responsibilities: UG/DG maintenance, GH Repo maintenance, Company Implementation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 7,
      "FanDongzhe": 2,
      "-": 30,
      "jkhiani": 8
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "The addition of the \u0027Company\u0027 class has altered the \u0027Model Class Diagram\u0027 in several ways"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "* In order to store the list of companies required for the application, a \u0027UniqueCompanyList\u0027 class was added"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "* The company class was added in order to distinguish between company and person objects within the UI"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "* Each class has the same attributes but each with a different connotations"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "At the current time, with the commands \u0027addcpny\u0027 and \u0027listcpny\u0027 the user can add a company to the address book and list all of the companies added respectively"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "// tag::favoriteSystem[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d Favorite System"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "The favorite system is facilitated by `AddressBook`,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "It extends the address book system by allowing the user to save favorites, stored internally as a `UniquePersonList`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* `AddressBook#addFavorites()` -- Saves the person into the favorites list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* `AddressBook#getFavoritesList()` -- Returns a list of all favorite persons."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#addFavorites()` and `Model#getFavoritesList()`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Given below is an example usage scenario of how the favorite mechanism behaves at each step."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Step 1. The user launches the application for the first time. An empty UniquePersonList is created in `AddressBook`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Step 2. The user executes `favorite Alex` to save the person Alex into their favorites list. The favorite command creates a new `NameContainsKeywordsPredicate` updating the filteredPersonList and calls `Model#addFavorites()` and `Model#commitAddressBook` thereby updating the favorites list stored in `AddressBook` and updating the filteredPersonList."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Step 3. The user repeats this a few times, adding a few other persons."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Step 4. The user wants to view all favorites and executes `listFav` to view all favorites. This creates a new `PersonIsFavoritePredicate` which is passed in a model and calls `Model#getFavoritesList` and check if it contains the person. The command class then calls `Model#updateFilteredPersonList` with the predicate to only display all filtered (favorite) persons."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "We must still implement persistent storage of favorite lists and deleting favorites."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "image::favoriteActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to save the favorites"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* **Alternative 1 (current choice):** Save all favorites using a simple list."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Cons: May have runtime issues in deleting if the list gets large."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* **Alternative 2:** Linked list to store favorites."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Pros: Efficient to delete favorites from anywhere in the list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Cons: We must ensure that the implementation is proper as there is a lot of complexity."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "_"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "// end::favoriteSystem[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "\u003d\u003d\u003d Three new attributes: Salary, Occupation, Relationship"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "The add Command is modified in this enhancement. Previously, user can only add a person\u0027s name, phone number, address and tags to the address book."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "After this enhancement, following attributes are added to the person\u0027s information:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "* `SALARY`: salary must be a string with more than one digits"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "* `OCCUPATION`: occupation can be a string with any characters"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "*  `RELATIONSHIP`: relationship must be a string with one word (no blank allowed)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How to implement the command"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Users just input:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "add n/NAME p/PHONE e/EMAIL a/ADDRESS s/SALARY o/OCCUPATION r/RELATIONSHIP [t/TAG]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Example: add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 s/100000o/bankerr/singlet/friends t/owesMoney"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Pros and Cons"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "** Pros: Easy to implement, and the add format just follows the previous version"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "** Cons: When implementing add Command, Users must add all information except the optional TAG attribute, this makes the command not flexible enough"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the Marketing Morph App"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person or company | keep track of potential target demographics and clients"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person or company |remove entries that I no longer need"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person or company by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |create a group of clients |to organize potential clients into a separate group"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add contacts to a favorites list |to have quick access to the most used contacts"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|`* * *` |user |delete contacts to a favorites list |to have quick access to the most used contacts"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |update person or company data |to change information that is no longer correct"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |can analyze which people can afford a product |to effectively target potential consumers"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |can determine which people can shop at particular businesses |to sell information to companies"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|`* *` |user |view a persons address on a map |visualize where they live"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|`* *` |user |see number of entries in the addressbook | to know how many entries I have"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "// tag::jiteshUseCase[]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d Use case: Favorite person"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "3.  User requests to add a specific person in the list to their favorites"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "4.  AddressBook saves the person in the favorites list"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* 3a. The given name does not exist."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* 3b. The given name is not specific enough."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** 3b1. AddressBook shows an error message and displays potential options."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* 3c. The given name isn\u0027t a favorite."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** 3c1. AddressBook shows an error message."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d Use case: View person\u0027s location"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "3.  User clicks on a specific persons card on the list"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "4.  AddressBook displays a Google Maps window of their address in the Main Window"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "+"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "// end::jiteshUseCase[]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 8,
      "ZhangJiayu0303": 20,
      "-": 964,
      "jkhiani": 95
    }
  },
  {
    "path": "docs/DeveloperGuide.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c!--[if IE]\u003e\u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e\u003c![endif]--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 1.5.5\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctitle\u003eAddressBook Level 4 - Developer Guide\u003c/title\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*:not(pre)\u003ecode.nobreak{word-wrap:normal}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*:not(pre)\u003ecode.nowrap{white-space:nowrap}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "em em{font-style:normal}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "strong strong{font-weight:400}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".show-for-print{display:inherit!important}}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch1\u003eAddressBook Level 4 - Developer Guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"preamble\"\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eBy: \u003ccode\u003eTeam SE-EDU\u003c/code\u003e      Since: \u003ccode\u003eJun 2016\u003c/code\u003e      Licence: \u003ccode\u003eMIT\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"toc\" class\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"toctitle\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel1\"\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_setting_up\"\u003e1. Setting up\u003c/a\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_prerequisites\"\u003e1.1. Prerequisites\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_setting_up_the_project_in_your_computer\"\u003e1.2. Setting up the project in your computer\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_verifying_the_setup\"\u003e1.3. Verifying the setup\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_configurations_to_do_before_writing_code\"\u003e1.4. Configurations to do before writing code\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_design\"\u003e2. Design\u003c/a\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Architecture\"\u003e2.1. Architecture\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Ui\"\u003e2.2. UI component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Logic\"\u003e2.3. Logic component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Model\"\u003e2.4. Model component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Storage\"\u003e2.5. Storage component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Commons\"\u003e2.6. Common classes\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_implementation\"\u003e3. Implementation\u003c/a\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_undo_redo_feature\"\u003e3.1. Undo/Redo feature\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_favorite_system\"\u003e3.2. Favorite System\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_logging\"\u003e3.3. Logging\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Implementation-Configuration\"\u003e3.4. Configuration\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_three_new_attributes_salary_occupation_relationship\"\u003e3.5. Three new attributes: Salary, Occupation, Relationship\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_documentation\"\u003e4. Documentation\u003c/a\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_editing_documentation\"\u003e4.1. Editing Documentation\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_publishing_documentation\"\u003e4.2. Publishing Documentation\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_converting_documentation_to_pdf_format\"\u003e4.3. Converting Documentation to PDF format\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Docs-SiteWideDocSettings\"\u003e4.4. Site-wide Documentation Settings\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Docs-PerFileDocSettings\"\u003e4.5. Per-file Documentation Settings\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_site_template\"\u003e4.6. Site Template\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Testing\"\u003e5. Testing\u003c/a\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_running_tests\"\u003e5.1. Running Tests\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_types_of_tests\"\u003e5.2. Types of tests\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_troubleshooting_testing\"\u003e5.3. Troubleshooting Testing\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_dev_ops\"\u003e6. Dev Ops\u003c/a\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_build_automation\"\u003e6.1. Build Automation\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_continuous_integration\"\u003e6.2. Continuous Integration\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_coverage_reporting\"\u003e6.3. Coverage Reporting\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_documentation_previews\"\u003e6.4. Documentation Previews\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_making_a_release\"\u003e6.5. Making a Release\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_managing_dependencies\"\u003e6.6. Managing Dependencies\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#GetStartedProgramming\"\u003eAppendix A: Suggested Programming Tasks to Get Started\u003c/a\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#GetStartedProgramming-EachComponent\"\u003eA.1. Improving each component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#GetStartedProgramming-RemarkCommand\"\u003eA.2. Creating a new command: \u003ccode\u003eremark\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_product_scope\"\u003eAppendix B: Product Scope\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_user_stories\"\u003eAppendix C: User Stories\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_use_cases\"\u003eAppendix D: Use Cases\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_non_functional_requirements\"\u003eAppendix E: Non Functional Requirements\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_glossary\"\u003eAppendix F: Glossary\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_product_survey\"\u003eAppendix G: Product Survey\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_instructions_for_manual_testing\"\u003eAppendix H: Instructions for Manual Testing\u003c/a\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_launch_and_shutdown\"\u003eH.1. Launch and Shutdown\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_deleting_a_person\"\u003eH.2. Deleting a person\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_saving_data\"\u003eH.3. Saving data\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_setting_up\"\u003e1. Setting up\u003c/h2\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_prerequisites\"\u003e1.1. Prerequisites\u003c/h3\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eJDK \u003ccode\u003e9\u003c/code\u003e\u003c/strong\u003e or later\u003c/p\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock warning\"\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eWarning\u003c/div\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "JDK \u003ccode\u003e10\u003c/code\u003e on Windows will fail to run tests in \u003ca href\u003d\"UsingGradle.html#Running-Tests\"\u003eheadless mode\u003c/a\u003e due to a \u003ca href\u003d\"https://github.com/javafxports/openjdk-jfx/issues/66\"\u003eJavaFX bug\u003c/a\u003e."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Windows developers are highly recommended to use JDK \u003ccode\u003e9\u003c/code\u003e."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eIntelliJ\u003c/strong\u003e IDE\u003c/p\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed.\u003cbr\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Do not disable them. If you have disabled them, go to \u003ccode\u003eFile\u003c/code\u003e \u0026gt; \u003ccode\u003eSettings\u003c/code\u003e \u0026gt; \u003ccode\u003ePlugins\u003c/code\u003e to re-enable them."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_setting_up_the_project_in_your_computer\"\u003e1.2. Setting up the project in your computer\u003c/h3\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFork this repo, and clone the fork to your computer\u003c/p\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOpen IntelliJ (if you are not in the welcome screen, click \u003ccode\u003eFile\u003c/code\u003e \u0026gt; \u003ccode\u003eClose Project\u003c/code\u003e to close the existing project dialog first)\u003c/p\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSet up the correct JDK version for Gradle\u003c/p\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eClick \u003ccode\u003eConfigure\u003c/code\u003e \u0026gt; \u003ccode\u003eProject Defaults\u003c/code\u003e \u0026gt; \u003ccode\u003eProject Structure\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eClick \u003ccode\u003eNew\u0026#8230;\u0026#8203;\u003c/code\u003e and find the directory of the JDK\u003c/p\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eClick \u003ccode\u003eImport Project\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLocate the \u003ccode\u003ebuild.gradle\u003c/code\u003e file and select it. Click \u003ccode\u003eOK\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eClick \u003ccode\u003eOpen as Project\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eClick \u003ccode\u003eOK\u003c/code\u003e to accept the default settings\u003c/p\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOpen a console and run the command \u003ccode\u003egradlew processResources\u003c/code\u003e (Mac/Linux: \u003ccode\u003e./gradlew processResources\u003c/code\u003e). It should finish with the \u003ccode\u003eBUILD SUCCESSFUL\u003c/code\u003e message.\u003cbr\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "This will generate all resources required by the application and tests.\u003c/p\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOpen \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/MainWindow.java\"\u003e\u003ccode\u003eMainWindow.java\u003c/code\u003e\u003c/a\u003e and check for any code errors\u003c/p\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDue to an ongoing \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/IDEA-189060\"\u003eissue\u003c/a\u003e with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully\u003c/p\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTo resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select \u003ccode\u003eAdd \u0027--add-modules\u003d\u0026#8230;\u0026#8203;\u0027 to module compiler options\u003c/code\u003e for each error\u003c/p\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eRepeat this for the test folder as well (e.g. check \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/seedu/address/ui/HelpWindowTest.java\"\u003e\u003ccode\u003eHelpWindowTest.java\u003c/code\u003e\u003c/a\u003e for code errors, and if so, resolve it the same way)\u003c/p\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_verifying_the_setup\"\u003e1.3. Verifying the setup\u003c/h3\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eRun the \u003ccode\u003eseedu.address.MainApp\u003c/code\u003e and try a few commands\u003c/p\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Testing\"\u003eRun the tests\u003c/a\u003e to ensure they all pass.\u003c/p\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_configurations_to_do_before_writing_code\"\u003e1.4. Configurations to do before writing code\u003c/h3\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_configuring_the_coding_style\"\u003e1.4.1. Configuring the coding style\u003c/h4\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThis project follows \u003ca href\u003d\"https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc\"\u003eoss-generic coding standards\u003c/a\u003e. IntelliJ\u0026#8217;s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,\u003c/p\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eGo to \u003ccode\u003eFile\u003c/code\u003e \u0026gt; \u003ccode\u003eSettings\u0026#8230;\u0026#8203;\u003c/code\u003e (Windows/Linux), or \u003ccode\u003eIntelliJ IDEA\u003c/code\u003e \u0026gt; \u003ccode\u003ePreferences\u0026#8230;\u0026#8203;\u003c/code\u003e (macOS)\u003c/p\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSelect \u003ccode\u003eEditor\u003c/code\u003e \u0026gt; \u003ccode\u003eCode Style\u003c/code\u003e \u0026gt; \u003ccode\u003eJava\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eClick on the \u003ccode\u003eImports\u003c/code\u003e tab to set the order\u003c/p\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFor \u003ccode\u003eClass count to use import with \u0027*\u0027\u003c/code\u003e and \u003ccode\u003eNames count to use static import with \u0027*\u0027\u003c/code\u003e: Set to \u003ccode\u003e999\u003c/code\u003e to prevent IntelliJ from contracting the import statements\u003c/p\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFor \u003ccode\u003eImport Layout\u003c/code\u003e: The order is \u003ccode\u003eimport static all other imports\u003c/code\u003e, \u003ccode\u003eimport java.*\u003c/code\u003e, \u003ccode\u003eimport javax.*\u003c/code\u003e, \u003ccode\u003eimport org.*\u003c/code\u003e, \u003ccode\u003eimport com.*\u003c/code\u003e, \u003ccode\u003eimport all other imports\u003c/code\u003e. Add a \u003ccode\u003e\u0026lt;blank line\u0026gt;\u003c/code\u003e between each \u003ccode\u003eimport\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOptionally, you can follow the \u003ca href\u003d\"UsingCheckstyle.html\"\u003eUsingCheckstyle.adoc\u003c/a\u003e document to configure Intellij to check style-compliance as you write code.\u003c/p\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_updating_documentation_to_match_your_fork\"\u003e1.4.2. Updating documentation to match your fork\u003c/h4\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAfter forking the repo, the documentation will still have the SE-EDU branding and refer to the \u003ccode\u003ese-edu/addressbook-level4\u003c/code\u003e repo.\u003c/p\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eIf you plan to develop this fork as a separate product (i.e. instead of contributing to \u003ccode\u003ese-edu/addressbook-level4\u003c/code\u003e), you should do the following:\u003c/p\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eConfigure the \u003ca href\u003d\"#Docs-SiteWideDocSettings\"\u003esite-wide documentation settings\u003c/a\u003e in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/build.gradle\"\u003e\u003ccode\u003ebuild.gradle\u003c/code\u003e\u003c/a\u003e, such as the \u003ccode\u003esite-name\u003c/code\u003e, to suit your own project.\u003c/p\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eReplace the URL in the attribute \u003ccode\u003erepoURL\u003c/code\u003e in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/docs/DeveloperGuide.adoc\"\u003e\u003ccode\u003eDeveloperGuide.adoc\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/docs/UserGuide.adoc\"\u003e\u003ccode\u003eUserGuide.adoc\u003c/code\u003e\u003c/a\u003e with the URL of your fork.\u003c/p\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_setting_up_ci\"\u003e1.4.3. Setting up CI\u003c/h4\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSet up Travis to perform Continuous Integration (CI) for your fork. See \u003ca href\u003d\"UsingTravis.html\"\u003eUsingTravis.adoc\u003c/a\u003e to learn how to set it up.\u003c/p\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAfter setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003ca href\u003d\"UsingCoveralls.html\"\u003eUsingCoveralls.adoc\u003c/a\u003e).\u003c/p\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOptionally, you can set up AppVeyor as a second CI (see \u003ca href\u003d\"UsingAppVeyor.html\"\u003eUsingAppVeyor.adoc\u003c/a\u003e).\u003c/p\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_getting_started_with_coding\"\u003e1.4.4. Getting started with coding\u003c/h4\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWhen you are ready to start coding,\u003c/p\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eGet some sense of the overall design by reading \u003ca href\u003d\"#Design-Architecture\"\u003eArchitecture\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTake a look at \u003ca href\u003d\"#GetStartedProgramming\"\u003eSuggested Programming Tasks to Get Started\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_design\"\u003e2. Design\u003c/h2\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Design-Architecture\"\u003e2.1. Architecture\u003c/h3\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/Architecture.png\" alt\u003d\"Architecture\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 1. Architecture Diagram\u003c/div\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003cstrong\u003e\u003cem\u003eArchitecture Diagram\u003c/em\u003e\u003c/strong\u003e given above explains the high-level design of the App. Given below is a quick overview of each component.\u003c/p\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "The \u003ccode\u003e.pptx\u003c/code\u003e files used to create diagrams in this document can be found in the \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/docs/diagrams/\"\u003ediagrams\u003c/a\u003e folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose \u003ccode\u003eSave as picture\u003c/code\u003e."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eMain\u003c/code\u003e has only one class called \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/MainApp.java\"\u003e\u003ccode\u003eMainApp\u003c/code\u003e\u003c/a\u003e. It is responsible for,\u003c/p\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAt app launch: Initializes the components in the correct sequence, and connects them up with each other.\u003c/p\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAt shut down: Shuts down the components and invokes cleanup method where necessary.\u003c/p\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Commons\"\u003e\u003cstrong\u003e\u003ccode\u003eCommons\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "The following class plays an important role at the architecture level:\u003c/p\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eLogsCenter\u003c/code\u003e : Used by many classes to write log messages to the App\u0026#8217;s log file.\u003c/p\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe rest of the App consists of four components.\u003c/p\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Ui\"\u003e\u003cstrong\u003e\u003ccode\u003eUI\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e: The UI of the App.\u003c/p\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Logic\"\u003e\u003cstrong\u003e\u003ccode\u003eLogic\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e: The command executor.\u003c/p\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Model\"\u003e\u003cstrong\u003e\u003ccode\u003eModel\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e: Holds the data of the App in-memory.\u003c/p\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Storage\"\u003e\u003cstrong\u003e\u003ccode\u003eStorage\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e: Reads data from, and writes data to, the hard disk.\u003c/p\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEach of the four components\u003c/p\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDefines its \u003cem\u003eAPI\u003c/em\u003e in an \u003ccode\u003einterface\u003c/code\u003e with the same name as the Component.\u003c/p\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExposes its functionality using a \u003ccode\u003e{Component Name}Manager\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFor example, the \u003ccode\u003eLogic\u003c/code\u003e component (see the class diagram given below) defines it\u0026#8217;s API in the \u003ccode\u003eLogic.java\u003c/code\u003e interface and exposes its functionality using the \u003ccode\u003eLogicManager.java\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/LogicClassDiagram.png\" alt\u003d\"LogicClassDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 2. Class Diagram of the Logic Component\u003c/div\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_how_the_architecture_components_interact_with_each_other\" class\u003d\"discrete\"\u003eHow the architecture components interact with each other\u003c/h4\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003cem\u003eSequence Diagram\u003c/em\u003e below shows how the components interact with each other for the scenario where the user issues the command \u003ccode\u003edelete 1\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/SDforDeletePerson.png\" alt\u003d\"SDforDeletePerson\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 3. Component interactions for \u003ccode\u003edelete 1\u003c/code\u003e command\u003c/div\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe sections below give more details of each component.\u003c/p\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Design-Ui\"\u003e2.2. UI component\u003c/h3\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UiClassDiagram.png\" alt\u003d\"UiClassDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 4. Structure of the UI Component\u003c/div\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e : \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/Ui.java\"\u003e\u003ccode\u003eUi.java\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe UI consists of a \u003ccode\u003eMainWindow\u003c/code\u003e that is made up of parts e.g.\u003ccode\u003eCommandBox\u003c/code\u003e, \u003ccode\u003eResultDisplay\u003c/code\u003e, \u003ccode\u003ePersonListPanel\u003c/code\u003e, \u003ccode\u003eStatusBarFooter\u003c/code\u003e, \u003ccode\u003eBrowserPanel\u003c/code\u003e etc. All these, including the \u003ccode\u003eMainWindow\u003c/code\u003e, inherit from the abstract \u003ccode\u003eUiPart\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eUI\u003c/code\u003e component uses JavaFx UI framework. The layout of these UI parts are defined in matching \u003ccode\u003e.fxml\u003c/code\u003e files that are in the \u003ccode\u003esrc/main/resources/view\u003c/code\u003e folder. For example, the layout of the \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/MainWindow.java\"\u003e\u003ccode\u003eMainWindow\u003c/code\u003e\u003c/a\u003e is specified in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/resources/view/MainWindow.fxml\"\u003e\u003ccode\u003eMainWindow.fxml\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eUI\u003c/code\u003e component,\u003c/p\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExecutes user commands using the \u003ccode\u003eLogic\u003c/code\u003e component.\u003c/p\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eListens for changes to \u003ccode\u003eModel\u003c/code\u003e data so that the UI can be updated with the modified data.\u003c/p\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Design-Logic\"\u003e2.3. Logic component\u003c/h3\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"fig-LogicClassDiagram\" class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/LogicClassDiagram.png\" alt\u003d\"LogicClassDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 5. Structure of the Logic Component\u003c/div\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e :"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/logic/Logic.java\"\u003e\u003ccode\u003eLogic.java\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eLogic\u003c/code\u003e uses the \u003ccode\u003eAddressBookParser\u003c/code\u003e class to parse the user command.\u003c/p\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThis results in a \u003ccode\u003eCommand\u003c/code\u003e object which is executed by the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe command execution can affect the \u003ccode\u003eModel\u003c/code\u003e (e.g. adding a person).\u003c/p\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe result of the command execution is encapsulated as a \u003ccode\u003eCommandResult\u003c/code\u003e object which is passed back to the \u003ccode\u003eUi\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eIn addition, the \u003ccode\u003eCommandResult\u003c/code\u003e object can also instruct the \u003ccode\u003eUi\u003c/code\u003e to perform certain actions, such as displaying help to the user.\u003c/p\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eGiven below is the Sequence Diagram for interactions within the \u003ccode\u003eLogic\u003c/code\u003e component for the \u003ccode\u003eexecute(\"delete 1\")\u003c/code\u003e API call.\u003c/p\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/DeletePersonSdForLogic.png\" alt\u003d\"DeletePersonSdForLogic\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 6. Interactions Inside the Logic Component for the \u003ccode\u003edelete 1\u003c/code\u003e Command\u003c/div\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Design-Model\"\u003e2.4. Model component\u003c/h3\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/ModelClassDiagram.png\" alt\u003d\"ModelClassDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 7. Structure of the Model Component\u003c/div\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e : \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/Model.java\"\u003e\u003ccode\u003eModel.java\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eModel\u003c/code\u003e,\u003c/p\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003estores a \u003ccode\u003eUserPref\u003c/code\u003e object that represents the user\u0026#8217;s preferences.\u003c/p\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003estores the Address Book data.\u003c/p\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eexposes an unmodifiable \u003ccode\u003eObservableList\u0026lt;Person\u0026gt;\u003c/code\u003e that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.\u003c/p\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003edoes not depend on any of the other three components.\u003c/p\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe addition of the \u0027Company\u0027 class has altered the \u0027Model Class Diagram\u0027 in several ways\u003c/p\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eIn order to store the list of companies required for the application, a \u0027UniqueCompanyList\u0027 class was added\u003c/p\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe company class was added in order to distinguish between company and person objects within the UI\u003c/p\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEach class has the same attributes but each with a different connotations\u003c/p\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAt the current time, with the commands \u0027addcpny\u0027 and \u0027listcpny\u0027 the user can add a company to the address book and list all of the companies added respectively\u003c/p\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "As a more OOP model, we can store a \u003ccode\u003eTag\u003c/code\u003e list in \u003ccode\u003eAddress Book\u003c/code\u003e, which \u003ccode\u003ePerson\u003c/code\u003e can reference. This would allow \u003ccode\u003eAddress Book\u003c/code\u003e to only require one \u003ccode\u003eTag\u003c/code\u003e object per unique \u003ccode\u003eTag\u003c/code\u003e, instead of each \u003ccode\u003ePerson\u003c/code\u003e needing their own \u003ccode\u003eTag\u003c/code\u003e object. An example of how such a model may look like is given below.\u003cbr\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cspan class\u003d\"image\"\u003e\u003cimg src\u003d\"images/ModelClassBetterOopDiagram.png\" alt\u003d\"ModelClassBetterOopDiagram\" width\u003d\"800\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Design-Storage\"\u003e2.5. Storage component\u003c/h3\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/StorageClassDiagram.png\" alt\u003d\"StorageClassDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 8. Structure of the Storage Component\u003c/div\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e : \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/storage/Storage.java\"\u003e\u003ccode\u003eStorage.java\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eStorage\u003c/code\u003e component,\u003c/p\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ecan save \u003ccode\u003eUserPref\u003c/code\u003e objects in json format and read it back.\u003c/p\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ecan save the Address Book data in json format and read it back.\u003c/p\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Design-Commons\"\u003e2.6. Common classes\u003c/h3\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eClasses used by multiple components are in the \u003ccode\u003eseedu.addressbook.commons\u003c/code\u003e package.\u003c/p\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_implementation\"\u003e3. Implementation\u003c/h2\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThis section describes some noteworthy details on how certain features are implemented.\u003c/p\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_undo_redo_feature\"\u003e3.1. Undo/Redo feature\u003c/h3\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_current_implementation\"\u003e3.1.1. Current Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe undo/redo mechanism is facilitated by \u003ccode\u003eVersionedAddressBook\u003c/code\u003e."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "It extends \u003ccode\u003eAddressBook\u003c/code\u003e with an undo/redo history, stored internally as an \u003ccode\u003eaddressBookStateList\u003c/code\u003e and \u003ccode\u003ecurrentStatePointer\u003c/code\u003e."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Additionally, it implements the following operations:\u003c/p\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eVersionedAddressBook#commit()\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;Saves the current address book state in its history.\u003c/p\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eVersionedAddressBook#undo()\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;Restores the previous address book state from its history.\u003c/p\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eVersionedAddressBook#redo()\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;Restores a previously undone address book state from its history.\u003c/p\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThese operations are exposed in the \u003ccode\u003eModel\u003c/code\u003e interface as \u003ccode\u003eModel#commitAddressBook()\u003c/code\u003e, \u003ccode\u003eModel#undoAddressBook()\u003c/code\u003e and \u003ccode\u003eModel#redoAddressBook()\u003c/code\u003e respectively.\u003c/p\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eGiven below is an example usage scenario and how the undo/redo mechanism behaves at each step.\u003c/p\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 1. The user launches the application for the first time. The \u003ccode\u003eVersionedAddressBook\u003c/code\u003e will be initialized with the initial address book state, and the \u003ccode\u003ecurrentStatePointer\u003c/code\u003e pointing to that single address book state.\u003c/p\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UndoRedoStartingStateListDiagram.png\" alt\u003d\"UndoRedoStartingStateListDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 2. The user executes \u003ccode\u003edelete 5\u003c/code\u003e command to delete the 5th person in the address book. The \u003ccode\u003edelete\u003c/code\u003e command calls \u003ccode\u003eModel#commitAddressBook()\u003c/code\u003e, causing the modified state of the address book after the \u003ccode\u003edelete 5\u003c/code\u003e command executes to be saved in the \u003ccode\u003eaddressBookStateList\u003c/code\u003e, and the \u003ccode\u003ecurrentStatePointer\u003c/code\u003e is shifted to the newly inserted address book state.\u003c/p\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UndoRedoNewCommand1StateListDiagram.png\" alt\u003d\"UndoRedoNewCommand1StateListDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 3. The user executes \u003ccode\u003eadd n/David \u0026#8230;\u0026#8203;\u003c/code\u003e to add a new person. The \u003ccode\u003eadd\u003c/code\u003e command also calls \u003ccode\u003eModel#commitAddressBook()\u003c/code\u003e, causing another modified address book state to be saved into the \u003ccode\u003eaddressBookStateList\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UndoRedoNewCommand2StateListDiagram.png\" alt\u003d\"UndoRedoNewCommand2StateListDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "If a command fails its execution, it will not call \u003ccode\u003eModel#commitAddressBook()\u003c/code\u003e, so the address book state will not be saved into the \u003ccode\u003eaddressBookStateList\u003c/code\u003e."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the \u003ccode\u003eundo\u003c/code\u003e command. The \u003ccode\u003eundo\u003c/code\u003e command will call \u003ccode\u003eModel#undoAddressBook()\u003c/code\u003e, which will shift the \u003ccode\u003ecurrentStatePointer\u003c/code\u003e once to the left, pointing it to the previous address book state, and restores the address book to that state.\u003c/p\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UndoRedoExecuteUndoStateListDiagram.png\" alt\u003d\"UndoRedoExecuteUndoStateListDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "If the \u003ccode\u003ecurrentStatePointer\u003c/code\u003e is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The \u003ccode\u003eundo\u003c/code\u003e command uses \u003ccode\u003eModel#canUndoAddressBook()\u003c/code\u003e to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe following sequence diagram shows how the undo operation works:\u003c/p\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UndoRedoSequenceDiagram.png\" alt\u003d\"UndoRedoSequenceDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eredo\u003c/code\u003e command does the opposite\u0026#8201;\u0026#8212;\u0026#8201;it calls \u003ccode\u003eModel#redoAddressBook()\u003c/code\u003e, which shifts the \u003ccode\u003ecurrentStatePointer\u003c/code\u003e once to the right, pointing to the previously undone state, and restores the address book to that state.\u003c/p\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "If the \u003ccode\u003ecurrentStatePointer\u003c/code\u003e is at index \u003ccode\u003eaddressBookStateList.size() - 1\u003c/code\u003e, pointing to the latest address book state, then there are no undone address book states to restore. The \u003ccode\u003eredo\u003c/code\u003e command uses \u003ccode\u003eModel#canRedoAddressBook()\u003c/code\u003e to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 5. The user then decides to execute the command \u003ccode\u003elist\u003c/code\u003e. Commands that do not modify the address book, such as \u003ccode\u003elist\u003c/code\u003e, will usually not call \u003ccode\u003eModel#commitAddressBook()\u003c/code\u003e, \u003ccode\u003eModel#undoAddressBook()\u003c/code\u003e or \u003ccode\u003eModel#redoAddressBook()\u003c/code\u003e. Thus, the \u003ccode\u003eaddressBookStateList\u003c/code\u003e remains unchanged.\u003c/p\u003e"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UndoRedoNewCommand3StateListDiagram.png\" alt\u003d\"UndoRedoNewCommand3StateListDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 6. The user executes \u003ccode\u003eclear\u003c/code\u003e, which calls \u003ccode\u003eModel#commitAddressBook()\u003c/code\u003e. Since the \u003ccode\u003ecurrentStatePointer\u003c/code\u003e is not pointing at the end of the \u003ccode\u003eaddressBookStateList\u003c/code\u003e, all address book states after the \u003ccode\u003ecurrentStatePointer\u003c/code\u003e will be purged. We designed it this way because it no longer makes sense to redo the \u003ccode\u003eadd n/David \u0026#8230;\u0026#8203;\u003c/code\u003e command. This is the behavior that most modern desktop applications follow.\u003c/p\u003e"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UndoRedoNewCommand4StateListDiagram.png\" alt\u003d\"UndoRedoNewCommand4StateListDiagram\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe following activity diagram summarizes what happens when a user executes a new command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/UndoRedoActivityDiagram.png\" alt\u003d\"UndoRedoActivityDiagram\" width\u003d\"650\"\u003e"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_design_considerations\"\u003e3.1.2. Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"_aspect_how_undo_redo_executes\"\u003eAspect: How undo \u0026amp; redo executes\u003c/h5\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e Saves the entire address book.\u003c/p\u003e"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePros: Easy to implement.\u003c/p\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCons: May have performance issues in terms of memory usage.\u003c/p\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e Individual command knows how to undo/redo by itself.\u003c/p\u003e"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePros: Will use less memory (e.g. for \u003ccode\u003edelete\u003c/code\u003e, just save the person being deleted).\u003c/p\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCons: We must ensure that the implementation of each individual command are correct.\u003c/p\u003e"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"_aspect_data_structure_to_support_the_undo_redo_commands\"\u003eAspect: Data structure to support the undo/redo commands\u003c/h5\u003e"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e Use a list to store the history of address book states.\u003c/p\u003e"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project.\u003c/p\u003e"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both \u003ccode\u003eHistoryManager\u003c/code\u003e and \u003ccode\u003eVersionedAddressBook\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e Use \u003ccode\u003eHistoryManager\u003c/code\u003e for undo/redo\u003c/p\u003e"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePros: We do not need to maintain a separate list, and just reuse what is already in the codebase.\u003c/p\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as \u003ccode\u003eHistoryManager\u003c/code\u003e now needs to do two different things.\u003c/p\u003e"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_favorite_system\"\u003e3.2. Favorite System\u003c/h3\u003e"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_current_implementation_2\"\u003e3.2.1. Current Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe favorite system is facilitated by \u003ccode\u003eAddressBook\u003c/code\u003e,"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "It extends the address book system by allowing the user to save favorites, stored internally as a \u003ccode\u003eUniquePersonList\u003c/code\u003e."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Additionally, it implements the following operations:\u003c/p\u003e"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eAddressBook#addFavorites()\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;Saves the person into the favorites list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eAddressBook#getFavoritesList()\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;Returns a list of all favorite persons.\u003c/p\u003e"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThese operations are exposed in the \u003ccode\u003eModel\u003c/code\u003e interface as \u003ccode\u003eModel#addFavorites()\u003c/code\u003e and \u003ccode\u003eModel#getFavoritesList()\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eGiven below is an example usage scenario of how the favorite mechanism behaves at each step.\u003c/p\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 1. The user launches the application for the first time. An empty UniquePersonList is created in \u003ccode\u003eAddressBook\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 2. The user executes \u003ccode\u003efavorite Alex\u003c/code\u003e to save the person Alex into their favorites list. The favorite command creates a new \u003ccode\u003eNameContainsKeywordsPredicate\u003c/code\u003e updating the filteredPersonList and calls \u003ccode\u003eModel#addFavorites()\u003c/code\u003e and \u003ccode\u003eModel#commitAddressBook\u003c/code\u003e thereby updating the favorites list stored in \u003ccode\u003eAddressBook\u003c/code\u003e and updating the filteredPersonList.\u003c/p\u003e"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 3. The user repeats this a few times, adding a few other persons.\u003c/p\u003e"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eStep 4. The user wants to view all favorites and executes \u003ccode\u003elistFav\u003c/code\u003e to view all favorites. This creates a new \u003ccode\u003ePersonIsFavoritePredicate\u003c/code\u003e which is passed in a model and calls \u003ccode\u003eModel#getFavoritesList\u003c/code\u003e and check if it contains the person. The command class then calls \u003ccode\u003eModel#updateFilteredPersonList\u003c/code\u003e with the predicate to only display all filtered (favorite) persons.\u003c/p\u003e"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "We must still implement persistent storage of favorite lists and deleting favorites."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/favoriteActivityDiagram.png\" alt\u003d\"favoriteActivityDiagram\" width\u003d\"650\"\u003e"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_design_considerations_2\"\u003e3.2.2. Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"_aspect_data_structure_to_save_the_favorites\"\u003eAspect: Data structure to save the favorites\u003c/h5\u003e"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e Save all favorites using a simple list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePros: Easy to implement.\u003c/p\u003e"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCons: May have runtime issues in deleting if the list gets large.\u003c/p\u003e"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e Linked list to store favorites.\u003c/p\u003e"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePros: Efficient to delete favorites from anywhere in the list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCons: We must ensure that the implementation is proper as there is a lot of complexity."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "_\u003c/p\u003e"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_logging\"\u003e3.3. Logging\u003c/h3\u003e"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe are using \u003ccode\u003ejava.util.logging\u003c/code\u003e package for logging. The \u003ccode\u003eLogsCenter\u003c/code\u003e class is used to manage the logging levels and logging destinations.\u003c/p\u003e"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe logging level can be controlled using the \u003ccode\u003elogLevel\u003c/code\u003e setting in the configuration file (See \u003ca href\u003d\"#Implementation-Configuration\"\u003eConfiguration\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogger\u003c/code\u003e for a class can be obtained using \u003ccode\u003eLogsCenter.getLogger(Class)\u003c/code\u003e which will log messages according to the specified logging level\u003c/p\u003e"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCurrently log messages are output through: \u003ccode\u003eConsole\u003c/code\u003e and to a \u003ccode\u003e.log\u003c/code\u003e file.\u003c/p\u003e"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eLogging Levels\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eSEVERE\u003c/code\u003e : Critical problem detected which may possibly cause the termination of the application\u003c/p\u003e"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eWARNING\u003c/code\u003e : Can continue, but with caution\u003c/p\u003e"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eINFO\u003c/code\u003e : Information showing the noteworthy actions by the App\u003c/p\u003e"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eFINE\u003c/code\u003e : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size\u003c/p\u003e"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Implementation-Configuration\"\u003e3.4. Configuration\u003c/h3\u003e"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCertain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: \u003ccode\u003econfig.json\u003c/code\u003e).\u003c/p\u003e"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_three_new_attributes_salary_occupation_relationship\"\u003e3.5. Three new attributes: Salary, Occupation, Relationship\u003c/h3\u003e"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_current_implementation_3\"\u003e3.5.1. Current Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe add Command is modified in this enhancement. Previously, user can only add a person\u0026#8217;s name, phone number, address and tags to the address book."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "After this enhancement, following attributes are added to the person\u0026#8217;s information:\u003c/p\u003e"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eSALARY\u003c/code\u003e: salary must be a string with more than one digits\u003c/p\u003e"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eOCCUPATION\u003c/code\u003e: occupation can be a string with any characters\u003c/p\u003e"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eRELATIONSHIP\u003c/code\u003e: relationship must be a string with one word (no blank allowed)\u003c/p\u003e"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"_how_to_implement_the_command\"\u003eHow to implement the command\u003c/h5\u003e"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUsers just input:"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "add n/NAME p/PHONE e/EMAIL a/ADDRESS s/SALARY o/OCCUPATION r/RELATIONSHIP [t/TAG]"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Example: add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 s/100000o/bankerr/singlet/friends t/owesMoney\u003c/p\u003e"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"_pros_and_cons\"\u003ePros and Cons\u003c/h5\u003e"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePros: Easy to implement, and the add format just follows the previous version\u003c/p\u003e"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCons: When implementing add Command, Users must add all information except the optional TAG attribute, this makes the command not flexible enough\u003c/p\u003e"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_documentation\"\u003e4. Documentation\u003c/h2\u003e"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe use asciidoc for writing documentation.\u003c/p\u003e"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_editing_documentation\"\u003e4.1. Editing Documentation\u003c/h3\u003e"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee \u003ca href\u003d\"UsingGradle.html#rendering-asciidoc-files\"\u003eUsingGradle.adoc\u003c/a\u003e to learn how to render \u003ccode\u003e.adoc\u003c/code\u003e files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your \u003ccode\u003e.adoc\u003c/code\u003e files in real-time.\u003c/p\u003e"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_publishing_documentation\"\u003e4.2. Publishing Documentation\u003c/h3\u003e"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee \u003ca href\u003d\"UsingTravis.html#deploying-github-pages\"\u003eUsingTravis.adoc\u003c/a\u003e to learn how to deploy GitHub Pages using Travis.\u003c/p\u003e"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_converting_documentation_to_pdf_format\"\u003e4.3. Converting Documentation to PDF format\u003c/h3\u003e"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe use \u003ca href\u003d\"https://www.google.com/chrome/browser/desktop/\"\u003eGoogle Chrome\u003c/a\u003e for converting documentation to PDF format, as Chrome\u0026#8217;s PDF engine preserves hyperlinks used in webpages.\u003c/p\u003e"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHere are the steps to convert the project documentation files to PDF format.\u003c/p\u003e"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFollow the instructions in \u003ca href\u003d\"UsingGradle.html#rendering-asciidoc-files\"\u003eUsingGradle.adoc\u003c/a\u003e to convert the AsciiDoc files in the \u003ccode\u003edocs/\u003c/code\u003e directory to HTML format.\u003c/p\u003e"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eGo to your generated HTML files in the \u003ccode\u003ebuild/docs\u003c/code\u003e folder, right click on them and select \u003ccode\u003eOpen with\u003c/code\u003e \u0026#8594; \u003ccode\u003eGoogle Chrome\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWithin Chrome, click on the \u003ccode\u003ePrint\u003c/code\u003e option in Chrome\u0026#8217;s menu.\u003c/p\u003e"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSet the destination to \u003ccode\u003eSave as PDF\u003c/code\u003e, then click \u003ccode\u003eSave\u003c/code\u003e to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below.\u003c/p\u003e"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/chrome_save_as_pdf.png\" alt\u003d\"chrome save as pdf\" width\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 9. Saving documentation as PDF files in Chrome\u003c/div\u003e"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Docs-SiteWideDocSettings\"\u003e4.4. Site-wide Documentation Settings\u003c/h3\u003e"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/build.gradle\"\u003e\u003ccode\u003ebuild.gradle\u003c/code\u003e\u003c/a\u003e file specifies some project-specific \u003ca href\u003d\"https://asciidoctor.org/docs/user-manual/#attributes\"\u003easciidoc attributes\u003c/a\u003e which affects how all documentation files within this project are rendered.\u003c/p\u003e"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Attributes left unset in the \u003ccode\u003ebuild.gradle\u003c/code\u003e file will use their \u003cstrong\u003edefault value\u003c/strong\u003e, if any."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccaption class\u003d\"title\"\u003eTable 1. List of site-wide attributes\u003c/caption\u003e"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 25%;\"\u003e"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 50%;\"\u003e"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 25%;\"\u003e"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eAttribute name\u003c/th\u003e"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eDescription\u003c/th\u003e"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eDefault value\u003c/th\u003e"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003esite-name\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cdiv\u003e\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe name of the website."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "If set, the name will be displayed near the top of the page.\u003c/p\u003e"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e\u003c/div\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003enot set\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003esite-githuburl\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cdiv\u003e\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eURL to the site\u0026#8217;s repository on \u003ca href\u003d\"https://github.com\"\u003eGitHub\u003c/a\u003e."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar.\u003c/p\u003e"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e\u003c/div\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003enot set\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003esite-seedu\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cdiv\u003e\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDefine this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items.\u003c/p\u003e"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e\u003c/div\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003enot set\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"Docs-PerFileDocSettings\"\u003e4.5. Per-file Documentation Settings\u003c/h3\u003e"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEach \u003ccode\u003e.adoc\u003c/code\u003e file may also specify some file-specific \u003ca href\u003d\"https://asciidoctor.org/docs/user-manual/#attributes\"\u003easciidoc attributes\u003c/a\u003e which affects how the file is rendered.\u003c/p\u003e"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAsciidoctor\u0026#8217;s \u003ca href\u003d\"https://asciidoctor.org/docs/user-manual/#builtin-attributes\"\u003ebuilt-in attributes\u003c/a\u003e may be specified and used as well.\u003c/p\u003e"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Attributes left unset in \u003ccode\u003e.adoc\u003c/code\u003e files will use their \u003cstrong\u003edefault value\u003c/strong\u003e, if any."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccaption class\u003d\"title\"\u003eTable 2. List of per-file attributes, excluding Asciidoctor\u0026#8217;s built-in attributes\u003c/caption\u003e"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 25%;\"\u003e"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 50%;\"\u003e"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 25%;\"\u003e"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eAttribute name\u003c/th\u003e"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eDescription\u003c/th\u003e"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eDefault value\u003c/th\u003e"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003esite-section\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cdiv\u003e\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSite section that the document belongs to."
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "One of: \u003ccode\u003eUserGuide\u003c/code\u003e, \u003ccode\u003eDeveloperGuide\u003c/code\u003e, \u003ccode\u003eLearningOutcomes\u003c/code\u003e*, \u003ccode\u003eAboutUs\u003c/code\u003e, \u003ccode\u003eContactUs\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e* Official SE-EDU projects only\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e\u003c/div\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003enot set\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003eno-site-header\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cdiv\u003e\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSet this attribute to remove the site navigation bar.\u003c/p\u003e"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e\u003c/div\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003enot set\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_site_template\"\u003e4.6. Site Template\u003c/h3\u003e"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe files in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/docs/stylesheets\"\u003e\u003ccode\u003edocs/stylesheets\u003c/code\u003e\u003c/a\u003e are the \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS\"\u003eCSS stylesheets\u003c/a\u003e of the site."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "You can modify them to change some properties of the site\u0026#8217;s design.\u003c/p\u003e"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe files in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/docs/templates\"\u003e\u003ccode\u003edocs/templates\u003c/code\u003e\u003c/a\u003e controls the rendering of \u003ccode\u003e.adoc\u003c/code\u003e files into HTML5."
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "These template files are written in a mixture of \u003ca href\u003d\"https://www.ruby-lang.org\"\u003eRuby\u003c/a\u003e and \u003ca href\u003d\"http://slim-lang.com\"\u003eSlim\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock warning\"\u003e"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eWarning\u003c/div\u003e"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModifying the template files in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/docs/templates\"\u003e\u003ccode\u003edocs/templates\u003c/code\u003e\u003c/a\u003e requires some knowledge and experience with Ruby and Asciidoctor\u0026#8217;s API."
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "You should only modify them if you need greater control over the site\u0026#8217;s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "The SE-EDU team does not provide support for modified template files.\u003c/p\u003e"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"Testing\"\u003e5. Testing\u003c/h2\u003e"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_running_tests\"\u003e5.1. Running Tests\u003c/h3\u003e"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThere are three ways to run tests.\u003c/p\u003e"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMethod 1: Using IntelliJ JUnit test runner\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTo run all tests, right-click on the \u003ccode\u003esrc/test/java\u003c/code\u003e folder and choose \u003ccode\u003eRun \u0027All Tests\u0027\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTo run a subset of tests, you can right-click on a test package, test class, or a test and choose \u003ccode\u003eRun \u0027ABC\u0027\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMethod 2: Using Gradle\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOpen a console and run the command \u003ccode\u003egradlew clean allTests\u003c/code\u003e (Mac/Linux: \u003ccode\u003e./gradlew clean allTests\u003c/code\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "See \u003ca href\u003d\"UsingGradle.html\"\u003eUsingGradle.adoc\u003c/a\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMethod 3: Using Gradle (headless)\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThanks to the \u003ca href\u003d\"https://github.com/TestFX/TestFX\"\u003eTestFX\u003c/a\u003e library we use, our GUI tests can be run in the \u003cem\u003eheadless\u003c/em\u003e mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running.\u003c/p\u003e"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTo run tests in headless mode, open a console and run the command \u003ccode\u003egradlew clean headless allTests\u003c/code\u003e (Mac/Linux: \u003ccode\u003e./gradlew clean headless allTests\u003c/code\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_types_of_tests\"\u003e5.2. Types of tests\u003c/h3\u003e"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe have two types of tests:\u003c/p\u003e"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eGUI Tests\u003c/strong\u003e - These are tests involving the GUI. They include,\u003c/p\u003e"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003eSystem Tests\u003c/em\u003e that test the entire App by simulating user actions on the GUI. These are in the \u003ccode\u003esystemtests\u003c/code\u003e package.\u003c/p\u003e"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003eUnit tests\u003c/em\u003e that test the individual components. These are in \u003ccode\u003eseedu.address.ui\u003c/code\u003e package.\u003c/p\u003e"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eNon-GUI Tests\u003c/strong\u003e - These are tests not involving the GUI. They include,\u003c/p\u003e"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003eUnit tests\u003c/em\u003e targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g. \u003ccode\u003eseedu.address.commons.StringUtilTest\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003eIntegration tests\u003c/em\u003e that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g. \u003ccode\u003eseedu.address.storage.StorageManagerTest\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g. \u003ccode\u003eseedu.address.logic.LogicManagerTest\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_troubleshooting_testing\"\u003e5.3. Troubleshooting Testing\u003c/h3\u003e"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eProblem: \u003ccode\u003eHelpWindowTest\u003c/code\u003e fails with a \u003ccode\u003eNullPointerException\u003c/code\u003e.\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eReason: One of its dependencies, \u003ccode\u003eHelpWindow.html\u003c/code\u003e in \u003ccode\u003esrc/main/resources/docs\u003c/code\u003e is missing.\u003c/p\u003e"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSolution: Execute Gradle task \u003ccode\u003eprocessResources\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_dev_ops\"\u003e6. Dev Ops\u003c/h2\u003e"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_build_automation\"\u003e6.1. Build Automation\u003c/h3\u003e"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee \u003ca href\u003d\"UsingGradle.html\"\u003eUsingGradle.adoc\u003c/a\u003e to learn how to use Gradle for build automation.\u003c/p\u003e"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_continuous_integration\"\u003e6.2. Continuous Integration\u003c/h3\u003e"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe use \u003ca href\u003d\"https://travis-ci.org/\"\u003eTravis CI\u003c/a\u003e and \u003ca href\u003d\"https://www.appveyor.com/\"\u003eAppVeyor\u003c/a\u003e to perform \u003cem\u003eContinuous Integration\u003c/em\u003e on our projects. See \u003ca href\u003d\"UsingTravis.html\"\u003eUsingTravis.adoc\u003c/a\u003e and \u003ca href\u003d\"UsingAppVeyor.html\"\u003eUsingAppVeyor.adoc\u003c/a\u003e for more details.\u003c/p\u003e"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_coverage_reporting\"\u003e6.3. Coverage Reporting\u003c/h3\u003e"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe use \u003ca href\u003d\"https://coveralls.io/\"\u003eCoveralls\u003c/a\u003e to track the code coverage of our projects. See \u003ca href\u003d\"UsingCoveralls.html\"\u003eUsingCoveralls.adoc\u003c/a\u003e for more details.\u003c/p\u003e"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_documentation_previews\"\u003e6.4. Documentation Previews\u003c/h3\u003e"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWhen a pull request has changes to asciidoc files, you can use \u003ca href\u003d\"https://www.netlify.com/\"\u003eNetlify\u003c/a\u003e to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003ca href\u003d\"UsingNetlify.html\"\u003eUsingNetlify.adoc\u003c/a\u003e for more details.\u003c/p\u003e"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_making_a_release\"\u003e6.5. Making a Release\u003c/h3\u003e"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHere are the steps to create a new release.\u003c/p\u003e"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUpdate the version number in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/MainApp.java\"\u003e\u003ccode\u003eMainApp.java\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eGenerate a JAR file \u003ca href\u003d\"UsingGradle.html#creating-the-jar-file\"\u003eusing Gradle\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTag the repo with the version number. e.g. \u003ccode\u003ev0.1\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"https://help.github.com/articles/creating-releases/\"\u003eCreate a new release using GitHub\u003c/a\u003e and upload the JAR file you created.\u003c/p\u003e"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_managing_dependencies\"\u003e6.6. Managing Dependencies\u003c/h3\u003e"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eA project often depends on third-party libraries. For example, Address Book depends on the \u003ca href\u003d\"https://github.com/FasterXML/jackson\"\u003eJackson library\u003c/a\u003e for JSON parsing. Managing these \u003cem\u003edependencies\u003c/em\u003e can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:\u003c/p\u003e"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eInclude those libraries in the repo (this bloats the repo size)\u003c/p\u003e"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eRequire developers to download those libraries manually (this creates extra work for developers)\u003c/p\u003e"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"GetStartedProgramming\"\u003eAppendix A: Suggested Programming Tasks to Get Started\u003c/h2\u003e"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSuggested path for new programmers:\u003c/p\u003e"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFirst, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003ca href\u003d\"#GetStartedProgramming-EachComponent\"\u003eImproving each component\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eNext, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003ca href\u003d\"#GetStartedProgramming-RemarkCommand\"\u003eCreating a new command: \u003ccode\u003eremark\u003c/code\u003e\u003c/a\u003e explains how to go about adding such a feature.\u003c/p\u003e"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"GetStartedProgramming-EachComponent\"\u003eA.1. Improving each component\u003c/h3\u003e"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEach individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work).\u003c/p\u003e"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"__code_logic_code_component\" class\u003d\"discrete\"\u003e\u003ccode\u003eLogic\u003c/code\u003e component\u003c/h4\u003e"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eScenario:\u003c/strong\u003e You are in charge of \u003ccode\u003elogic\u003c/code\u003e. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases.\u003c/p\u003e"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Do take a look at \u003ca href\u003d\"#Design-Logic\"\u003eLogic component\u003c/a\u003e before attempting to modify the \u003ccode\u003eLogic\u003c/code\u003e component."
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd a shorthand equivalent alias for each of the individual commands. For example, besides typing \u003ccode\u003eclear\u003c/code\u003e, the user can also type \u003ccode\u003ec\u003c/code\u003e to remove all persons in the list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHints\u003c/p\u003e"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eJust like we store each individual command word constant \u003ccode\u003eCOMMAND_WORD\u003c/code\u003e inside \u003ccode\u003e*Command.java\u003c/code\u003e (e.g.  \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/logic/commands/FindCommand.java\"\u003e\u003ccode\u003eFindCommand#COMMAND_WORD\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/logic/commands/DeleteCommand.java\"\u003e\u003ccode\u003eDeleteCommand#COMMAND_WORD\u003c/code\u003e\u003c/a\u003e), you need a new constant for aliases as well (e.g. \u003ccode\u003eFindCommand#COMMAND_ALIAS\u003c/code\u003e).\u003c/p\u003e"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/logic/parser/AddressBookParser.java\"\u003e\u003ccode\u003eAddressBookParser\u003c/code\u003e\u003c/a\u003e is responsible for analyzing command words.\u003c/p\u003e"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSolution\u003c/p\u003e"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify the switch statement in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/logic/parser/AddressBookParser.java\"\u003e\u003ccode\u003eAddressBookParser#parseCommand(String)\u003c/code\u003e\u003c/a\u003e such that both the proper command word and alias can be used to execute the same intended command.\u003c/p\u003e"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd new tests for each of the aliases that you have added.\u003c/p\u003e"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUpdate the user guide to document the new aliases.\u003c/p\u003e"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee this \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/pull/785\"\u003ePR\u003c/a\u003e for the full solution.\u003c/p\u003e"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"__code_model_code_component\" class\u003d\"discrete\"\u003e\u003ccode\u003eModel\u003c/code\u003e component\u003c/h4\u003e"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eScenario:\u003c/strong\u003e You are in charge of \u003ccode\u003emodel\u003c/code\u003e. One day, the \u003ccode\u003elogic\u003c/code\u003e-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command.\u003c/p\u003e"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Do take a look at \u003ca href\u003d\"#Design-Model\"\u003eModel component\u003c/a\u003e before attempting to modify the \u003ccode\u003eModel\u003c/code\u003e component."
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd a \u003ccode\u003eremoveTag(Tag)\u003c/code\u003e method. The specified tag will be removed from everyone in the address book.\u003c/p\u003e"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHints\u003c/p\u003e"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/Model.java\"\u003e\u003ccode\u003eModel\u003c/code\u003e\u003c/a\u003e and the \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/AddressBook.java\"\u003e\u003ccode\u003eAddressBook\u003c/code\u003e\u003c/a\u003e API need to be updated.\u003c/p\u003e"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThink about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?\u003c/p\u003e"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFind out which of the existing API methods in  \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/AddressBook.java\"\u003e\u003ccode\u003eAddressBook\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/person/Person.java\"\u003e\u003ccode\u003ePerson\u003c/code\u003e\u003c/a\u003e classes can be used to implement the tag removal logic. \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/AddressBook.java\"\u003e\u003ccode\u003eAddressBook\u003c/code\u003e\u003c/a\u003e allows you to update a person, and \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/person/Person.java\"\u003e\u003ccode\u003ePerson\u003c/code\u003e\u003c/a\u003e allows you to update the tags.\u003c/p\u003e"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSolution\u003c/p\u003e"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eImplement a \u003ccode\u003eremoveTag(Tag)\u003c/code\u003e method in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/AddressBook.java\"\u003e\u003ccode\u003eAddressBook\u003c/code\u003e\u003c/a\u003e. Loop through each person, and remove the \u003ccode\u003etag\u003c/code\u003e from each person.\u003c/p\u003e"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd a new API method \u003ccode\u003edeleteTag(Tag)\u003c/code\u003e in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/ModelManager.java\"\u003e\u003ccode\u003eModelManager\u003c/code\u003e\u003c/a\u003e. Your \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/ModelManager.java\"\u003e\u003ccode\u003eModelManager\u003c/code\u003e\u003c/a\u003e should call \u003ccode\u003eAddressBook#removeTag(Tag)\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd new tests for each of the new public methods that you have added.\u003c/p\u003e"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee this \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/pull/790\"\u003ePR\u003c/a\u003e for the full solution.\u003c/p\u003e"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"__code_ui_code_component\" class\u003d\"discrete\"\u003e\u003ccode\u003eUi\u003c/code\u003e component\u003c/h4\u003e"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eScenario:\u003c/strong\u003e You are in charge of \u003ccode\u003eui\u003c/code\u003e. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0026#8217;t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems.\u003c/p\u003e"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Do take a look at \u003ca href\u003d\"#Design-Ui\"\u003eUI component\u003c/a\u003e before attempting to modify the \u003ccode\u003eUI\u003c/code\u003e component."
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse different colors for different tags inside person cards. For example, \u003ccode\u003efriends\u003c/code\u003e tags can be all in brown, and \u003ccode\u003ecolleagues\u003c/code\u003e tags can be all in yellow.\u003c/p\u003e"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eBefore\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/getting-started-ui-tag-before.png\" alt\u003d\"getting started ui tag before\" width\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAfter\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/getting-started-ui-tag-after.png\" alt\u003d\"getting started ui tag after\" width\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHints\u003c/p\u003e"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe tag labels are created inside \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/PersonCard.java\"\u003ethe \u003ccode\u003ePersonCard\u003c/code\u003e constructor\u003c/a\u003e (\u003ccode\u003enew Label(tag.tagName)\u003c/code\u003e). \u003ca href\u003d\"https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html\"\u003eJavaFX\u0026#8217;s \u003ccode\u003eLabel\u003c/code\u003e class\u003c/a\u003e allows you to modify the style of each Label, such as changing its color.\u003c/p\u003e"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse the .css attribute \u003ccode\u003e-fx-background-color\u003c/code\u003e to add a color.\u003c/p\u003e"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eYou may wish to modify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/resources/view/DarkTheme.css\"\u003e\u003ccode\u003eDarkTheme.css\u003c/code\u003e\u003c/a\u003e to include some pre-defined colors using css, especially if you have experience with web-based css.\u003c/p\u003e"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSolution\u003c/p\u003e"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eYou can modify the existing test methods for \u003ccode\u003ePersonCard\u003c/code\u003e \u0027s to include testing the tag\u0026#8217;s color as well.\u003c/p\u003e"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee this \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/pull/798\"\u003ePR\u003c/a\u003e for the full solution.\u003c/p\u003e"
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes.\u003c/p\u003e"
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java\"\u003e\u003ccode\u003eNewResultAvailableEvent\u003c/code\u003e\u003c/a\u003e such that \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/ResultDisplay.java\"\u003e\u003ccode\u003eResultDisplay\u003c/code\u003e\u003c/a\u003e can show a different style on error (currently it shows the same regardless of errors).\u003c/p\u003e"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eBefore\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/getting-started-ui-result-before.png\" alt\u003d\"getting started ui result before\" width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAfter\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/getting-started-ui-result-after.png\" alt\u003d\"getting started ui result after\" width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHints\u003c/p\u003e"
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java\"\u003e\u003ccode\u003eNewResultAvailableEvent\u003c/code\u003e\u003c/a\u003e is raised by \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/CommandBox.java\"\u003e\u003ccode\u003eCommandBox\u003c/code\u003e\u003c/a\u003e which also knows whether the result is a success or failure, and is caught by \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/ResultDisplay.java\"\u003e\u003ccode\u003eResultDisplay\u003c/code\u003e\u003c/a\u003e which is where we want to change the style to.\u003c/p\u003e"
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eRefer to \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/CommandBox.java\"\u003e\u003ccode\u003eCommandBox\u003c/code\u003e\u003c/a\u003e for an example on how to display an error.\u003c/p\u003e"
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSolution\u003c/p\u003e"
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java\"\u003e\u003ccode\u003eNewResultAvailableEvent\u003c/code\u003e\u003c/a\u003e \u0027s constructor so that users of the event can indicate whether an error has occurred.\u003c/p\u003e"
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/ResultDisplay.java\"\u003e\u003ccode\u003eResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)\u003c/code\u003e\u003c/a\u003e to react to this event appropriately.\u003c/p\u003e"
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eYou can write two different kinds of tests to ensure that the functionality works:\u003c/p\u003e"
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe unit tests for \u003ccode\u003eResultDisplay\u003c/code\u003e can be modified to include verification of the color.\u003c/p\u003e"
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe system tests \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/systemtests/AddressBookSystemTest.java\"\u003e\u003ccode\u003eAddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()\u003c/code\u003e\u003c/a\u003e to include verification for \u003ccode\u003eResultDisplay\u003c/code\u003e as well.\u003c/p\u003e"
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee this \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/pull/799\"\u003ePR\u003c/a\u003e for the full solution.\u003c/p\u003e"
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDo read the commits one at a time if you feel overwhelmed.\u003c/p\u003e"
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify the \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/StatusBarFooter.java\"\u003e\u003ccode\u003eStatusBarFooter\u003c/code\u003e\u003c/a\u003e to show the total number of people in the address book.\u003c/p\u003e"
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eBefore\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/getting-started-ui-status-before.png\" alt\u003d\"getting started ui status before\" width\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAfter\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/getting-started-ui-status-after.png\" alt\u003d\"getting started ui status after\" width\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHints\u003c/p\u003e"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/resources/view/StatusBarFooter.fxml\"\u003e\u003ccode\u003eStatusBarFooter.fxml\u003c/code\u003e\u003c/a\u003e will need a new \u003ccode\u003eStatusBar\u003c/code\u003e. Be sure to set the \u003ccode\u003eGridPane.columnIndex\u003c/code\u003e properly for each \u003ccode\u003eStatusBar\u003c/code\u003e to avoid misalignment!\u003c/p\u003e"
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/StatusBarFooter.java\"\u003e\u003ccode\u003eStatusBarFooter\u003c/code\u003e\u003c/a\u003e needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated.\u003c/p\u003e"
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSolution\u003c/p\u003e"
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify the constructor of \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/StatusBarFooter.java\"\u003e\u003ccode\u003eStatusBarFooter\u003c/code\u003e\u003c/a\u003e to take in the number of persons when the application just started.\u003c/p\u003e"
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/StatusBarFooter.java\"\u003e\u003ccode\u003eStatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)\u003c/code\u003e\u003c/a\u003e to update the number of persons whenever there are new changes to the addressbook.\u003c/p\u003e"
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFor tests, modify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/guitests/guihandles/StatusBarFooterHandle.java\"\u003e\u003ccode\u003eStatusBarFooterHandle\u003c/code\u003e\u003c/a\u003e by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status.\u003c/p\u003e"
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFor system tests, modify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/systemtests/AddressBookSystemTest.java\"\u003e\u003ccode\u003eAddressBookSystemTest\u003c/code\u003e\u003c/a\u003e to also verify the new total number of persons status bar.\u003c/p\u003e"
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee this \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/pull/803\"\u003ePR\u003c/a\u003e for the full solution.\u003c/p\u003e"
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"__code_storage_code_component\" class\u003d\"discrete\"\u003e\u003ccode\u003eStorage\u003c/code\u003e component\u003c/h4\u003e"
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eScenario:\u003c/strong\u003e You are in charge of \u003ccode\u003estorage\u003c/code\u003e. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage.\u003c/p\u003e"
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Do take a look at \u003ca href\u003d\"#Design-Storage\"\u003eStorage component\u003c/a\u003e before attempting to modify the \u003ccode\u003eStorage\u003c/code\u003e component."
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd a new method \u003ccode\u003ebackupAddressBook(ReadOnlyAddressBook)\u003c/code\u003e, so that the address book can be saved in a fixed temporary location.\u003c/p\u003e"
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eHint\u003c/p\u003e"
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd the API method in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/storage/AddressBookStorage.java\"\u003e\u003ccode\u003eAddressBookStorage\u003c/code\u003e\u003c/a\u003e interface.\u003c/p\u003e"
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eImplement the logic in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/storage/StorageManager.java\"\u003e\u003ccode\u003eStorageManager\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/storage/JsonAddressBookStorage.java\"\u003e\u003ccode\u003eJsonAddressBookStorage\u003c/code\u003e\u003c/a\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSolution\u003c/p\u003e"
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee this \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/pull/594\"\u003ePR\u003c/a\u003e for the full solution.\u003c/p\u003e"
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2212,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2213,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2214,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2215,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2216,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2217,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2218,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2219,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2220,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2221,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2222,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 2223,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"GetStartedProgramming-RemarkCommand\"\u003eA.2. Creating a new command: \u003ccode\u003eremark\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 2224,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2225,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eBy creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app.\u003c/p\u003e"
      },
      {
        "lineNumber": 2226,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2227,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2228,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eScenario:\u003c/strong\u003e You are a software maintainer for \u003ccode\u003eaddressbook\u003c/code\u003e, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible \u003ccode\u003eremark\u003c/code\u003e field for each contact, rather than relying on tags alone. After designing the specification for the \u003ccode\u003eremark\u003c/code\u003e command, you are convinced that this feature is worth implementing. Your job is to implement the \u003ccode\u003eremark\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 2229,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2230,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 2231,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_description\"\u003eA.2.1. Description\u003c/h4\u003e"
      },
      {
        "lineNumber": 2232,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2233,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEdits the remark for a person specified in the \u003ccode\u003eINDEX\u003c/code\u003e.\u003cbr\u003e"
      },
      {
        "lineNumber": 2234,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eremark INDEX r/[REMARK]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2235,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2236,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2237,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 2238,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2239,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2240,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2241,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2242,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eremark 1 r/Likes to drink coffee.\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 2243,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Edits the remark for the first person to \u003ccode\u003eLikes to drink coffee.\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2244,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2245,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2246,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eremark 1 r/\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 2247,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Removes the remark for the first person.\u003c/p\u003e"
      },
      {
        "lineNumber": 2248,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2249,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2250,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2251,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2252,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 2253,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_step_by_step_instructions\"\u003eA.2.2. Step-by-step Instructions\u003c/h4\u003e"
      },
      {
        "lineNumber": 2254,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2255,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_1_logic_teach_the_app_to_accept_remark_which_does_nothing\"\u003e[Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing\u003c/h5\u003e"
      },
      {
        "lineNumber": 2256,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2257,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLet\u0026#8217;s start by teaching the application how to parse a \u003ccode\u003eremark\u003c/code\u003e command. We will add the logic of \u003ccode\u003eremark\u003c/code\u003e later.\u003c/p\u003e"
      },
      {
        "lineNumber": 2258,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2259,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2260,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMain:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2261,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2262,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2263,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2264,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2265,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd a \u003ccode\u003eRemarkCommand\u003c/code\u003e that extends \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/logic/commands/Command.java\"\u003e\u003ccode\u003eCommand\u003c/code\u003e\u003c/a\u003e. Upon execution, it should just throw an \u003ccode\u003eException\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2266,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2267,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2268,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/logic/parser/AddressBookParser.java\"\u003e\u003ccode\u003eAddressBookParser\u003c/code\u003e\u003c/a\u003e to accept a \u003ccode\u003eRemarkCommand\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2269,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2270,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2271,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2272,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2273,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTests:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2274,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2275,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2276,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2277,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2278,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd \u003ccode\u003eRemarkCommandTest\u003c/code\u003e that tests that \u003ccode\u003eexecute()\u003c/code\u003e throws an Exception.\u003c/p\u003e"
      },
      {
        "lineNumber": 2279,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2280,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2281,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd new test method to \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java\"\u003e\u003ccode\u003eAddressBookParserTest\u003c/code\u003e\u003c/a\u003e, which tests that typing \"remark\" returns an instance of \u003ccode\u003eRemarkCommand\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2282,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2283,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2284,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2285,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2286,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2287,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_2_logic_teach_the_app_to_accept_remark_arguments\"\u003e[Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments\u003c/h5\u003e"
      },
      {
        "lineNumber": 2288,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2289,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLet\u0026#8217;s teach the application to parse arguments that our \u003ccode\u003eremark\u003c/code\u003e command will accept. E.g. \u003ccode\u003e1 r/Likes to drink coffee.\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2290,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2291,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2292,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMain:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2293,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2294,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2295,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2296,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2297,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ccode\u003eRemarkCommand\u003c/code\u003e to take in an \u003ccode\u003eIndex\u003c/code\u003e and \u003ccode\u003eString\u003c/code\u003e and print those two parameters as the error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2298,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2299,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2300,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd \u003ccode\u003eRemarkCommandParser\u003c/code\u003e that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027.\u003c/p\u003e"
      },
      {
        "lineNumber": 2301,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2302,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2303,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/logic/parser/AddressBookParser.java\"\u003e\u003ccode\u003eAddressBookParser\u003c/code\u003e\u003c/a\u003e to use the newly implemented \u003ccode\u003eRemarkCommandParser\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2304,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2305,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2306,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2307,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2308,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTests:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2309,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2310,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2311,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2312,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2313,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ccode\u003eRemarkCommandTest\u003c/code\u003e to test the \u003ccode\u003eRemarkCommand#equals()\u003c/code\u003e method.\u003c/p\u003e"
      },
      {
        "lineNumber": 2314,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2315,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2316,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd \u003ccode\u003eRemarkCommandParserTest\u003c/code\u003e that tests different boundary values"
      },
      {
        "lineNumber": 2317,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "for \u003ccode\u003eRemarkCommandParser\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2318,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2319,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2320,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java\"\u003e\u003ccode\u003eAddressBookParserTest\u003c/code\u003e\u003c/a\u003e to test that the correct command is generated according to the user input.\u003c/p\u003e"
      },
      {
        "lineNumber": 2321,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2322,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2323,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2324,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2325,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2326,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_3_ui_add_a_placeholder_for_remark_in_code_personcard_code\"\u003e[Step 3] Ui: Add a placeholder for remark in \u003ccode\u003ePersonCard\u003c/code\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 2327,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2328,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLet\u0026#8217;s add a placeholder on all our \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/PersonCard.java\"\u003e\u003ccode\u003ePersonCard\u003c/code\u003e\u003c/a\u003e s to display a remark for each person later.\u003c/p\u003e"
      },
      {
        "lineNumber": 2329,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2330,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2331,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMain:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2332,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2333,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2334,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2335,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2336,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd a \u003ccode\u003eLabel\u003c/code\u003e with any random text inside \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/resources/view/PersonListCard.fxml\"\u003e\u003ccode\u003ePersonListCard.fxml\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2337,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2338,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2339,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd FXML annotation in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/PersonCard.java\"\u003e\u003ccode\u003ePersonCard\u003c/code\u003e\u003c/a\u003e to tie the variable to the actual label.\u003c/p\u003e"
      },
      {
        "lineNumber": 2340,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2341,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2342,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2343,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2344,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTests:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2345,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2346,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2347,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2348,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2349,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/guitests/guihandles/PersonCardHandle.java\"\u003e\u003ccode\u003ePersonCardHandle\u003c/code\u003e\u003c/a\u003e so that future tests can read the contents of the remark label.\u003c/p\u003e"
      },
      {
        "lineNumber": 2350,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2351,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2352,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2353,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2354,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2355,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_4_model_add_code_remark_code_class\"\u003e[Step 4] Model: Add \u003ccode\u003eRemark\u003c/code\u003e class\u003c/h5\u003e"
      },
      {
        "lineNumber": 2356,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2357,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe have to properly encapsulate the remark in our \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/person/Person.java\"\u003e\u003ccode\u003ePerson\u003c/code\u003e\u003c/a\u003e class. Instead of just using a \u003ccode\u003eString\u003c/code\u003e, let\u0026#8217;s follow the conventional class structure that the codebase already uses by adding a \u003ccode\u003eRemark\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 2358,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2359,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2360,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMain:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2361,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2362,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2363,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2364,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2365,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd \u003ccode\u003eRemark\u003c/code\u003e to model component (you can copy from \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/person/Address.java\"\u003e\u003ccode\u003eAddress\u003c/code\u003e\u003c/a\u003e, remove the regex and change the names accordingly).\u003c/p\u003e"
      },
      {
        "lineNumber": 2366,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2367,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2368,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ccode\u003eRemarkCommand\u003c/code\u003e to now take in a \u003ccode\u003eRemark\u003c/code\u003e instead of a \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2369,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2370,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2371,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2372,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2373,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTests:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2374,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2375,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2376,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2377,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2378,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd test for \u003ccode\u003eRemark\u003c/code\u003e, to test the \u003ccode\u003eRemark#equals()\u003c/code\u003e method.\u003c/p\u003e"
      },
      {
        "lineNumber": 2379,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2380,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2381,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2382,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2383,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2384,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_5_model_modify_code_person_code_to_support_a_code_remark_code_field\"\u003e[Step 5] Model: Modify \u003ccode\u003ePerson\u003c/code\u003e to support a \u003ccode\u003eRemark\u003c/code\u003e field\u003c/h5\u003e"
      },
      {
        "lineNumber": 2385,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2386,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eNow we have the \u003ccode\u003eRemark\u003c/code\u003e class, we need to actually use it inside \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/person/Person.java\"\u003e\u003ccode\u003ePerson\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2387,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2388,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2389,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMain:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2390,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2391,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2392,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2393,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2394,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd \u003ccode\u003egetRemark()\u003c/code\u003e in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/person/Person.java\"\u003e\u003ccode\u003ePerson\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2395,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2396,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2397,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eYou may assume that the user will not be able to use the \u003ccode\u003eadd\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e commands to modify the remarks field (i.e. the person will be created without a remark).\u003c/p\u003e"
      },
      {
        "lineNumber": 2398,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2399,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2400,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/util/SampleDataUtil.java/\"\u003e\u003ccode\u003eSampleDataUtil\u003c/code\u003e\u003c/a\u003e to add remarks for the sample data (delete your \u003ccode\u003edata/addressbook.json\u003c/code\u003e so that the application will load the sample data when you launch it.)\u003c/p\u003e"
      },
      {
        "lineNumber": 2401,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2402,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2403,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2404,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2405,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2406,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_6_storage_add_code_remark_code_field_to_code_jsonadaptedperson_code_class\"\u003e[Step 6] Storage: Add \u003ccode\u003eRemark\u003c/code\u003e field to \u003ccode\u003eJsonAdaptedPerson\u003c/code\u003e class\u003c/h5\u003e"
      },
      {
        "lineNumber": 2407,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2408,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe now have \u003ccode\u003eRemark\u003c/code\u003e s for \u003ccode\u003ePerson\u003c/code\u003e s, but they will be gone when we exit the application. Let\u0026#8217;s modify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/storage/JsonAdaptedPerson.java\"\u003e\u003ccode\u003eJsonAdaptedPerson\u003c/code\u003e\u003c/a\u003e to include a \u003ccode\u003eRemark\u003c/code\u003e field so that it will be saved.\u003c/p\u003e"
      },
      {
        "lineNumber": 2409,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2410,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2411,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMain:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2412,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2413,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2414,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2415,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2416,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd a new JSON field for \u003ccode\u003eRemark\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2417,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2418,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2419,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2420,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2421,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTests:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2422,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2423,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2424,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2425,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2426,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFix \u003ccode\u003einvalidAndValidPersonAddressBook.json\u003c/code\u003e, \u003ccode\u003etypicalPersonsAddressBook.json\u003c/code\u003e, \u003ccode\u003evalidAddressBook.json\u003c/code\u003e etc., such that the JSON tests will not fail due to a missing \u003ccode\u003eremark\u003c/code\u003e field.\u003c/p\u003e"
      },
      {
        "lineNumber": 2427,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2428,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2429,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2430,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2431,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2432,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_6b_test_add_withremark_for_code_personbuilder_code\"\u003e[Step 6b] Test: Add withRemark() for \u003ccode\u003ePersonBuilder\u003c/code\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 2433,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2434,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSince \u003ccode\u003ePerson\u003c/code\u003e can now have a \u003ccode\u003eRemark\u003c/code\u003e, we should add a helper method to \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/seedu/address/testutil/PersonBuilder.java\"\u003e\u003ccode\u003ePersonBuilder\u003c/code\u003e\u003c/a\u003e, so that users are able to create remarks when building a \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/model/person/Person.java\"\u003e\u003ccode\u003ePerson\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2435,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2436,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2437,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTests:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2438,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2439,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2440,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2441,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2442,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdd a new method \u003ccode\u003ewithRemark()\u003c/code\u003e for \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/seedu/address/testutil/PersonBuilder.java\"\u003e\u003ccode\u003ePersonBuilder\u003c/code\u003e\u003c/a\u003e. This method will create a new \u003ccode\u003eRemark\u003c/code\u003e for the person that it is currently building.\u003c/p\u003e"
      },
      {
        "lineNumber": 2443,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2444,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2445,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTry and use the method on any sample \u003ccode\u003ePerson\u003c/code\u003e in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/seedu/address/testutil/TypicalPersons.java\"\u003e\u003ccode\u003eTypicalPersons\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 2446,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2447,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2448,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2449,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2450,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2451,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_7_ui_connect_code_remark_code_field_to_code_personcard_code\"\u003e[Step 7] Ui: Connect \u003ccode\u003eRemark\u003c/code\u003e field to \u003ccode\u003ePersonCard\u003c/code\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 2452,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2453,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOur remark label in \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/PersonCard.java\"\u003e\u003ccode\u003ePersonCard\u003c/code\u003e\u003c/a\u003e is still a placeholder. Let\u0026#8217;s bring it to life by binding it with the actual \u003ccode\u003eremark\u003c/code\u003e field.\u003c/p\u003e"
      },
      {
        "lineNumber": 2454,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2455,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2456,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMain:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2457,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2458,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2459,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2460,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2461,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/main/java/seedu/address/ui/PersonCard.java\"\u003e\u003ccode\u003ePersonCard\u003c/code\u003e\u003c/a\u003e\u0027s constructor to bind the \u003ccode\u003eRemark\u003c/code\u003e field to the \u003ccode\u003ePerson\u003c/code\u003e \u0027s remark.\u003c/p\u003e"
      },
      {
        "lineNumber": 2462,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2463,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2464,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2465,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2466,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTests:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2467,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2468,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2469,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2470,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2471,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eModify \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java\"\u003e\u003ccode\u003eGuiTestAssert#assertCardDisplaysPerson(\u0026#8230;\u0026#8203;)\u003c/code\u003e\u003c/a\u003e so that it will compare the now-functioning remark label.\u003c/p\u003e"
      },
      {
        "lineNumber": 2472,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2473,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2474,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2475,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2476,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 2477,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch5 id\u003d\"__step_8_logic_implement_code_remarkcommand_execute_code_logic\"\u003e[Step 8] Logic: Implement \u003ccode\u003eRemarkCommand#execute()\u003c/code\u003e logic\u003c/h5\u003e"
      },
      {
        "lineNumber": 2478,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2479,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWe now have everything set up\u0026#8230;\u0026#8203; but we still can\u0026#8217;t modify the remarks. Let\u0026#8217;s finish it up by adding in actual logic for our \u003ccode\u003eremark\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 2480,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2481,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2482,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMain:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2483,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2484,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2485,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2486,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2487,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eReplace the logic in \u003ccode\u003eRemarkCommand#execute()\u003c/code\u003e (that currently just throws an \u003ccode\u003eException\u003c/code\u003e), with the actual logic to modify the remarks of a person.\u003c/p\u003e"
      },
      {
        "lineNumber": 2488,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2489,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2490,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2491,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2492,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTests:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2493,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2494,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2495,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2496,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2497,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUpdate \u003ccode\u003eRemarkCommandTest\u003c/code\u003e to test that the \u003ccode\u003eexecute()\u003c/code\u003e logic works.\u003c/p\u003e"
      },
      {
        "lineNumber": 2498,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2499,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2500,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2501,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2502,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2503,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 2504,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch4 id\u003d\"_full_solution\"\u003eA.2.3. Full Solution\u003c/h4\u003e"
      },
      {
        "lineNumber": 2505,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2506,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSee this \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/pull/599\"\u003ePR\u003c/a\u003e for the step-by-step solution.\u003c/p\u003e"
      },
      {
        "lineNumber": 2507,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2508,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2509,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2510,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2511,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2512,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 2513,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_product_scope\"\u003eAppendix B: Product Scope\u003c/h2\u003e"
      },
      {
        "lineNumber": 2514,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2515,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2516,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTarget user profile\u003c/strong\u003e:\u003c/p\u003e"
      },
      {
        "lineNumber": 2517,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2518,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2519,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2520,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2521,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ehas a need to manage a significant number of contacts\u003c/p\u003e"
      },
      {
        "lineNumber": 2522,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2523,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2524,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eprefer desktop apps over other types\u003c/p\u003e"
      },
      {
        "lineNumber": 2525,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2526,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2527,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ecan type fast\u003c/p\u003e"
      },
      {
        "lineNumber": 2528,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2529,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2530,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eprefers typing over mouse input\u003c/p\u003e"
      },
      {
        "lineNumber": 2531,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2532,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2533,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eis reasonably comfortable using CLI apps\u003c/p\u003e"
      },
      {
        "lineNumber": 2534,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2535,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2536,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2537,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2538,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eValue proposition\u003c/strong\u003e: manage contacts faster than a typical mouse/GUI driven app\u003c/p\u003e"
      },
      {
        "lineNumber": 2539,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2540,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2541,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2542,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 2543,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_user_stories\"\u003eAppendix C: User Stories\u003c/h2\u003e"
      },
      {
        "lineNumber": 2544,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2545,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2546,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePriorities: High (must have) - \u003ccode\u003e* * *\u003c/code\u003e, Medium (nice to have) - \u003ccode\u003e* *\u003c/code\u003e, Low (unlikely to have) - \u003ccode\u003e*\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2547,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2548,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all\" style\u003d\"width: 59%;\"\u003e"
      },
      {
        "lineNumber": 2549,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 2550,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 22%;\"\u003e"
      },
      {
        "lineNumber": 2551,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 23%;\"\u003e"
      },
      {
        "lineNumber": 2552,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 25%;\"\u003e"
      },
      {
        "lineNumber": 2553,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccol style\u003d\"width: 30%;\"\u003e"
      },
      {
        "lineNumber": 2554,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 2555,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 2556,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2557,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003ePriority\u003c/th\u003e"
      },
      {
        "lineNumber": 2558,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eAs a \u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 2559,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eI want to \u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 2560,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eSo that I can\u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 2561,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2562,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 2563,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 2564,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2565,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2566,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003enew user\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2567,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee usage instructions\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2568,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003erefer to instructions when I forget how to use the Marketing Morph App\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2569,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2570,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2571,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2572,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2573,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eadd a new person or company\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2574,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ekeep track of potential target demographics and clients\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2575,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2576,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2577,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2578,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2579,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003edelete a person or company\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2580,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eremove entries that I no longer need\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2581,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2582,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2583,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2584,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2585,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efind a person or company by name\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2586,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003elocate details of persons without having to go through the entire list\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2587,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2588,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2589,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2590,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2591,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esort persons by name\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2592,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003elocate a person easily\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2593,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2594,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2595,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2596,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2597,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ecreate a group of clients\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2598,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eto organize potential clients into a separate group\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2599,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2600,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2601,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2602,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2603,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eadd contacts to a favorites list\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2604,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eto have quick access to the most used contacts\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2605,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2606,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2607,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2608,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2609,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003edelete contacts to a favorites list\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2610,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eto have quick access to the most used contacts\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2611,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2612,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2613,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2614,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2615,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eupdate person or company data\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2616,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eto change information that is no longer correct\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2617,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2618,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2619,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2620,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2621,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ecan analyze which people can afford a product\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2622,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eto effectively target potential consumers\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2623,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2624,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2625,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2626,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2627,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ecan determine which people can shop at particular businesses\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2628,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eto sell information to companies\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2629,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2630,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2631,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2632,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2633,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eview a persons address on a map\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2634,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003evisualize where they live\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2635,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2636,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2637,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2638,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2639,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee number of entries in the addressbook\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2640,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eto know how many entries I have\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2641,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2642,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2643,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2644,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2645,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ehide \u003ca href\u003d\"#private-contact-detail\"\u003eprivate contact details\u003c/a\u003e by default\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2646,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eminimize chance of someone else seeing them by accident\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 2647,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2648,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 2649,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 2650,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2651,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e{More to be added}\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2652,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2653,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2654,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2655,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 2656,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_use_cases\"\u003eAppendix D: Use Cases\u003c/h2\u003e"
      },
      {
        "lineNumber": 2657,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2658,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2659,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e(For all use cases below, the \u003cstrong\u003eSystem\u003c/strong\u003e is the \u003ccode\u003eAddressBook\u003c/code\u003e and the \u003cstrong\u003eActor\u003c/strong\u003e is the \u003ccode\u003euser\u003c/code\u003e, unless specified otherwise)\u003c/p\u003e"
      },
      {
        "lineNumber": 2660,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2661,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_use_case_delete_person\" class\u003d\"discrete\"\u003eUse case: Delete person\u003c/h3\u003e"
      },
      {
        "lineNumber": 2662,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2663,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2664,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2665,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2666,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2667,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2668,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUser requests to list persons\u003c/p\u003e"
      },
      {
        "lineNumber": 2669,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2670,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2671,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAddressBook shows a list of persons\u003c/p\u003e"
      },
      {
        "lineNumber": 2672,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2673,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2674,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUser requests to delete a specific person in the list\u003c/p\u003e"
      },
      {
        "lineNumber": 2675,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2676,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2677,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAddressBook deletes the person\u003c/p\u003e"
      },
      {
        "lineNumber": 2678,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2679,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2680,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2681,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2682,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2683,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2684,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2685,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2686,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2687,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 2688,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2689,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2690,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e2a. The list is empty.\u003c/p\u003e"
      },
      {
        "lineNumber": 2691,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2692,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2693,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2694,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2695,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2696,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e3a. The given index is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 2697,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 2698,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2699,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2700,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e3a1. AddressBook shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2701,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2702,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 2703,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2704,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2705,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2706,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2707,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2708,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2709,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2710,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_use_case_favorite_person\" class\u003d\"discrete\"\u003eUse case: Favorite person\u003c/h3\u003e"
      },
      {
        "lineNumber": 2711,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2712,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2713,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2714,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2715,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2716,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2717,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUser requests to list persons\u003c/p\u003e"
      },
      {
        "lineNumber": 2718,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2719,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2720,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAddressBook shows a list of persons\u003c/p\u003e"
      },
      {
        "lineNumber": 2721,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2722,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2723,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUser requests to add a specific person in the list to their favorites\u003c/p\u003e"
      },
      {
        "lineNumber": 2724,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2725,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2726,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAddressBook saves the person in the favorites list\u003c/p\u003e"
      },
      {
        "lineNumber": 2727,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2728,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2729,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2730,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2731,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2732,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2733,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2734,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2735,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2736,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 2737,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2738,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2739,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e2a. The list is empty.\u003c/p\u003e"
      },
      {
        "lineNumber": 2740,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2741,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2742,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2743,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2744,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2745,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e3a. The given name does not exist.\u003c/p\u003e"
      },
      {
        "lineNumber": 2746,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 2747,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2748,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2749,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e3a1. AddressBook shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2750,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2751,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2752,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2753,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2754,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2755,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e3b. The given name is not specific enough.\u003c/p\u003e"
      },
      {
        "lineNumber": 2756,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 2757,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2758,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2759,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e3b1. AddressBook shows an error message and displays potential options.\u003c/p\u003e"
      },
      {
        "lineNumber": 2760,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2761,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2762,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2763,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2764,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2765,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e3c. The given name isn\u0026#8217;t a favorite.\u003c/p\u003e"
      },
      {
        "lineNumber": 2766,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 2767,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2768,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2769,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e3c1. AddressBook shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2770,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2771,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse case resumes at step 1.\u003c/p\u003e"
      },
      {
        "lineNumber": 2772,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2773,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2774,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2775,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2776,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2777,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2778,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2779,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_use_case_view_person_s_location\" class\u003d\"discrete\"\u003eUse case: View person\u0026#8217;s location\u003c/h3\u003e"
      },
      {
        "lineNumber": 2780,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2781,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2782,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2783,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2784,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2785,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2786,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUser requests to list persons\u003c/p\u003e"
      },
      {
        "lineNumber": 2787,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2788,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2789,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAddressBook shows a list of persons\u003c/p\u003e"
      },
      {
        "lineNumber": 2790,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2791,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2792,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUser clicks on a specific persons card on the list\u003c/p\u003e"
      },
      {
        "lineNumber": 2793,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2794,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2795,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAddressBook displays a Google Maps window of their address in the Main Window\u003c/p\u003e"
      },
      {
        "lineNumber": 2796,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2797,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2798,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2799,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2800,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2801,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2802,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2803,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e{More to be added}\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2804,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2805,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2806,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2807,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 2808,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_non_functional_requirements\"\u003eAppendix E: Non Functional Requirements\u003c/h2\u003e"
      },
      {
        "lineNumber": 2809,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2810,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2811,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2812,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2813,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eShould work on any \u003ca href\u003d\"#mainstream-os\"\u003emainstream OS\u003c/a\u003e as long as it has Java \u003ccode\u003e9\u003c/code\u003e or higher installed.\u003c/p\u003e"
      },
      {
        "lineNumber": 2814,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2815,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2816,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eShould be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.\u003c/p\u003e"
      },
      {
        "lineNumber": 2817,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2818,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2819,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eA user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.\u003c/p\u003e"
      },
      {
        "lineNumber": 2820,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2821,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2822,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2823,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2824,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e{More to be added}\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2825,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2826,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2827,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2828,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 2829,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_glossary\"\u003eAppendix F: Glossary\u003c/h2\u003e"
      },
      {
        "lineNumber": 2830,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2831,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"dlist\"\u003e"
      },
      {
        "lineNumber": 2832,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 2833,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"mainstream-os\"\u003e\u003c/a\u003e Mainstream OS\u003c/dt\u003e"
      },
      {
        "lineNumber": 2834,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2835,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWindows, Linux, Unix, OS-X\u003c/p\u003e"
      },
      {
        "lineNumber": 2836,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2837,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"private-contact-detail\"\u003e\u003c/a\u003e Private contact detail\u003c/dt\u003e"
      },
      {
        "lineNumber": 2838,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2839,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eA contact detail that is not meant to be shared with others\u003c/p\u003e"
      },
      {
        "lineNumber": 2840,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2841,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 2842,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2843,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2844,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2845,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 2846,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_product_survey\"\u003eAppendix G: Product Survey\u003c/h2\u003e"
      },
      {
        "lineNumber": 2847,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2848,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2849,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eProduct Name\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2850,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2851,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2852,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAuthor: \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 2853,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2854,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2855,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 2856,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2857,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2858,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2859,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2860,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 2861,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2862,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2863,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 2864,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2865,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2866,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2867,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2868,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 2869,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2870,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 2871,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2872,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2873,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 2874,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2875,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2876,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 2877,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2878,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2879,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2880,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2881,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2882,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 2883,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_instructions_for_manual_testing\"\u003eAppendix H: Instructions for Manual Testing\u003c/h2\u003e"
      },
      {
        "lineNumber": 2884,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2885,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2886,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eGiven below are instructions to test the app manually.\u003c/p\u003e"
      },
      {
        "lineNumber": 2887,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2888,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 2889,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 2890,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 2891,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 2892,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 2893,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 2894,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2895,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more \u003cem\u003eexploratory\u003c/em\u003e testing."
      },
      {
        "lineNumber": 2896,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 2897,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 2898,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 2899,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2900,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 2901,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_launch_and_shutdown\"\u003eH.1. Launch and Shutdown\u003c/h3\u003e"
      },
      {
        "lineNumber": 2902,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2903,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2904,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2905,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eInitial launch\u003c/p\u003e"
      },
      {
        "lineNumber": 2906,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 2907,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 2908,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2909,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDownload the jar file and copy into an empty folder\u003c/p\u003e"
      },
      {
        "lineNumber": 2910,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2911,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2912,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDouble-click the jar file\u003cbr\u003e"
      },
      {
        "lineNumber": 2913,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.\u003c/p\u003e"
      },
      {
        "lineNumber": 2914,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2915,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2916,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2917,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2918,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2919,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSaving window preferences\u003c/p\u003e"
      },
      {
        "lineNumber": 2920,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 2921,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 2922,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2923,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eResize the window to an optimum size. Move the window to a different location. Close the window.\u003c/p\u003e"
      },
      {
        "lineNumber": 2924,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2925,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2926,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eRe-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 2927,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Expected: The most recent window size and location is retained.\u003c/p\u003e"
      },
      {
        "lineNumber": 2928,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2929,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2930,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2931,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2932,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2933,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2934,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2935,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e{ more test cases \u0026#8230;\u0026#8203; }\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2936,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2937,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2938,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 2939,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_deleting_a_person\"\u003eH.2. Deleting a person\u003c/h3\u003e"
      },
      {
        "lineNumber": 2940,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2941,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2942,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2943,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDeleting a person while all persons are listed\u003c/p\u003e"
      },
      {
        "lineNumber": 2944,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 2945,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 2946,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2947,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePrerequisites: List all persons using the \u003ccode\u003elist\u003c/code\u003e command. Multiple persons in the list.\u003c/p\u003e"
      },
      {
        "lineNumber": 2948,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2949,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2950,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTest case: \u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 2951,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.\u003c/p\u003e"
      },
      {
        "lineNumber": 2952,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2953,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2954,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eTest case: \u003ccode\u003edelete 0\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 2955,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.\u003c/p\u003e"
      },
      {
        "lineNumber": 2956,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2957,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2958,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOther incorrect delete commands to try: \u003ccode\u003edelete\u003c/code\u003e, \u003ccode\u003edelete x\u003c/code\u003e (where x is larger than the list size) \u003cem\u003e{give more}\u003c/em\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 2959,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Expected: Similar to previous.\u003c/p\u003e"
      },
      {
        "lineNumber": 2960,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2961,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2962,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2963,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2964,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2965,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2966,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2967,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e{ more test cases \u0026#8230;\u0026#8203; }\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2968,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2969,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2970,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 2971,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_saving_data\"\u003eH.3. Saving data\u003c/h3\u003e"
      },
      {
        "lineNumber": 2972,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 2973,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2974,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2975,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDealing with missing/corrupted data files\u003c/p\u003e"
      },
      {
        "lineNumber": 2976,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 2977,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 2978,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 2979,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e{explain how to simulate a missing/corrupted file and the expected behavior}\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2980,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2981,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2982,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2983,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2984,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2985,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2986,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 2987,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e{ more test cases \u0026#8230;\u0026#8203; }\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2988,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2989,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2990,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2991,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2992,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2993,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 2994,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"footer-text\"\u003e"
      },
      {
        "lineNumber": 2995,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Last updated 2019-04-02 20:38:38 +08"
      },
      {
        "lineNumber": 2996,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2997,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2998,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 2999,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "jkhiani": 2999
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "\u003d Marketing Morph - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "By: `Sky Walker`      Since: `Feb 2019`      Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Marketing Morph is for marketers who want to organize consumer data. More importantly, Marketing Morph will allow marketers to use a GUI to keep track of different consumers, maintain client lists, and perform market analysis and research in one simple interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person : `add`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Adds a person to the consumer list. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* `add n/Jane Doe p/23456789 e/janed@example.com a/113, Clementi Ave 2, #02-24 s/5000 o/teacher r/single`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 s/100000 o/banker r/single t/friends t/owesMoney`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a company : `addcpny`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a company to the client list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: `add` n/NAME p/NUMBER e/AVG$$ a/ADDRESS s/SECTOR n/#EMPS r/REVENUES [t/TAG]…"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "`add` n/Walmart p/98765432 e/low a/John street, block 123, #01-01  s/Retail n/500"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "`add` n/Betsy Cakes e/medium a/Bob street, block 232 n p/1234567 s/Bakery n/20 t/popular t/local"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Shows a list of all persons in the consumer list. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all companies : `listcpny`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all companies in the clients list. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listcpny`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Edits an existing person in the consumer list. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a company : `editcpny`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing company in the client list. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `editcpny INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the company at the specified `INDEX`. The index refers to the index number shown in the displayed company list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the company will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the company\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `editcpny 1 p/91234567 e/monay@example.com` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st company to be `91234567` and `monay@example.com` respectively."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* `editcpny 2 n/Small Money t/` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd company to be `Small Money` and clears all existing tags."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name : `find`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating companies by name : `findcpny`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Finds companies whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findcpny KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* Companiess matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a company : `deletecpny`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified Company from the address book. +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deletecpny INDEX`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the company at the specified `INDEX`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed company list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* Selects the person and loads a Google Maps address of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Selects the 2nd person in the consumer list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "\u003d\u003d\u003d Sorting persons by name/salary/occupation/residential area/group : `sort` `[coming in v1.4]`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Lists all people that meet the specified filter requirement."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Format: sort [ALL] [s/ \u003eN] [s/ \u003c\u003d N] [n/ NAME] [o/ OCCUPATION] [a/ STREET NAME] [GROUPS]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "`sort` s/ \u003e 50000     (list all persons with income greater than $50000)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "`sort` ALL            (list all persons in the consumer list)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "`sort` o/ Plumber\t\t\t(list all persons who’s occupation is plumber)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "\u003d\u003d\u003d Find clients: `findCli` `[coming in v1.4]`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Lists all persons deemed capable of affording a specific product based on salary"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Format: `findCli` PRICE"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "findCli 100"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "findCli 20"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "\u003d\u003d\u003d Find shops: `findShops` `[coming in v1.4]`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Lists all stores a person is deemed capable of visiting based on salary and store pricing"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Format: `findShops` [n/NAME] [s/SALARY]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "`findShops` n/steve smith"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "`findShops` s/25000"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "// tag::favorite[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add to favorite list: `favorite`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Adds a person to the “favorite” list, the full name must be specified in order for an addition to occur"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `favorite` [NAME]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "`favorite` John Doe"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "`favorite` John (recommends all John\u0027s in the addressbook, adds none)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d Delete person from favorite list: `delFav`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Removes a person to the “favorite” list"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Format: `delFav` [NAME]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "`delFav` John Doe"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "`delFav` John (recommends all John\u0027s in the favorites list)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d\u003d List the favorite list: `listFav`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Lists all persons in the “favorite” list"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "Format: `favorite` [NAME]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "// end::favorite[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "\u003d\u003d\u003d Create group: `group` `[coming in v1.4]`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Creates a group of persons"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Format: `group` GROUPNAME [[n/NAME] [a/ADDRESS]]..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "`group` g1 n/bob a/123 streets n/steve a/456 main n/smith a/111 abc st"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "`group` winners n/jacob a/1 queen st n/adam a/10 north st"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "\u003d\u003d\u003d Export data as CSV: `export`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Exports the data to a CSV file"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Format: `export` [CLIENTS] [CONSUMERS] [ALL]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "`export` clients"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "`export` all"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "* *Add Favorite* : `favorite`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "* *Delete Favorite* : `delFav`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "* *List Favorite* : `listFav`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "* *group* : `group` GROUPNAME [[n/NAME] [a/ADDRESS]]..."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "FanDongzhe"
        },
        "content": "* *export* : `export` [CLIENTS] [CONSUMERS] [ALL]"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 31,
      "FanDongzhe": 64,
      "-": 329,
      "jkhiani": 21
    }
  },
  {
    "path": "docs/UserGuide.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c!--[if IE]\u003e\u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e\u003c![endif]--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 1.5.5\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctitle\u003eMarketing Morph - User Guide\u003c/title\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*:not(pre)\u003ecode.nobreak{word-wrap:normal}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*:not(pre)\u003ecode.nowrap{white-space:nowrap}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "em em{font-style:normal}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "strong strong{font-weight:400}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ".show-for-print{display:inherit!important}}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch1\u003eMarketing Morph - User Guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"preamble\"\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eBy: \u003ccode\u003eSky Walker\u003c/code\u003e      Since: \u003ccode\u003eFeb 2019\u003c/code\u003e      Licence: \u003ccode\u003eNUS\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"toc\" class\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"toctitle\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel1\"\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_introduction\"\u003e1. Introduction\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_quick_start\"\u003e2. Quick Start\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Features\"\u003e3. Features\u003c/a\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_viewing_help_code_help_code\"\u003e3.1. Viewing help : \u003ccode\u003ehelp\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_adding_a_person_code_add_code\"\u003e3.2. Adding a person : \u003ccode\u003eadd\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_adding_a_company_code_addcpny_code\"\u003e3.3. Adding a company : \u003ccode\u003eaddcpny\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_listing_all_persons_code_list_code\"\u003e3.4. Listing all persons : \u003ccode\u003elist\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_listing_all_companies_code_listcpny_code\"\u003e3.5. Listing all companies : \u003ccode\u003elistcpny\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_editing_a_person_code_edit_code\"\u003e3.6. Editing a person : \u003ccode\u003eedit\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_editing_a_company_code_editcpny_code\"\u003e3.7. Editing a company : \u003ccode\u003eeditcpny\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_locating_persons_by_name_code_find_code\"\u003e3.8. Locating persons by name : \u003ccode\u003efind\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_locating_companies_by_name_code_findcpny_code\"\u003e3.9. Locating companies by name : \u003ccode\u003efindcpny\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_deleting_a_person_code_delete_code\"\u003e3.10. Deleting a person : \u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_deleting_a_company_code_deletecpny_code\"\u003e3.11. Deleting a company : \u003ccode\u003edeletecpny\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_selecting_a_person_code_select_code\"\u003e3.12. Selecting a person : \u003ccode\u003eselect\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_listing_entered_commands_code_history_code\"\u003e3.13. Listing entered commands : \u003ccode\u003ehistory\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_undoing_previous_command_code_undo_code\"\u003e3.14. Undoing previous command : \u003ccode\u003eundo\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_redoing_the_previously_undone_command_code_redo_code\"\u003e3.15. Redoing the previously undone command : \u003ccode\u003eredo\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_clearing_all_entries_code_clear_code\"\u003e3.16. Clearing all entries : \u003ccode\u003eclear\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_exiting_the_program_code_exit_code\"\u003e3.17. Exiting the program : \u003ccode\u003eexit\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_sorting_persons_by_name_salary_occupation_residential_area_group_code_sort_code_code_coming_in_v1_4_code\"\u003e3.18. Sorting persons by name/salary/occupation/residential area/group : \u003ccode\u003esort\u003c/code\u003e \u003ccode\u003e[coming in v1.4]\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_find_clients_code_findcli_code_code_coming_in_v1_4_code\"\u003e3.19. Find clients: \u003ccode\u003efindCli\u003c/code\u003e \u003ccode\u003e[coming in v1.4]\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_find_shops_code_findshops_code_code_coming_in_v1_4_code\"\u003e3.20. Find shops: \u003ccode\u003efindShops\u003c/code\u003e \u003ccode\u003e[coming in v1.4]\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_add_to_favorite_list_code_favorite_code\"\u003e3.21. Add to favorite list: \u003ccode\u003efavorite\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_delete_person_from_favorite_list_code_delfav_code\"\u003e3.22. Delete person from favorite list: \u003ccode\u003edelFav\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_list_the_favorite_list_code_listfav_code\"\u003e3.23. List the favorite list: \u003ccode\u003elistFav\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_create_group_code_group_code_code_coming_in_v1_4_code\"\u003e3.24. Create group: \u003ccode\u003egroup\u003c/code\u003e \u003ccode\u003e[coming in v1.4]\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_export_data_as_csv_code_export_code\"\u003e3.25. Export data as CSV: \u003ccode\u003eexport\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_saving_the_data\"\u003e3.26. Saving the data\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_encrypting_data_files_code_coming_in_v2_0_code\"\u003e3.27. Encrypting data files \u003ccode\u003e[coming in v2.0]\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_faq\"\u003e4. FAQ\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_command_summary\"\u003e5. Command Summary\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_introduction\"\u003e1. Introduction\u003c/h2\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eMarketing Morph is for marketers who want to organize consumer data. More importantly, Marketing Morph will allow marketers to use a GUI to keep track of different consumers, maintain client lists, and perform market analysis and research in one simple interface.\u003c/p\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_quick_start\"\u003e2. Quick Start\u003c/h2\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEnsure you have Java version \u003ccode\u003e9\u003c/code\u003e or later installed in your Computer.\u003c/p\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDownload the latest \u003ccode\u003eaddressbook.jar\u003c/code\u003e \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/releases\"\u003ehere\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCopy the file to the folder you want to use as the home folder for your Address Book.\u003c/p\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDouble-click the file to start the app. The GUI should appear in a few seconds.\u003c/p\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cimg src\u003d\"images/Ui.png\" alt\u003d\"Ui\" width\u003d\"790\"\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eType the command in the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g. typing \u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e and pressing \u003ckbd\u003eEnter\u003c/kbd\u003e will open the help window.\u003c/p\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSome example commands you can try:\u003c/p\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/strong\u003e : lists all contacts\u003c/p\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eadd\u003c/code\u003e\u003c/strong\u003e\u003ccode\u003en/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01\u003c/code\u003e : adds a contact named \u003ccode\u003eJohn Doe\u003c/code\u003e to the Address Book.\u003c/p\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/strong\u003e\u003ccode\u003e3\u003c/code\u003e : deletes the 3rd contact shown in the current list\u003c/p\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexit\u003c/code\u003e\u003c/strong\u003e : exits the app\u003c/p\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eRefer to \u003ca href\u003d\"#Features\"\u003eFeatures\u003c/a\u003e for details of each command.\u003c/p\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"Features\"\u003e3. Features\u003c/h2\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"exampleblock\"\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eCommand Format\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWords in \u003ccode\u003eUPPER_CASE\u003c/code\u003e are the parameters to be supplied by the user e.g. in \u003ccode\u003eadd n/NAME\u003c/code\u003e, \u003ccode\u003eNAME\u003c/code\u003e is a parameter which can be used as \u003ccode\u003eadd n/John Doe\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eItems in square brackets are optional e.g \u003ccode\u003en/NAME [t/TAG]\u003c/code\u003e can be used as \u003ccode\u003en/John Doe t/friend\u003c/code\u003e or as \u003ccode\u003en/John Doe\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eItems with \u003ccode\u003e…\u003c/code\u003e​ after them can be used multiple times including zero times e.g. \u003ccode\u003e[t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e can be used as \u003ccode\u003e\u0026#160;\u003c/code\u003e (i.e. 0 times), \u003ccode\u003et/friend\u003c/code\u003e, \u003ccode\u003et/friend t/family\u003c/code\u003e etc.\u003c/p\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eParameters can be in any order e.g. if the command specifies \u003ccode\u003en/NAME p/PHONE_NUMBER\u003c/code\u003e, \u003ccode\u003ep/PHONE_NUMBER n/NAME\u003c/code\u003e is also acceptable.\u003c/p\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_viewing_help_code_help_code\"\u003e3.1. Viewing help : \u003ccode\u003ehelp\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_adding_a_person_code_add_code\"\u003e3.2. Adding a person : \u003ccode\u003eadd\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdds a person to the consumer list.\u003cbr\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eadd n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eadd n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eadd n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_adding_a_company_code_addcpny_code\"\u003e3.3. Adding a company : \u003ccode\u003eaddcpny\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdds a company to the client list\u003c/p\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003eadd\u003c/code\u003e n/NAME p/NUMBER e/AVG$$ a/ADRESS s/SECTOR n/#EMPS r/REVENUES [t/TAG]…\u003c/p\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eadd\u003c/code\u003e n/Walmart p/98765432 e/low a/John street, block 123, #01-01  s/Retail n/500\u003c/p\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eadd\u003c/code\u003e n/Betsy Cakes e/medium a/Bob street, block 232 n p/1234567 s/Bakery n/20 t/popular t/local\u003c/p\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_listing_all_persons_code_list_code\"\u003e3.4. Listing all persons : \u003ccode\u003elist\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eShows a list of all persons in the consumer list.\u003cbr\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003elist\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_listing_all_companies_code_listcpny_code\"\u003e3.5. Listing all companies : \u003ccode\u003elistcpny\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eShows a list of all companies in the clients list.\u003cbr\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003elistcpny\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_editing_a_person_code_edit_code\"\u003e3.6. Editing a person : \u003ccode\u003eedit\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEdits an existing person in the consumer list.\u003cbr\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eedit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEdits the person at the specified \u003ccode\u003eINDEX\u003c/code\u003e. The index refers to the index number shown in the displayed person list. The index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAt least one of the optional fields must be provided.\u003c/p\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExisting values will be updated to the input values.\u003c/p\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWhen editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.\u003c/p\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eYou can remove all the person\u0026#8217;s tags by typing \u003ccode\u003et/\u003c/code\u003e without specifying any tags after it.\u003c/p\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eedit 1 p/91234567 e/johndoe@example.com\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Edits the phone number and email address of the 1st person to be \u003ccode\u003e91234567\u003c/code\u003e and \u003ccode\u003ejohndoe@example.com\u003c/code\u003e respectively.\u003c/p\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eedit 2 n/Betsy Crower t/\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Edits the name of the 2nd person to be \u003ccode\u003eBetsy Crower\u003c/code\u003e and clears all existing tags.\u003c/p\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_editing_a_company_code_editcpny_code\"\u003e3.7. Editing a company : \u003ccode\u003eeditcpny\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEdits an existing company in the client list.\u003cbr\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eeditcpny INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eEdits the company at the specified \u003ccode\u003eINDEX\u003c/code\u003e. The index refers to the index number shown in the displayed company list. The index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAt least one of the optional fields must be provided.\u003c/p\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExisting values will be updated to the input values.\u003c/p\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eWhen editing tags, the existing tags of the company will be removed i.e adding of tags is not cumulative.\u003c/p\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eYou can remove all the company\u0026#8217;s tags by typing \u003ccode\u003et/\u003c/code\u003e without specifying any tags after it.\u003c/p\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eeditcpny 1 p/91234567 e/monay@example.com\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Edits the phone number and email address of the 1st company to be \u003ccode\u003e91234567\u003c/code\u003e and \u003ccode\u003emonay@example.com\u003c/code\u003e respectively.\u003c/p\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eeditcpny 2 n/Small Money t/\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Edits the name of the 2nd company to be \u003ccode\u003eSmall Money\u003c/code\u003e and clears all existing tags.\u003c/p\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_locating_persons_by_name_code_find_code\"\u003e3.8. Locating persons by name : \u003ccode\u003efind\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFinds persons whose names contain any of the given keywords.\u003cbr\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003efind KEYWORD [MORE_KEYWORDS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe search is case insensitive. e.g \u003ccode\u003ehans\u003c/code\u003e will match \u003ccode\u003eHans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe order of the keywords does not matter. e.g. \u003ccode\u003eHans Bo\u003c/code\u003e will match \u003ccode\u003eBo Hans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOnly the name is searched.\u003c/p\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOnly full words will be matched e.g. \u003ccode\u003eHan\u003c/code\u003e will not match \u003ccode\u003eHans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePersons matching at least one keyword will be returned (i.e. \u003ccode\u003eOR\u003c/code\u003e search). e.g. \u003ccode\u003eHans Bo\u003c/code\u003e will return \u003ccode\u003eHans Gruber\u003c/code\u003e, \u003ccode\u003eBo Yang\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efind John\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Returns \u003ccode\u003ejohn\u003c/code\u003e and \u003ccode\u003eJohn Doe\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efind Betsy Tim John\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Returns any person having names \u003ccode\u003eBetsy\u003c/code\u003e, \u003ccode\u003eTim\u003c/code\u003e, or \u003ccode\u003eJohn\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_locating_companies_by_name_code_findcpny_code\"\u003e3.9. Locating companies by name : \u003ccode\u003efindcpny\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFinds companies whose names contain any of the given keywords.\u003cbr\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003efindcpny KEYWORD [MORE_KEYWORDS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe search is case insensitive. e.g \u003ccode\u003ehans\u003c/code\u003e will match \u003ccode\u003eHans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe order of the keywords does not matter. e.g. \u003ccode\u003eHans Bo\u003c/code\u003e will match \u003ccode\u003eBo Hans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOnly the name is searched.\u003c/p\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eOnly full words will be matched e.g. \u003ccode\u003eHan\u003c/code\u003e will not match \u003ccode\u003eHans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCompaniess matching at least one keyword will be returned (i.e. \u003ccode\u003eOR\u003c/code\u003e search). e.g. \u003ccode\u003eHans Bo\u003c/code\u003e will return \u003ccode\u003eHans Gruber\u003c/code\u003e, \u003ccode\u003eBo Yang\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efind John\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Returns \u003ccode\u003ejohn\u003c/code\u003e and \u003ccode\u003eJohn Doe\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efind Betsy Tim John\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Returns any person having names \u003ccode\u003eBetsy\u003c/code\u003e, \u003ccode\u003eTim\u003c/code\u003e, or \u003ccode\u003eJohn\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_deleting_a_person_code_delete_code\"\u003e3.10. Deleting a person : \u003ccode\u003edelete\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDeletes the specified person from the address book.\u003cbr\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003edelete INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDeletes the person at the specified \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe index refers to the index number shown in the displayed person list.\u003c/p\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003edelete 2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Deletes the 2nd person in the address book.\u003c/p\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efind Betsy\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Deletes the 1st person in the results of the \u003ccode\u003efind\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_deleting_a_company_code_deletecpny_code\"\u003e3.11. Deleting a company : \u003ccode\u003edeletecpny\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDeletes the specified Company from the address book.\u003cbr\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003edeletecpny INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eDeletes the company at the specified \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe index refers to the index number shown in the displayed company list.\u003c/p\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003edelete 2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Deletes the 2nd person in the address book.\u003c/p\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efind Betsy\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Deletes the 1st person in the results of the \u003ccode\u003efind\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_selecting_a_person_code_select_code\"\u003e3.12. Selecting a person : \u003ccode\u003eselect\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSelects the person identified by the index number used in the displayed person list.\u003cbr\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eselect INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eSelects the person and loads the Google search page the person at the specified \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe index refers to the index number shown in the displayed person list.\u003c/p\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eThe index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e \u003ccode\u003e1, 2, 3, \u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eselect 2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Selects the 2nd person in the consumer list.\u003c/p\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efind Betsy\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eselect 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Selects the 1st person in the results of the \u003ccode\u003efind\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_listing_entered_commands_code_history_code\"\u003e3.13. Listing entered commands : \u003ccode\u003ehistory\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLists all the commands that you have entered in reverse chronological order.\u003cbr\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003ehistory\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003ePressing the \u003ckbd\u003e\u0026uarr;\u003c/kbd\u003e and \u003ckbd\u003e\u0026darr;\u003c/kbd\u003e arrows will display the previous and next input respectively in the command box.\u003c/p\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_undoing_previous_command_code_undo_code\"\u003e3.14. Undoing previous command : \u003ccode\u003eundo\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eRestores the address book to the state before the previous \u003cem\u003eundoable\u003c/em\u003e command was executed.\u003cbr\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eundo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eUndoable commands: those commands that modify the address book\u0026#8217;s content (\u003ccode\u003eadd\u003c/code\u003e, \u003ccode\u003edelete\u003c/code\u003e, \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eclear\u003c/code\u003e).\u003c/p\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eselect 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eundo\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "The \u003ccode\u003eundo\u003c/code\u003e command fails as there are no undoable commands executed previously.\u003c/p\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eclear\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_redoing_the_previously_undone_command_code_redo_code\"\u003e3.15. Redoing the previously undone command : \u003ccode\u003eredo\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eReverses the most recent \u003ccode\u003eundo\u003c/code\u003e command.\u003cbr\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eredo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eredo\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "The \u003ccode\u003eredo\u003c/code\u003e command fails as there are no \u003ccode\u003eundo\u003c/code\u003e commands executed previously.\u003c/p\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eclear\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_clearing_all_entries_code_clear_code\"\u003e3.16. Clearing all entries : \u003ccode\u003eclear\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eClears all entries from the address book.\u003cbr\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eclear\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_exiting_the_program_code_exit_code\"\u003e3.17. Exiting the program : \u003ccode\u003eexit\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExits the program.\u003cbr\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Format: \u003ccode\u003eexit\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_sorting_persons_by_name_salary_occupation_residential_area_group_code_sort_code_code_coming_in_v1_4_code\"\u003e3.18. Sorting persons by name/salary/occupation/residential area/group : \u003ccode\u003esort\u003c/code\u003e \u003ccode\u003e[coming in v1.4]\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLists all people that meet the specified filter requirement.\u003c/p\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: sort [ALL] [s/ \u0026gt;N] [s/ \u0026#8656; N] [n/ NAME] [o/ OCCUPATION] [a/ STREET NAME] [GROUPS]\u003c/p\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003esort\u003c/code\u003e s/ \u0026gt; 50000     (list all persons with income greater than $50000)\u003c/p\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003esort\u003c/code\u003e ALL            (list all persons in the consumer list)\u003c/p\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003esort\u003c/code\u003e o/ Plumber\t\t\t(list all persons who’s occupation is plumber)\u003c/p\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_find_clients_code_findcli_code_code_coming_in_v1_4_code\"\u003e3.19. Find clients: \u003ccode\u003efindCli\u003c/code\u003e \u003ccode\u003e[coming in v1.4]\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLists all persons deemed capable of affording a specific product based on salary\u003c/p\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003efindCli\u003c/code\u003e PRICE\u003c/p\u003e"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003efindCli 100\u003c/p\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003efindCli 20\u003c/p\u003e"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_find_shops_code_findshops_code_code_coming_in_v1_4_code\"\u003e3.20. Find shops: \u003ccode\u003efindShops\u003c/code\u003e \u003ccode\u003e[coming in v1.4]\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLists all stores a person is deemed capable of visiting based on salary and store pricing\u003c/p\u003e"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003efindShops\u003c/code\u003e [n/NAME] [s/SALARY]\u003c/p\u003e"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efindShops\u003c/code\u003e n/steve smith\u003c/p\u003e"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efindShops\u003c/code\u003e s/25000\u003c/p\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_add_to_favorite_list_code_favorite_code\"\u003e3.21. Add to favorite list: \u003ccode\u003efavorite\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAdds a person to the  “favorite” list\u003c/p\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003efavorite\u003c/code\u003e [NAME]\u003c/p\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efavorite\u003c/code\u003e John Doe\u003c/p\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003efavorite\u003c/code\u003e John (recommends all John\u0026#8217;s in the addressbook)\u003c/p\u003e"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_delete_person_from_favorite_list_code_delfav_code\"\u003e3.22. Delete person from favorite list: \u003ccode\u003edelFav\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eRemoves a person to the “favorite” list\u003c/p\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003edelFav\u003c/code\u003e [NAME]\u003c/p\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003edelFav\u003c/code\u003e John Doe\u003c/p\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003edelFav\u003c/code\u003e John (recommends all John\u0026#8217;s in the favorites list)\u003c/p\u003e"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_list_the_favorite_list_code_listfav_code\"\u003e3.23. List the favorite list: \u003ccode\u003elistFav\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eLists all persons in the “favorite” list\u003c/p\u003e"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003efavorite\u003c/code\u003e [NAME]\u003c/p\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_create_group_code_group_code_code_coming_in_v1_4_code\"\u003e3.24. Create group: \u003ccode\u003egroup\u003c/code\u003e \u003ccode\u003e[coming in v1.4]\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eCreates a group of persons\u003c/p\u003e"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003egroup\u003c/code\u003e GROUPNAME [[n/NAME] [a/ADDRESS]]\u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003egroup\u003c/code\u003e g1 n/bob a/123 streets n/steve a/456 main n/smith a/111 abc st\u003c/p\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003egroup\u003c/code\u003e winners n/jacob a/1 queen st n/adam a/10 north st\u003c/p\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_export_data_as_csv_code_export_code\"\u003e3.25. Export data as CSV: \u003ccode\u003eexport\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExports the data to a CSV file\u003c/p\u003e"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003eexport\u003c/code\u003e [CLIENTS] [CONSUMERS] [ALL]\u003c/p\u003e"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eexport\u003c/code\u003e clients\u003c/p\u003e"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003ccode\u003eexport\u003c/code\u003e all\u003c/p\u003e"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_saving_the_data\"\u003e3.26. Saving the data\u003c/h3\u003e"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003eAddress book data are saved in the hard disk automatically after any command that changes the data.\u003cbr\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "There is no need to save manually.\u003c/p\u003e"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch3 id\u003d\"_encrypting_data_files_code_coming_in_v2_0_code\"\u003e3.27. Encrypting data files \u003ccode\u003e[coming in v2.0]\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cem\u003e{explain how the user can enable/disable data encryption}\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_faq\"\u003e4. FAQ\u003c/h2\u003e"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eQ\u003c/strong\u003e: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cstrong\u003eA\u003c/strong\u003e: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder.\u003c/p\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003ch2 id\u003d\"_command_summary\"\u003e5. Command Summary\u003c/h2\u003e"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e \u003ccode\u003eadd n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g. \u003ccode\u003eadd n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eClear\u003c/strong\u003e : \u003ccode\u003eclear\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eDelete\u003c/strong\u003e : \u003ccode\u003edelete INDEX\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g. \u003ccode\u003edelete 3\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e : \u003ccode\u003eedit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g. \u003ccode\u003eedit 2 n/James Lee e/jameslee@example.com\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eFind\u003c/strong\u003e : \u003ccode\u003efind KEYWORD [MORE_KEYWORDS]\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g. \u003ccode\u003efind James Jake\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eList\u003c/strong\u003e : \u003ccode\u003elist\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eHelp\u003c/strong\u003e : \u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eSelect\u003c/strong\u003e : \u003ccode\u003eselect INDEX\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "e.g.\u003ccode\u003eselect 2\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAdd Favorite\u003c/strong\u003e : \u003ccode\u003efavorite\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eDelete Favorite\u003c/strong\u003e : \u003ccode\u003edelFav\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eList Favorite\u003c/strong\u003e : \u003ccode\u003elistFav\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eHistory\u003c/strong\u003e : \u003ccode\u003ehistory\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eUndo\u003c/strong\u003e : \u003ccode\u003eundo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eRedo\u003c/strong\u003e : \u003ccode\u003eredo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003egroup\u003c/strong\u003e : \u003ccode\u003egroup\u003c/code\u003e GROUPNAME [[n/NAME] [a/ADDRESS]]\u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eexport\u003c/strong\u003e : \u003ccode\u003eexport\u003c/code\u003e [CLIENTS] [CONSUMERS] [ALL]\u003c/p\u003e"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cdiv id\u003d\"footer-text\"\u003e"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Last updated 2019-04-02 20:46:04 +08"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "jkhiani": 1275
    }
  },
  {
    "path": "docs/team/jkhiani.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d Jitesh KKhiani - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d PROJECT: Marketing Morph"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "Marketing Morph is a desktop address book application used as a tool for marketers to keep track of their databases. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* *Major enhancement*: added *the ability to favorite/unfavorite persons*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** What it does: allows the user to add people to their favorites list, view their favorites list, and remove people from favorites list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Justification: This feature improves the product significantly because a user no longer needs to sift through their addressbook (as it can get very large) to organize a few select people they are working with at the moment."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Highlights: Being able to manipulate the storage for favorites was a challenge, along with figuring out how to provide suggestions if names weren\u0027t fully typed out (first + last)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* *Minor enhancement*: added the ability to click on a person card and view their address on a Google Map."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* *Minor enhancement*: added the ability to view the total number of contacts in the addressbook."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* *Minor enhancement*: set tags to be highlighted different colors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Credits: Heavily relied on demo code from pull request https://github.com/se-edu/addressbook-level4/pull/798[#798]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W16-3/main/pull/71/files[#71] https://github.com/CS2103-AY1819S2-W16-3/main/blob/master/src/main/java/seedu/address/logic/commands/DelFavoriteCommand.java [DelFavoriteCommand.java] https://github.com/CS2103-AY1819S2-W16-3/main/blob/master/src/main/java/seedu/address/logic/commands/FavoriteCommand.java [FavoriteCommand.java] https://github.com/CS2103-AY1819S2-W16-3/main/blob/master/src/main/java/seedu/address/logic/commands/ListFavoritesCommand.java [ListFavoritesCommand.java] https://github.com/CS2103-AY1819S2-W16-3/main/blob/master/src/main/java/seedu/address/logic/parser/FavoriteCommandParser.java [FavoriteCommandParser.java] https://github.com/CS2103-AY1819S2-W16-3/main/blob/master/src/main/java/seedu/address/logic/parser/DelFavoriteCommandParser.java [DelFavoriteCommandParser.java]] and associated code snippets within related files _{give links to collated code files}_"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*** Managed issue tracker on GitHub"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*** Managed UG and DG for all personal code contributions (see below)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W16-3/main/pull/82[#82], https://github.com/CS2103-AY1819S2-W16-3/main/pull/74[#74], https://github.com/CS2103-AY1819S2-W16-3/main/pull/41[#41], https://github.com/CS2103-AY1819S2-W16-3/main/pull/39[#39]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfavorite]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfavoriteSystem]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003djiteshUseCase]"
      }
    ],
    "authorContributionMap": {
      "jkhiani": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 1,
      "ZhangJiayu0303": 1,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of companies"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    ObservableList\u003cCompany\u003e getFilteredCompanyList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Selected company in the filtered company list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * null if no company is selected"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    ReadOnlyProperty\u003cCompany\u003e selectedCompanyProperty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Sets the selected company in the filtered company list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    void setSelectedCompany(Company company);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 17,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public ObservableList\u003cCompany\u003e getFilteredCompanyList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return model.getFilteredCompanyList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public ReadOnlyProperty\u003cCompany\u003e selectedCompanyProperty() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return model.selectedCompanyProperty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void setSelectedCompany(Company company) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 16,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + PREFIX_SALARY + \"SALARY\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + PREFIX_OCCUPATION + \"OCCUPATION\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + PREFIX_RELATIONSHIP + \"RELATIONSHIP\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + PREFIX_SALARY + \"100000 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + PREFIX_OCCUPATION + \"banker \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + PREFIX_RELATIONSHIP + \"single \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 9,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCpnyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Adds a company object to the addressbook"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class AddCpnyCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addcpny\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a company to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_SALARY + \"SALARY\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_OCCUPATION + \"OCCUPATION\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_RELATIONSHIP + \"RELATIONSHIP\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_NAME + \"Money Inc \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_EMAIL + \"money@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_SALARY + \"100000 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_OCCUPATION + \"banker \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_RELATIONSHIP + \"single \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New company added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This company already exists in the address book\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Company toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public AddCpnyCommand(Company company) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        toAdd \u003d company;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (model.hasCompany(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.addCompany(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCpnyCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AnalyzeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "public class AnalyzeCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AverageCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "public class AverageCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"average\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed the average salary of all persons: %.2f\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        int sum \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        for(int i \u003d 0; i \u003c model.getFilteredPersonList().size(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            sum +\u003d Integer.parseInt(String.valueOf(model.getFilteredPersonList().get(i).getSalary()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                String.format(MESSAGE_SUCCESS, (double) sum / model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "public class CountCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"count\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Counted the number of persons: %d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                String.format(MESSAGE_SUCCESS, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DelFavoriteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.NameMatchesPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " * Deletes a person from the favorite list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "public class DelFavoriteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delFav\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a person from the favorites list\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            + \" Alex Yeoh\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Person deleted\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_NOT_EXIST \u003d \"This person doesn\u0027t exist\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_NOT_SPECIFIC \u003d \"Please be more specific\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_NOT_FAVORITE \u003d \"This person doesn\u0027t exist in the favorite list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private final NameMatchesPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private final NameContainsKeywordsPredicate containsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public DelFavoriteCommand(NameMatchesPredicate predicate, NameContainsKeywordsPredicate containsPredicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        this.containsPredicate \u003d containsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EXIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        } else if (model.getFilteredPersonList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            model.updateFilteredPersonList(containsPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NOT_SPECIFIC));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        } else if (!model.getFavoritesList().contains(model.getFilteredPersonList().get(0))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FAVORITE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            model.removeFavorite(model.getFilteredPersonList().get(0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                || (other instanceof DelFavoriteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                \u0026\u0026 predicate.equals(((DelFavoriteCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jkhiani": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCpnyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class DeleteCpnyCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletecpny\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Index targetIndexCpny;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public DeleteCpnyCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.targetIndexCpny \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        List\u003cCompany\u003e lastShownList \u003d model.getFilteredCompanyList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (targetIndexCpny.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Company companyToDelete \u003d lastShownList.get(targetIndexCpny.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.deleteCompany(companyToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, companyToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 targetIndexCpny.equals(((DeleteCpnyCommand) other).targetIndexCpny)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + \"[\" + PREFIX_SALARY + \"SALARY] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + \"[\" + PREFIX_OCCUPATION + \"OCCUPATION] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            + \"[\" + PREFIX_RELATIONSHIP + \"RELATIONSHIP] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Salary updatedSalary \u003d editPersonDescriptor.getSalary().orElse(personToEdit.getSalary());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Occupation updatedOccupation \u003d editPersonDescriptor.getOccupation().orElse(personToEdit.getOccupation());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        Relationship updateRelationship \u003d editPersonDescriptor.getRelationship().orElse(personToEdit.getRelationship());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedSalary,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                updatedOccupation, updateRelationship, updatedTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        private Salary salary;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        private Occupation occupation;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        private Relationship relationship;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            setSalary(toCopy.salary);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            setOccupation(toCopy.occupation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            setRelationship(toCopy.relationship);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public void setSalary(Salary salary) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            this.salary \u003d salary;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        public Optional\u003cSalary\u003e getSalary() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return Optional.ofNullable(salary);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        public void setOccupation(Occupation occupation) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            this.occupation \u003d occupation;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        public Optional\u003cOccupation\u003e getOccupation() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return Optional.ofNullable(occupation);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public void setRelationship(Relationship relationship) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        public Optional\u003cRelationship\u003e getRelationship() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return Optional.ofNullable(relationship);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                    \u0026\u0026 getSalary().equals(e.getSalary())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                    \u0026\u0026 getOccupation().equals(e.getOccupation())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                    \u0026\u0026 getRelationship().equals(e.getRelationship())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 37,
      "-": 227,
      "jkhiani": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCpnyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COMPANIES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Edits the details of an existing company in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class EditCpnyCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editcpny\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the company identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"by the index number used in the displayed company list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_SALARY + \"SALARY] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_OCCUPATION + \"OCCUPATION] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_RELATIONSHIP + \"RELATIONSHIP] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_EDIT_COMPANY_SUCCESS \u003d \"Edited Company: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPANY \u003d \"This company already exists in the address book.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final EditCompanyDescriptor editCompanyDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @param index of the company in the filtered company list to edit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @param editCompanyDescriptor details to edit the company with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public EditCpnyCommand(Index index, EditCompanyDescriptor editCompanyDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(editCompanyDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.editCompanyDescriptor \u003d new EditCompanyDescriptor(editCompanyDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        List\u003cCompany\u003e lastShownList \u003d model.getFilteredCompanyList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Company companyToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Company editedCompany \u003d createEditedCompany(companyToEdit, editCompanyDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!companyToEdit.isSameCompany(editedCompany) \u0026\u0026 model.hasCompany(editedCompany)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COMPANY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.setCompany(companyToEdit, editedCompany);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.updateFilteredCompanyList(PREDICATE_SHOW_ALL_COMPANIES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_COMPANY_SUCCESS, editedCompany));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Creates and returns a {@code Company} with the details of {@code companyToEdit}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * edited with {@code editCompanyDescriptor}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private static Company createEditedCompany(Company companyToEdit, EditCompanyDescriptor editCompanyDescriptor) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        assert companyToEdit !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Name updatedName \u003d editCompanyDescriptor.getName().orElse(companyToEdit.getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Phone updatedPhone \u003d editCompanyDescriptor.getPhone().orElse(companyToEdit.getPhone());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Email updatedEmail \u003d editCompanyDescriptor.getEmail().orElse(companyToEdit.getEmail());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Address updatedAddress \u003d editCompanyDescriptor.getAddress().orElse(companyToEdit.getAddress());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Salary updatedSalary \u003d editCompanyDescriptor.getSalary().orElse(companyToEdit.getSalary());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Occupation updatedOccupation \u003d editCompanyDescriptor.getOccupation().orElse(companyToEdit.getOccupation());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Relationship updateRelationship \u003d editCompanyDescriptor.getRelationship().orElse(companyToEdit"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .getRelationship());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCompanyDescriptor.getTags().orElse(companyToEdit.getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new Company(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedSalary,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                updatedOccupation, updateRelationship, updatedTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        EditCpnyCommand e \u003d (EditCpnyCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 editCompanyDescriptor.equals(e.editCompanyDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static class EditCompanyDescriptor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        private Salary salary;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        private Occupation occupation;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        private Relationship relationship;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public EditCompanyDescriptor() {}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public EditCompanyDescriptor(EditCompanyDescriptor toCopy) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            setSalary(toCopy.salary);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            setOccupation(toCopy.occupation);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            setRelationship(toCopy.relationship);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public void setSalary(Salary salary) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.salary \u003d salary;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public Optional\u003cSalary\u003e getSalary() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return Optional.ofNullable(salary);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public void setOccupation(Occupation occupation) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.occupation \u003d occupation;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public Optional\u003cOccupation\u003e getOccupation() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return Optional.ofNullable(occupation);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public void setRelationship(Relationship relationship) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public Optional\u003cRelationship\u003e getRelationship() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return Optional.ofNullable(relationship);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (!(other instanceof EditCompanyDescriptor)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            EditCompanyDescriptor e \u003d (EditCompanyDescriptor) other;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    \u0026\u0026 getSalary().equals(e.getSalary())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    \u0026\u0026 getOccupation().equals(e.getOccupation())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    \u0026\u0026 getRelationship().equals(e.getRelationship())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 276
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FavoriteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.NameMatchesPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Finds and adds all persons in address book whose name contains any of the argument keywords to a favorites list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class FavoriteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"favorite\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"any of the specified \\\"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"keywords (case-sensitive) and adds them to a list of favorite contacts.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \" John\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the favorite list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_NOT_SPECIFIC \u003d \"Please be more specific\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_NOT_EXIST \u003d \"No person exists with this name\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private final NameMatchesPredicate predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private final NameContainsKeywordsPredicate containsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public FavoriteCommand(NameMatchesPredicate predicate, NameContainsKeywordsPredicate containsPredicate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        this.containsPredicate \u003d containsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            model.updateFilteredPersonList(containsPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EXIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        } else if (model.getFavoritesList().contains(model.getFilteredPersonList().get(0))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        } else if (model.getFilteredPersonList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            model.updateFilteredPersonList(containsPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NOT_SPECIFIC));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            model.addFavorites(model.getFilteredPersonList().get(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || (other instanceof FavoriteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 predicate.equals(((FavoriteCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 49,
      "jkhiani": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCpnyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.NameContainsCpnyKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Finds and lists all companies in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class FindCpnyCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findcpny\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all companies whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final NameContainsCpnyKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public FindCpnyCommand(NameContainsCpnyKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.updateFilteredCompanyList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredCompanyList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || (other instanceof FindCpnyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCpnyCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCpnyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COMPANIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class ListCpnyCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listcpny\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all companies\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        model.updateFilteredCompanyList(PREDICATE_SHOW_ALL_COMPANIES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        ObservableList\u003cCompany\u003e c \u003d model.getFilteredCompanyList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        for (Company comp : c) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            System.out.println(comp.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListFavoritesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.PersonIsFavoritePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " * Filters all people in the person card list displaying only favorites."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "public class ListFavoritesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listFav\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all favorites\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private PersonIsFavoritePredicate predicate \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        predicate \u003d new PersonIsFavoritePredicate(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jkhiani": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        PREFIX_SALARY, PREFIX_OCCUPATION, PREFIX_RELATIONSHIP, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                PREFIX_EMAIL, PREFIX_SALARY, PREFIX_OCCUPATION, PREFIX_RELATIONSHIP)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Salary salary \u003d ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Occupation occupation \u003d ParserUtil.parseOccupation(argMultimap.getValue(PREFIX_OCCUPATION).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Relationship relationship \u003d ParserUtil.parseRelationship(argMultimap.getValue(PREFIX_RELATIONSHIP).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, salary, occupation, relationship, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 11,
      "-": 57,
      "jkhiani": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCpnyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.AddCpnyCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class AddCpnyCommandParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public AddCpnyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        PREFIX_SALARY, PREFIX_OCCUPATION, PREFIX_RELATIONSHIP, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                PREFIX_EMAIL, PREFIX_SALARY, PREFIX_OCCUPATION, PREFIX_RELATIONSHIP)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCpnyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Salary salary \u003d ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Occupation occupation \u003d ParserUtil.parseOccupation(argMultimap.getValue(PREFIX_OCCUPATION).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Relationship relationship \u003d ParserUtil.parseRelationship(argMultimap.getValue(PREFIX_RELATIONSHIP).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Company company \u003d new Company(name, phone, email, address, salary, occupation, relationship, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new AddCpnyCommand(company);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.AddCpnyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.AverageCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.CountCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.DelFavoriteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.DeleteCpnyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.EditCpnyCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.FavoriteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.FindCpnyCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.ListCpnyCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.logic.commands.ListFavoritesCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        case EditCpnyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return new EditCpnyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        case DeleteCpnyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return new DeleteCpnyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        case FindCpnyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return new FindCpnyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        case ListCpnyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return new ListCpnyCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        case FavoriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return new FavoriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        case DelFavoriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return new DelFavoriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        case ListFavoritesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return new ListFavoritesCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        case AddCpnyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return new AddCpnyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        case CountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return new CountCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        case AverageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            return new AverageCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 12,
      "ZhangJiayu0303": 29,
      "-": 92,
      "jkhiani": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final Prefix PREFIX_OCCUPATION \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final Prefix PREFIX_RELATIONSHIP \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DelFavoriteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.logic.commands.DelFavoriteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.NameMatchesPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " * Parses user input for deleting a favorite person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "public class DelFavoriteCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public DelFavoriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelFavoriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return new DelFavoriteCommand(new NameMatchesPredicate(Arrays.asList(nameKeywords)),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 2,
      "jkhiani": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCpnyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.DeleteCpnyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class DeleteCpnyCommandParser implements Parser\u003cDeleteCpnyCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public DeleteCpnyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return new DeleteCpnyCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCpnyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCpnyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.EditCpnyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.EditCpnyCommand.EditCompanyDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class EditCpnyCommandParser implements Parser\u003cEditCpnyCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public EditCpnyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCpnyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        EditCompanyDescriptor editCompanyDescriptor \u003d new EditCompanyDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            editCompanyDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            editCompanyDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            editCompanyDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            editCompanyDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCompanyDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!editCompanyDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new ParseException(EditCpnyCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new EditCpnyCommand(index, editCompanyDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FavoriteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.FavoriteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.NameMatchesPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Parses Favorite Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class FavoriteCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public FavoriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return new FavoriteCommand(new NameMatchesPredicate(Arrays.asList(nameKeywords)),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 32,
      "jkhiani": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCpnyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.commands.FindCpnyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.NameContainsCpnyKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class FindCpnyCommandParser implements Parser\u003cFindCpnyCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public FindCpnyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCpnyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new FindCpnyCommand(new NameContainsCpnyKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Parses a {@code String salary} into an {@code salary}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * @throws ParseException if the given {@code salary} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static Salary parseSalary(String salary) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        requireNonNull(salary);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String trimmedSalary \u003d salary.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (!Salary.isValidSalary(trimmedSalary)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            throw new ParseException(Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return new Salary(trimmedSalary);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Parses a {@code String occupation} into an {@code Occupation}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * @throws ParseException if the given {@code occupation} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static Occupation parseOccupation(String occupation) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        requireNonNull(occupation);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String trimmedOccupation \u003d occupation.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (!Occupation.isValidOccupation(trimmedOccupation)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            throw new ParseException(Occupation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return new Occupation(trimmedOccupation);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Parses a {@code String relationship} into an {@code Relationship}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * @throws ParseException if the given {@code relationship} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static Relationship parseRelationship(String relationship) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        requireNonNull(relationship);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String trimmedRelationship \u003d relationship.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (!Relationship.isValidRelationship(trimmedRelationship)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            throw new ParseException(Relationship.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return new Relationship(trimmedRelationship);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 47,
      "-": 124,
      "jkhiani": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.UniqueCompanyList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final UniquePersonList favorites;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final UniqueCompanyList companies;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        favorites \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companies \u003d new UniqueCompanyList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public void setFavorites(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        this.favorites.setPersons(persons);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public void setCompanies(List\u003cCompany\u003e companies) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        this.companies.setCompanies(companies);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        setFavorites(newData.getFavoritesList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        setCompanies(newData.getCompanyList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if a company with the same identity as {@code company} exists in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean hasCompany(Company company) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return companies.contains(company);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Adds a company to the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * The company must not already exist in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void addCompany(Company c) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companies.add(c);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public boolean hasFavorite(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return favorites.contains(person);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Adds a person to the favorites list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * The person must not already exist in the favorites list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @param p person"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void addFavorites(Person p) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        favorites.add(p);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * Removes a person from the favorites list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * The person must already exist in the favorites list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * @param p person"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public void removeFavorite(Person p) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        favorites.remove(p);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFavoritesList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return favorites.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void setCompany(Company target, Company editedCompany) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(editedCompany);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companies.setCompany(target, editedCompany);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void removeCompany(Company key) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companies.remove(key);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public ObservableList\u003cCompany\u003e getCompanyList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return companies.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 52,
      "-": 144,
      "jkhiani": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    Predicate\u003cCompany\u003e PREDICATE_SHOW_ALL_COMPANIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if a company with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    boolean hasCompany(Company company);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Deletes a given company"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    void deleteCompany(Company target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Adds the given company."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * {@code company} must not already exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    void addCompany(Company company);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Adds the given person to the favorites list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    void addFavorites(Person person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * Removes the given person from the favorites list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    void removeFavorite(Person person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    ObservableList\u003cPerson\u003e getFavoritesList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Replaces a given company {@code target} with {@code editedCompany}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * The company identity of {@code editedCompany} must not be the same as another existing company"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    void setCompany(Company target, Company editedCompany);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    ObservableList\u003cCompany\u003e getFilteredCompanyList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Updates the filter of the filtered company list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    void updateFilteredCompanyList(Predicate\u003cCompany\u003e predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Selected company in the filtered company list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * null if no company is selected."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    ReadOnlyProperty\u003cCompany\u003e selectedCompanyProperty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns the selected company in the filtered company list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * null if no company is selected."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    Company getSelectedCompany();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Sets the selected company in the filtered company list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    void setSelectedCompany(Company company);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 57,
      "-": 131,
      "jkhiani": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final FilteredList\u003cCompany\u003e filteredCompanies;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredFavorites;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final SimpleObjectProperty\u003cCompany\u003e selectedCompany \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        filteredCompanies \u003d new FilteredList\u003c\u003e(versionedAddressBook.getCompanyList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        filteredFavorites \u003d new FilteredList\u003c\u003e(versionedAddressBook.getFavoritesList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        filteredFavorites.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean hasCompany(Company company) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return versionedAddressBook.hasCompany(company);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void addCompany(Company company) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        versionedAddressBook.addCompany(company);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        updateFilteredCompanyList(PREDICATE_SHOW_ALL_COMPANIES);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public ReadOnlyProperty\u003cCompany\u003e selectedCompanyProperty() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return selectedCompany;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Company getSelectedCompany() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return selectedCompany.getValue();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void setSelectedCompany(Company company) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (company !\u003d null \u0026\u0026 !filteredCompanies.contains(company)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        selectedCompany.setValue(company);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Ensures {@code selectedCompany} is a valid company in {@code filteredCompanies}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private void ensureSelectedCompanyIsValid(ListChangeListener.Change\u003c? extends Company\u003e change) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (selectedCompany.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                // null is always a valid selected company, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            boolean wasSelectedCompanyReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    .getRemovedSize()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedCompany.getValue());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (wasSelectedCompanyReplaced) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                // Update selectedCompany to its new value."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedCompany.getValue());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                selectedCompany.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            boolean wasSelectedCompanyRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    .anyMatch(removedCompany -\u003e selectedCompany.getValue().isSameCompany(removedCompany));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (wasSelectedCompanyRemoved) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                // Select the company that came before it in the list,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                // or clear the selection if there is no such company."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                selectedCompany.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void deleteCompany(Company target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        versionedAddressBook.removeCompany(target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void addFavorites(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        versionedAddressBook.addFavorites(person);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public void removeFavorite(Person person) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        versionedAddressBook.removeFavorite(person);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFavoritesList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return versionedAddressBook.getFavoritesList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void setCompany(Company target, Company editedCompany) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireAllNonNull(target, editedCompany);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        versionedAddressBook.setCompany(target, editedCompany);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public ObservableList\u003cCompany\u003e getFilteredCompanyList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return filteredCompanies;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void updateFilteredCompanyList(Predicate\u003cCompany\u003e predicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        filteredCompanies.setPredicate(predicate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 94,
      "-": 235,
      "jkhiani": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    ObservableList\u003cCompany\u003e getCompanyList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    ObservableList\u003cPerson\u003e getFavoritesList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 2,
      "-": 18,
      "jkhiani": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Company.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " *Represents a Company in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " *Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class Company {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Salary salary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Occupation occupation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Relationship relationship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Company(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                  Salary salary, Occupation occupation, Relationship relationship, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireAllNonNull(name, phone, email, address, salary, occupation, relationship, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.occupation \u003d occupation;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Company(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.salary \u003d new Salary(\"1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.occupation \u003d new Occupation(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.relationship \u003d new Relationship(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Salary getSalary() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return salary;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Occupation getOccupation() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return occupation;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Relationship getRelationship() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return relationship;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean isSameCompany(Company otherCompany) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (otherCompany \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return otherCompany !\u003d null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 otherCompany.getName().equals(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 (otherCompany.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || otherCompany.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || otherCompany.getSalary().equals(getSalary())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || otherCompany.getOccupation().equals(getOccupation())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || otherCompany.getRelationship().equals(getRelationship()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 otherPerson.getSalary().equals(getSalary())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 otherPerson.getOccupation().equals(getOccupation())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 otherPerson.getRelationship().equals(getRelationship())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return Objects.hash(name, phone, email, address, salary, occupation, relationship, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" Salary: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(getSalary())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" Occupation: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(getOccupation())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" Relationship: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(getRelationship())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsCpnyKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class NameContainsCpnyKeywordsPredicate implements Predicate\u003cCompany\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public NameContainsCpnyKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean test(Company company) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(company.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || (other instanceof NameContainsCpnyKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsCpnyKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameMatchesPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches the exact name passed in."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "public class NameMatchesPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public NameMatchesPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        if (keywords.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            name \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        } else if (keywords.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            name \u003d keywords.get(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            name \u003d keywords.get(0) + \" \" + keywords.get(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return name.equals(person.getName().fullName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jkhiani": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Occupation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": " * Represents a Person\u0027s occupation in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOccupation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "public class Occupation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            \"Occupations should only contain alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * The first character of the occupation must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Constructs a {@code Occupation}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * @param occupation A valid occupation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public Occupation(String occupation) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        requireNonNull(occupation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        checkArgument(isValidOccupation(occupation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        value \u003d occupation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Returns true if a given string is a valid occupation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static boolean isValidOccupation(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                || (other instanceof Occupation // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                \u0026\u0026 value.equals(((Occupation) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final Salary salary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final Occupation occupation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final Relationship relationship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                  Salary salary, Occupation occupation, Relationship relationship, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        requireAllNonNull(name, phone, email, address, salary, occupation, relationship, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.occupation \u003d occupation;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.salary \u003d new Salary(\"1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.occupation \u003d new Occupation(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.relationship \u003d new Relationship(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public Salary getSalary() { return salary; }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public Occupation getOccupation() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return occupation;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public Relationship getRelationship() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return relationship;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                || otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                || otherPerson.getSalary().equals(getSalary())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                || otherPerson.getOccupation().equals(getOccupation())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                || otherPerson.getRelationship().equals(getRelationship()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                \u0026\u0026 otherPerson.getSalary().equals(getSalary())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                \u0026\u0026 otherPerson.getOccupation().equals(getOccupation())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                \u0026\u0026 otherPerson.getRelationship().equals(getRelationship())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return Objects.hash(name, phone, email, address, salary, occupation, relationship, tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .append(\" Salary: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .append(getSalary())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .append(\" Occupation: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .append(getOccupation())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .append(\" Relationship: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .append(getRelationship())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 3,
      "ZhangJiayu0303": 24,
      "-": 125,
      "jkhiani": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonIsFavoritePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} exists in the favorites list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "public class PersonIsFavoritePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public PersonIsFavoritePredicate(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return model.getFavoritesList().contains(person);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jkhiani": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Relationship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Represents a Person\u0027s relationship status in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRelationship(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class Relationship {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            \"Relationships should only contain alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * The first character of the relationship must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Constructs a {@code Relationship}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @param relationship A valid relationship."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Relationship(String relationship) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(relationship);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        checkArgument(isValidRelationship(relationship), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        value \u003d relationship;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if a given string is a valid relationship."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static boolean isValidRelationship(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || (other instanceof Relationship // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 value.equals(((Relationship) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Salary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Represents a Person\u0027s salary in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSalary(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class Salary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            \"Salary should only contain numbers, and it should be at least 1 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Constructs a {@code Salary}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @param salary A valid salary number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Salary(String salary) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(salary);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        checkArgument(isValidSalary(salary), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        value \u003d salary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if a given string is a valid salary number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static boolean isValidSalary(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || (other instanceof Salary // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 value.equals(((Salary) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueCompanyList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSameCompany(Company)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * persons uses Company#isSameCompany(Company) for equality so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * unique in terms of identity in the UniqueCompanyList. However, the removal of a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * person uses Company#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * @see Company#isSameCompany(Company)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class UniqueCompanyList implements Iterable\u003cCompany\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final ObservableList\u003cCompany\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final ObservableList\u003cCompany\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean contains(Company toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCompany);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void add(Company toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void setCompany(Company target, Company editedCompany) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireAllNonNull(target, editedCompany);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!target.isSameCompany(editedCompany) \u0026\u0026 contains(editedCompany)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        internalList.set(index, editedCompany);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void remove(Company toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void setCompanies(UniqueCompanyList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public void setCompanies(List\u003cCompany\u003e companies) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        requireAllNonNull(companies);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!companiesAreUnique(companies)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        internalList.setAll(companies);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public ObservableList\u003cCompany\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Iterator\u003cCompany\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                || (other instanceof UniqueCompanyList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCompanyList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private boolean companiesAreUnique(List\u003cCompany\u003e companies) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        for (int i \u003d 0; i \u003c companies.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            for (int j \u003d i + 1; j \u003c companies.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                if (companies.get(i).isSameCompany(companies.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Salary(\"15000\"), new Occupation(\"Professor\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                new Relationship(\"single\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Salary(\"9000\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                    new Occupation(\"Programmer\"), new Relationship(\"single\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Salary(\"3000\"), new Occupation(\"HR\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                    new Relationship(\"married\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Salary(\"50000\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                    new Occupation(\"Excutive Director\"), new Relationship(\"single\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Salary(\"20000\"), new Occupation(\"Vice President\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                    new Relationship(\"married\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Salary(\"5000\"), new Occupation(\"Project manager\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                    new Relationship(\"divorced\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 9,
      "-": 48,
      "jkhiani": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCompany.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Jackson-friendly version of {@link Company}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "class JsonAdaptedCompany {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Company\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final String salary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final String occupation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final String relationship;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Constructs a {@code JsonAdaptedCompany} with the given company details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public JsonAdaptedCompany(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                             @JsonProperty(\"salary\") String salary, @JsonProperty(\"occupation\") String occupation,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                             @JsonProperty(\"relationship\") String relationship, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.occupation \u003d occupation;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Converts a given {@code Company} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public JsonAdaptedCompany(Company source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        salary \u003d source.getSalary().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        occupation \u003d source.getOccupation().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        relationship \u003d source.getRelationship().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Converts this Jackson-friendly adapted company object into the model\u0027s {@code Company} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted company."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public Company toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final List\u003cTag\u003e companyTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            companyTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (salary \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!Salary.isValidSalary(salary)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final Salary modelSalary \u003d new Salary(salary);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (occupation \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    Occupation.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!Occupation.isValidOccupation(occupation)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(Occupation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final Occupation modelOccupation \u003d new Occupation(occupation);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (relationship \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    Relationship.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!Relationship.isValidRelationship(relationship)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            throw new IllegalValueException(Relationship.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final Relationship modelRelationship \u003d new Relationship(relationship);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(companyTags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return new Company(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                modelSalary, modelOccupation, modelRelationship, modelTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final String salary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final String occupation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final String relationship;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            @JsonProperty(\"salary\") String salary, @JsonProperty(\"occupation\") String occupation,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            @JsonProperty(\"relationship\") String relationship, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.occupation \u003d occupation;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        salary \u003d source.getSalary().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        occupation \u003d source.getOccupation().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        relationship \u003d source.getRelationship().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (salary \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (!Salary.isValidSalary(salary)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            throw new IllegalValueException(Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        final Salary modelSalary \u003d new Salary(salary);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (occupation \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                    Occupation.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (!Occupation.isValidOccupation(occupation)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            throw new IllegalValueException(Occupation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        final Occupation modelOccupation \u003d new Occupation(occupation);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (relationship \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                    Relationship.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        if (!Relationship.isValidRelationship(relationship)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            throw new IllegalValueException(Relationship.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        final Relationship modelRelationship \u003d new Relationship(relationship);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                modelSalary, modelOccupation, modelRelationship, modelTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 33,
      "-": 107,
      "jkhiani": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPANY \u003d \"Companies list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final List\u003cJsonAdaptedCompany\u003e companies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e favorites \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                                       @JsonProperty(\"companies\") List\u003cJsonAdaptedCompany\u003e companies,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                                       @JsonProperty(\"favorites\") List\u003cJsonAdaptedPerson\u003e favorites) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.companies.addAll(companies);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        this.favorites.addAll(favorites);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companies.addAll(source.getCompanyList().stream().map(JsonAdaptedCompany::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        favorites.addAll(source.getFavoritesList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        for (JsonAdaptedCompany jsonAdaptedCompany : companies) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            Company company \u003d jsonAdaptedCompany.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (addressBook.hasCompany(company)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_COMPANY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            addressBook.addCompany(company);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : favorites) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            if (addressBook.hasFavorite(person)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            addressBook.addFavorites(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 12,
      "-": 59,
      "jkhiani": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://www.google.com.sg/maps/search/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cPerson\u003e selectedPerson) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getAddress());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "jkhiani": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CompanyCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * An UI component that displays information of a {@code Company}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class CompanyCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private static final String FXML \u003d \"CompanyListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private static final String[] TAG_COLORS \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public final Company company;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Label salary;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Label occupation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private Label relationship;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public CompanyCard(Company company, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        name.setText(company.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        phone.setText(company.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        address.setText(company.getAddress().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        email.setText(company.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        salary.setText(company.getSalary().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        occupation.setText(company.getOccupation().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        relationship.setText(company.getRelationship().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        company.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            tagLabel.getStyleClass().add(TAG_COLORS[Math.abs(tag.tagName.hashCode()) % TAG_COLORS.length]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        if (!(other instanceof CompanyCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        CompanyCard card \u003d (CompanyCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                \u0026\u0026 company.equals(card.company);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CompanyListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " * Panel containing the list of companies."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "public class CompanyListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private static final String FXML \u003d \"CompanyListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CompanyListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private ListView\u003cCompany\u003e companyListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public CompanyListPanel(ObservableList\u003cCompany\u003e companyList, ObservableValue\u003cCompany\u003e selectedCompany,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                           Consumer\u003cCompany\u003e onSelectedCompanyChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companyListView.setItems(companyList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companyListView.setCellFactory(listView -\u003e new CompanyListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companyListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            logger.fine(\"Selection in company list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            onSelectedCompanyChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        selectedCompany.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            logger.fine(\"Selected company changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected company,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (Objects.equals(companyListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                companyListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                int index \u003d companyListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                companyListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                companyListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Company} using a {@code CompanyCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    class CompanyListViewCell extends ListCell\u003cCompany\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        protected void updateItem(Company company, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            super.updateItem(company, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            if (empty || company \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                setGraphic(new CompanyCard(company, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private CompanyListPanel companyListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private StackPane companyListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedPersonProperty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companyListPanel \u003d new CompanyListPanel(logic.getFilteredCompanyList(), logic.selectedCompanyProperty(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                logic::setSelectedCompany);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        companyListPanelPlaceholder.getChildren().add(companyListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBook(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                logic.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public CompanyListPanel getCompanyListPanel() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return companyListPanel;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 12,
      "-": 200,
      "jkhiani": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    private static final String[] TAG_COLORS \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private Label salary;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private Label occupation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private Label relationship;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        salary.setText(person.getSalary().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        occupation.setText(person.getOccupation().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        relationship.setText(person.getRelationship().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            tagLabel.getStyleClass().add(TAG_COLORS[Math.abs(tag.tagName.hashCode()) % TAG_COLORS.length]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 1,
      "ZhangJiayu0303": 9,
      "-": 69,
      "jkhiani": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public static final String SYNC_STATUS_NUM_CONTACTS \u003d \"Total Contacts: %d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private Label numContactsStatus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    public StatusBarFooter(ReadOnlyAddressBook addressBook, int numContacts) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus(addressBook.getPersonList().size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        numContactsStatus.setText(String.format(SYNC_STATUS_NUM_CONTACTS, numContacts));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    private void updateSyncStatus(int numContacts) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        numContactsStatus.setText(String.format(SYNC_STATUS_NUM_CONTACTS, numContacts));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "jkhiani": 8
    }
  },
  {
    "path": "src/main/resources/view/CompanyListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cLabel fx:id\u003d\"salary\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$salary\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cLabel fx:id\u003d\"occupation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$occupation\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cLabel fx:id\u003d\"relationship\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$relationship\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jkhiani": 39
    }
  },
  {
    "path": "src/main/resources/view/CompanyListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    \u003cListView fx:id\u003d\"companyListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#clients {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-text-fill: #e2edff;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#companies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-text-fill: #e2edff;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 352,
      "jkhiani": 44
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cLabel id\u003d\"clients\" fx:id\u003d\"clients\" text\u003d\"Clients\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "          \u003cVBox fx:id\u003d\"companyList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cLabel id\u003d\"companies\" fx:id\u003d\"companies\" text\u003d\"Companies\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            \u003cStackPane fx:id\u003d\"companyListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "jkhiani": 10
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "      \u003cLabel fx:id\u003d\"salary\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$salary\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "      \u003cLabel fx:id\u003d\"occupation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$occupation\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "      \u003cLabel fx:id\u003d\"relationship\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$relationship\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "  \u003cLabel fx:id\u003d\"numContactsStatus\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "jkhiani": 1
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"8000\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"teacher\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"single\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"5000\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"mason\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"married\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 8,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"9000\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"lawyer\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"married\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 4,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"5000\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"teacher\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"single\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"7000\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"research fellow\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"married\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 7,
      "-": 13
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"2000\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"tutor\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"single\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 4,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"5000\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"teacher\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"single\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"8000\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"engineer\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"single\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"15000\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"banker\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"married\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"3000\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"tutor\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"single\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"6000\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"research assistant\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"single\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"9000\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"lawyer\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"married\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"salary\": \"19000\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"occupation\": \"doctor\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    \"relationship\": \"single\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 21,
      "-": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String SALARY_FIELD_ID \u003d \"#salary\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String OCCUPATION_FIELD_ID \u003d \"#occupation\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String RELATIONSHIP_FIELD_ID \u003d \"#relationship\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final Label salaryLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final Label occupationLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private final Label relationshipLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        salaryLabel \u003d getChildNode(SALARY_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        occupationLabel \u003d getChildNode(OCCUPATION_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        relationshipLabel \u003d getChildNode(RELATIONSHIP_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public String getSalary() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return salaryLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public String getOccupation() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return occupationLabel.getText();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public String getRelationship() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return relationshipLabel.getText();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                \u0026\u0026 getSalary().equals(person.getSalary().value)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                \u0026\u0026 getOccupation().equals(person.getOccupation().value)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                \u0026\u0026 getRelationship().equals(person.getRelationship().value)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 25,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public void addCompany(Company company) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public void addFavorites(Person person) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFavoritesList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public boolean hasCompany(Company company) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public ObservableList\u003cCompany\u003e getFilteredCompanyList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public void updateFilteredCompanyList(Predicate\u003cCompany\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 253,
      "jkhiani": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String VALID_SALARY_AMY \u003d \"5000\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String VALID_SALARY_BOB \u003d \"4500\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String VALID_OCCUPATION_AMY \u003d \"teacher\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String VALID_OCCUPATION_BOB \u003d \"mason\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String VALID_RELATIONSHIP_AMY \u003d \"single\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String VALID_RELATIONSHIP_BOB \u003d \"divorced\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String SALARY_DESC_AMY \u003d \" \" + PREFIX_SALARY + VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String SALARY_DESC_BOB \u003d \" \" + PREFIX_SALARY + VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String OCCUPATION_DESC_AMY \u003d \" \" + PREFIX_OCCUPATION + VALID_OCCUPATION_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String OCCUPATION_DESC_BOB \u003d \" \" + PREFIX_OCCUPATION + VALID_OCCUPATION_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String RELATIONSHIP_DESC_AMY \u003d \" \" + PREFIX_RELATIONSHIP + VALID_RELATIONSHIP_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String RELATIONSHIP_DESC_BOB \u003d \" \" + PREFIX_RELATIONSHIP + VALID_RELATIONSHIP_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String INVALID_SALARY_DESC \u003d \" \" + PREFIX_SALARY + \"\u0026\"; // \u0027\u0026\u0027 not allowed in salary"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String INVALID_OCCUPATION_DESC \u003d \" \" + PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    // empty string not allowed for occupation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public static final String INVALID_RELATIONSHIP_DESC \u003d \" \" + PREFIX_RELATIONSHIP + \"\u0026\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    // \u0027\u0026\u0027 not allowed for relationship"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .withSalary(VALID_SALARY_AMY).withOccupation(VALID_OCCUPATION_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .withRelationship(VALID_RELATIONSHIP_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .withSalary(VALID_SALARY_BOB).withOccupation(VALID_OCCUPATION_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .withRelationship(VALID_RELATIONSHIP_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 11,
      "ZhangJiayu0303": 13,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OCCUPATION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RELATIONSHIP_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OCCUPATION_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OCCUPATION_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RELATIONSHIP_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OCCUPATION_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RELATIONSHIP_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // multiple salaries - last salary accepted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_AMY + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // multiple occupations - last occupation accepted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                + ADDRESS_DESC_BOB + OCCUPATION_DESC_AMY + OCCUPATION_DESC_BOB + OCCUPATION_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                + RELATIONSHIP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // multiple relationships - last relationship accepted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // missing salary prefix"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + VALID_SALARY_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // missing occupation prefix"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_BOB + VALID_OCCUPATION_BOB + RELATIONSHIP_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // missing relationship prefix"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + VALID_RELATIONSHIP_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + VALID_RELATIONSHIP_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // invalid salary"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + INVALID_SALARY_DESC + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // invalid occupation"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + INVALID_OCCUPATION_DESC + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // invalid relationship"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + INVALID_RELATIONSHIP_DESC"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 12,
      "ZhangJiayu0303": 74,
      "-": 130,
      "jkhiani": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OCCUPATION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RELATIONSHIP_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OCCUPATION_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OCCUPATION_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RELATIONSHIP_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OCCUPATION_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OCCUPATION_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RELATIONSHIP_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RELATIONSHIP_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SALARY_DESC, Salary.MESSAGE_CONSTRAINTS); // invalid salary"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OCCUPATION_DESC, Occupation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // invalid occupation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RELATIONSHIP_DESC, Relationship.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        // invalid relationship"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + VALID_SALARY_AMY + VALID_OCCUPATION_AMY + VALID_RELATIONSHIP_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .withSalary(VALID_SALARY_AMY).withOccupation(VALID_OCCUPATION_AMY)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .withRelationship(VALID_RELATIONSHIP_AMY)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // salary"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSalary(VALID_SALARY_AMY).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // occupation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OCCUPATION_DESC_AMY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withOccupation(VALID_OCCUPATION_AMY).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withRelationship(VALID_RELATIONSHIP_AMY).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .withSalary(VALID_SALARY_BOB).withOccupation(VALID_OCCUPATION_BOB)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .withRelationship(VALID_RELATIONSHIP_BOB)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + PHONE_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withSalary(VALID_SALARY_BOB)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .withOccupation(VALID_OCCUPATION_BOB).withRelationship(VALID_RELATIONSHIP_BOB)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 22,
      "ZhangJiayu0303": 41,
      "-": 200,
      "jkhiani": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String INVALID_SALARY \u003d \"@8000\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String INVALID_OCCUPATION \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String INVALID_RELATIONSHIP \u003d \"@@@\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String VALID_SALARY \u003d \"8000\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String VALID_OCCUPATION \u003d \"teacher\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String VALID_RELATIONSHIP \u003d \"single\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseSalary_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSalary((String) null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseSalary_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_SALARY));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseSalary_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Salary expectedSalary \u003d new Salary(VALID_SALARY);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertEquals(expectedSalary, ParserUtil.parseSalary(VALID_SALARY));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseSalary_validValueWithWhitespace_returnsTrimmedSalary() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String salaryWithWhitespace \u003d WHITESPACE + VALID_SALARY + WHITESPACE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Salary expectedSalary \u003d new Salary(VALID_SALARY);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertEquals(expectedSalary, ParserUtil.parseSalary(salaryWithWhitespace));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseOccupation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOccupation((String) null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseOccupation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseOccupation(INVALID_OCCUPATION));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseOccupation_validValueWithoutWhitespace_returnsOccupation() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Occupation expectedOccupation \u003d new Occupation(VALID_OCCUPATION);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertEquals(expectedOccupation, ParserUtil.parseOccupation(VALID_OCCUPATION));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseOccupation_validValueWithWhitespace_returnsTrimmedOccupation() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String occupationWithWhitespace \u003d WHITESPACE + VALID_OCCUPATION + WHITESPACE;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Occupation expectedOccupation \u003d new Occupation(VALID_OCCUPATION);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertEquals(expectedOccupation, ParserUtil.parseOccupation(occupationWithWhitespace));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseRelationship_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRelationship((String) null));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseRelationship_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseRelationship(INVALID_RELATIONSHIP));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseRelationship_validValueWithoutWhitespace_returnsRelationship() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Relationship expectedRelationship \u003d new Relationship(VALID_RELATIONSHIP);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertEquals(expectedRelationship, ParserUtil.parseRelationship(VALID_RELATIONSHIP));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void parseRelationship_validValueWithWhitespace_returnsTrimmedRelationship() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String relationshipWithWhitespace \u003d WHITESPACE + VALID_RELATIONSHIP + WHITESPACE;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Relationship expectedRelationship \u003d new Relationship(VALID_RELATIONSHIP);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertEquals(expectedRelationship, ParserUtil.parseRelationship(relationshipWithWhitespace));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 1,
      "ZhangJiayu0303": 77,
      "-": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        private final ObservableList\u003cCompany\u003e companies \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        public ObservableList\u003cCompany\u003e getCompanyList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "            return companies;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "jkhiani": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/OccupationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "public class OccupationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Occupation(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void constructor_invalidOccupation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String invalidOccupation \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Occupation(invalidOccupation));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void isValidOccupation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // null occupation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Occupation.isValidOccupation(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // invalid occupation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Occupation.isValidOccupation(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Occupation.isValidOccupation(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // valid occupation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertTrue(Occupation.isValidOccupation(\"exeutive Director\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertTrue(Occupation.isValidOccupation(\"freelancer\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertTrue(Occupation.isValidOccupation(\"professor, CEO, expert\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OCCUPATION_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RELATIONSHIP_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // different salary -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withSalary(VALID_SALARY_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // different occupation -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withOccupation(VALID_OCCUPATION_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // different relationship -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withRelationship(VALID_RELATIONSHIP_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 16,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RelationshipTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "public class RelationshipTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Relationship(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void constructor_invalidRelationship_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String invalidRelationship \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Relationship(invalidRelationship));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void isValidRelationship() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // null relationship"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Relationship.isValidRelationship(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // invalid relationship"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Relationship.isValidRelationship(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Relationship.isValidRelationship(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Relationship.isValidRelationship(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Relationship.isValidRelationship(\"single*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // valid relationship"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertTrue(Relationship.isValidRelationship(\"single\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertTrue(Relationship.isValidRelationship(\"married\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SalaryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "public class SalaryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Salary(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void constructor_invalidSalary_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String invalidSalary \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidSalary));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void isValidSalary() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // null salary value"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Salary.isValidSalary(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Salary.isValidSalary(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"9000\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"8000000\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"666666666666\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String INVALID_SALARY \u003d \"@\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String INVALID_OCCUPATION \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String INVALID_RELATIONSHIP \u003d \"@@@\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String VALID_SALARY \u003d BENSON.getSalary().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String VALID_OCCUPATION \u003d BENSON.getOccupation().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private static final String VALID_RELATIONSHIP \u003d BENSON.getRelationship().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SALARY,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SALARY,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SALARY,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                VALID_SALARY, VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_SALARY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                VALID_SALARY, VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        VALID_SALARY, VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                VALID_SALARY, VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void toModelType_invalidSalary_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_SALARY,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String expectedMessage \u003d Salary.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void toModelType_nullSalary_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                null, VALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void toModelType_invalidOccupation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SALARY,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        INVALID_OCCUPATION, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String expectedMessage \u003d Occupation.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void toModelType_nullOccupation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                VALID_SALARY, null, VALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Occupation.class.getSimpleName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void toModelType_invalidRelationship_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SALARY,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        VALID_OCCUPATION, INVALID_RELATIONSHIP, VALID_TAGS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String expectedMessage \u003d Relationship.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public void toModelType_nullRelationship_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                VALID_SALARY, VALID_OCCUPATION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Relationship.class.getSimpleName());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SALARY,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                        VALID_OCCUPATION, VALID_RELATIONSHIP, invalidTags);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 30,
      "ZhangJiayu0303": 45,
      "-": 101,
      "jkhiani": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    public AddressBookBuilder withCompany(Company company) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        addressBook.addCompany(company);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jkhiani"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor.setSalary(person.getSalary());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor.setOccupation(person.getOccupation());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor.setRelationship(person.getRelationship());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Sets the {@code Salary} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public EditPersonDescriptorBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor.setSalary(new Salary(salary));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Sets the {@code Occupation} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public EditPersonDescriptorBuilder withOccupation(String occupation) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor.setOccupation(new Occupation(occupation));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Sets the {@code Relationship} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public EditPersonDescriptorBuilder withRelationship(String relationship) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor.setRelationship(new Relationship(relationship));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 27,
      "-": 87,
      "jkhiani": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String DEFAULT_SALARY \u003d \"5000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String DEFAULT_OCCUPATION \u003d \"teacher\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public static final String DEFAULT_RELATIONSHIP \u003d \"single\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private Salary salary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private Occupation occupation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    private Relationship relationship;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        salary \u003d new Salary(DEFAULT_SALARY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        occupation \u003d new Occupation(DEFAULT_OCCUPATION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        relationship \u003d new Relationship(DEFAULT_RELATIONSHIP);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        salary \u003d personToCopy.getSalary();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        occupation \u003d personToCopy.getOccupation();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        relationship \u003d personToCopy.getRelationship();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Sets the {@code Salary} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public PersonBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.salary \u003d new Salary(salary);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Sets the {@code Occupation} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public PersonBuilder withOccupation(String occupation) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.occupation \u003d new Occupation(occupation);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     * Sets the {@code Relationship} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    public PersonBuilder withRelationship(String relationship) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        this.relationship \u003d new Relationship(relationship);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        return new Person(name, phone, email, address, salary, occupation, relationship, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 3,
      "ZhangJiayu0303": 37,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCUPATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        sb.append(PREFIX_SALARY + person.getSalary().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        sb.append(PREFIX_OCCUPATION + person.getOccupation().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        sb.append(PREFIX_RELATIONSHIP + person.getRelationship().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        descriptor.getSalary().ifPresent(salary -\u003e sb.append(PREFIX_SALARY).append(salary.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        descriptor.getOccupation().ifPresent(occupation -\u003e sb.append(PREFIX_OCCUPATION).append(occupation.value)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "        descriptor.getRelationship().ifPresent(relationship -\u003e sb.append(PREFIX_RELATIONSHIP).append(relationship.value)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 5,
      "ZhangJiayu0303": 6,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OCCUPATION_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RELATIONSHIP_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withPhone(\"94351253\").withSalary(\"5000\").withOccupation(\"teacher\").withRelationship(\"single\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(\"8000\").withOccupation(\"engineer\").withRelationship(\"single\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(\"15000\").withOccupation(\"banker\").withRelationship(\"married\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(\"3000\").withOccupation(\"tutor\").withRelationship(\"single\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(\"6000\").withOccupation(\"research assistant\").withRelationship(\"single\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(\"9000\").withOccupation(\"lawyer\").withRelationship(\"married\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(\"19000\").withOccupation(\"doctor\").withRelationship(\"single\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(\"7000\").withOccupation(\"researcher\").withRelationship(\"single\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(\"12000\").withOccupation(\"sales person\").withRelationship(\"married\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(VALID_SALARY_AMY).withOccupation(VALID_OCCUPATION_AMY).withRelationship(VALID_RELATIONSHIP_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withSalary(VALID_SALARY_AMY).withOccupation(VALID_OCCUPATION_AMY).withRelationship(VALID_RELATIONSHIP_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 2,
      "ZhangJiayu0303": 28,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person secondPerson \u003d TYPICAL_PERSONS.get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            Salary salary \u003d new Salary(100 * i + \"0\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            Occupation occupation \u003d new Occupation(\"b\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "            Relationship relationship \u003d new Relationship(\"c\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address, salary, occupation, relationship,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roanurquhart"
        },
        "content": "                    Collections.emptySet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roanurquhart": 4,
      "ZhangJiayu0303": 4,
      "-": 103
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OCCUPATION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RELATIONSHIP_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OCCUPATION_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OCCUPATION_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RELATIONSHIP_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + \"   \" + OCCUPATION_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + RELATIONSHIP_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        /* Case: invalid salary -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + INVALID_SALARY_DESC + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertCommandFailure(command, Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        /* Case: invalid occupation -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + INVALID_OCCUPATION_DESC + RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertCommandFailure(command, Occupation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        /* Case: invalid relationship -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + INVALID_RELATIONSHIP_DESC;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertCommandFailure(command, Relationship.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 49,
      "-": 239
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 1,
      "-": 193
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OCCUPATION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RELATIONSHIP_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OCCUPATION_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OCCUPATION_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RELATIONSHIP_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RELATIONSHIP_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Occupation;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Relationship;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + SALARY_DESC_BOB + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + OCCUPATION_DESC_BOB + \" \" + RELATIONSHIP_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + RELATIONSHIP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_AMY + SALARY_DESC_AMY + OCCUPATION_DESC_AMY + RELATIONSHIP_DESC_AMY"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        /* Case: invalid salary -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_SALARY_DESC,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        /* Case: invalid occupation -\u003e rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_OCCUPATION_DESC,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                Occupation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        /* Case: invalid relationship -\u003e rejected */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                        + INVALID_RELATIONSHIP_DESC,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                Relationship.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB + RELATIONSHIP_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_AMY + SALARY_DESC_BOB + OCCUPATION_DESC_BOB"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + RELATIONSHIP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + RELATIONSHIP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + OCCUPATION_DESC_BOB"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhangJiayu0303"
        },
        "content": "                + RELATIONSHIP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangJiayu0303": 43,
      "-": 289
    }
  }
]
